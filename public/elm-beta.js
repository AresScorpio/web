
(function() {
'use strict';

function F2(fun)
{
  function wrapper(a) { return function(b) { return fun(a,b); }; }
  wrapper.arity = 2;
  wrapper.func = fun;
  return wrapper;
}

function F3(fun)
{
  function wrapper(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  }
  wrapper.arity = 3;
  wrapper.func = fun;
  return wrapper;
}

function F4(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  }
  wrapper.arity = 4;
  wrapper.func = fun;
  return wrapper;
}

function F5(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  }
  wrapper.arity = 5;
  wrapper.func = fun;
  return wrapper;
}

function F6(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  }
  wrapper.arity = 6;
  wrapper.func = fun;
  return wrapper;
}

function F7(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  }
  wrapper.arity = 7;
  wrapper.func = fun;
  return wrapper;
}

function F8(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  }
  wrapper.arity = 8;
  wrapper.func = fun;
  return wrapper;
}

function F9(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  }
  wrapper.arity = 9;
  wrapper.func = fun;
  return wrapper;
}

function A2(fun, a, b)
{
  return fun.arity === 2
    ? fun.func(a, b)
    : fun(a)(b);
}
function A3(fun, a, b, c)
{
  return fun.arity === 3
    ? fun.func(a, b, c)
    : fun(a)(b)(c);
}
function A4(fun, a, b, c, d)
{
  return fun.arity === 4
    ? fun.func(a, b, c, d)
    : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e)
{
  return fun.arity === 5
    ? fun.func(a, b, c, d, e)
    : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f)
{
  return fun.arity === 6
    ? fun.func(a, b, c, d, e, f)
    : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g)
{
  return fun.arity === 7
    ? fun.func(a, b, c, d, e, f, g)
    : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h)
{
  return fun.arity === 8
    ? fun.func(a, b, c, d, e, f, g, h)
    : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i)
{
  return fun.arity === 9
    ? fun.func(a, b, c, d, e, f, g, h, i)
    : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

var _elm_lang$lazy$Native_Lazy = function() {

function memoize(thunk)
{
    var value;
    var isForced = false;
    return function(tuple0) {
        if (!isForced) {
            value = thunk(tuple0);
            isForced = true;
        }
        return value;
    };
}

return {
    memoize: memoize
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Basics = function() {

function div(a, b)
{
	return (a / b) | 0;
}
function rem(a, b)
{
	return a % b;
}
function mod(a, b)
{
	if (b === 0)
	{
		throw new Error('Cannot perform mod 0. Division by zero error.');
	}
	var r = a % b;
	var m = a === 0 ? 0 : (b > 0 ? (a >= 0 ? r : r + b) : -mod(-a, -b));

	return m === b ? 0 : m;
}
function logBase(base, n)
{
	return Math.log(n) / Math.log(base);
}
function negate(n)
{
	return -n;
}
function abs(n)
{
	return n < 0 ? -n : n;
}

function min(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) < 0 ? a : b;
}
function max(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) > 0 ? a : b;
}
function clamp(lo, hi, n)
{
	return _elm_lang$core$Native_Utils.cmp(n, lo) < 0
		? lo
		: _elm_lang$core$Native_Utils.cmp(n, hi) > 0
			? hi
			: n;
}

var ord = ['LT', 'EQ', 'GT'];

function compare(x, y)
{
	return { ctor: ord[_elm_lang$core$Native_Utils.cmp(x, y) + 1] };
}

function xor(a, b)
{
	return a !== b;
}
function not(b)
{
	return !b;
}
function isInfinite(n)
{
	return n === Infinity || n === -Infinity;
}

function truncate(n)
{
	return n | 0;
}

function degrees(d)
{
	return d * Math.PI / 180;
}
function turns(t)
{
	return 2 * Math.PI * t;
}
function fromPolar(point)
{
	var r = point._0;
	var t = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(r * Math.cos(t), r * Math.sin(t));
}
function toPolar(point)
{
	var x = point._0;
	var y = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(Math.sqrt(x * x + y * y), Math.atan2(y, x));
}

return {
	div: F2(div),
	rem: F2(rem),
	mod: F2(mod),

	pi: Math.PI,
	e: Math.E,
	cos: Math.cos,
	sin: Math.sin,
	tan: Math.tan,
	acos: Math.acos,
	asin: Math.asin,
	atan: Math.atan,
	atan2: F2(Math.atan2),

	degrees: degrees,
	turns: turns,
	fromPolar: fromPolar,
	toPolar: toPolar,

	sqrt: Math.sqrt,
	logBase: F2(logBase),
	negate: negate,
	abs: abs,
	min: F2(min),
	max: F2(max),
	clamp: F3(clamp),
	compare: F2(compare),

	xor: F2(xor),
	not: not,

	truncate: truncate,
	ceiling: Math.ceil,
	floor: Math.floor,
	round: Math.round,
	toFloat: function(x) { return x; },
	isNaN: isNaN,
	isInfinite: isInfinite
};

}();
//import //

var _elm_lang$core$Native_Utils = function() {

// COMPARISONS

function eq(x, y)
{
	var stack = [];
	var isEqual = eqHelp(x, y, 0, stack);
	var pair;
	while (isEqual && (pair = stack.pop()))
	{
		isEqual = eqHelp(pair.x, pair.y, 0, stack);
	}
	return isEqual;
}


function eqHelp(x, y, depth, stack)
{
	if (depth > 100)
	{
		stack.push({ x: x, y: y });
		return true;
	}

	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object')
	{
		if (typeof x === 'function')
		{
			throw new Error(
				'Trying to use `(==)` on functions. There is no way to know if functions are "the same" in the Elm sense.'
				+ ' Read more about this at http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#=='
				+ ' which describes why it is this way and what the better version will look like.'
			);
		}
		return false;
	}

	if (x === null || y === null)
	{
		return false
	}

	if (x instanceof Date)
	{
		return x.getTime() === y.getTime();
	}

	if (!('ctor' in x))
	{
		for (var key in x)
		{
			if (!eqHelp(x[key], y[key], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	// convert Dicts and Sets to lists
	if (x.ctor === 'RBNode_elm_builtin' || x.ctor === 'RBEmpty_elm_builtin')
	{
		x = _elm_lang$core$Dict$toList(x);
		y = _elm_lang$core$Dict$toList(y);
	}
	if (x.ctor === 'Set_elm_builtin')
	{
		x = _elm_lang$core$Set$toList(x);
		y = _elm_lang$core$Set$toList(y);
	}

	// check if lists are equal without recursion
	if (x.ctor === '::')
	{
		var a = x;
		var b = y;
		while (a.ctor === '::' && b.ctor === '::')
		{
			if (!eqHelp(a._0, b._0, depth + 1, stack))
			{
				return false;
			}
			a = a._1;
			b = b._1;
		}
		return a.ctor === b.ctor;
	}

	// check if Arrays are equal
	if (x.ctor === '_Array')
	{
		var xs = _elm_lang$core$Native_Array.toJSArray(x);
		var ys = _elm_lang$core$Native_Array.toJSArray(y);
		if (xs.length !== ys.length)
		{
			return false;
		}
		for (var i = 0; i < xs.length; i++)
		{
			if (!eqHelp(xs[i], ys[i], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	if (!eqHelp(x.ctor, y.ctor, depth + 1, stack))
	{
		return false;
	}

	for (var key in x)
	{
		if (!eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

var LT = -1, EQ = 0, GT = 1;

function cmp(x, y)
{
	if (typeof x !== 'object')
	{
		return x === y ? EQ : x < y ? LT : GT;
	}

	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? EQ : a < b ? LT : GT;
	}

	if (x.ctor === '::' || x.ctor === '[]')
	{
		while (x.ctor === '::' && y.ctor === '::')
		{
			var ord = cmp(x._0, y._0);
			if (ord !== EQ)
			{
				return ord;
			}
			x = x._1;
			y = y._1;
		}
		return x.ctor === y.ctor ? EQ : x.ctor === '[]' ? LT : GT;
	}

	if (x.ctor.slice(0, 6) === '_Tuple')
	{
		var ord;
		var n = x.ctor.slice(6) - 0;
		var err = 'cannot compare tuples with more than 6 elements.';
		if (n === 0) return EQ;
		if (n >= 1) { ord = cmp(x._0, y._0); if (ord !== EQ) return ord;
		if (n >= 2) { ord = cmp(x._1, y._1); if (ord !== EQ) return ord;
		if (n >= 3) { ord = cmp(x._2, y._2); if (ord !== EQ) return ord;
		if (n >= 4) { ord = cmp(x._3, y._3); if (ord !== EQ) return ord;
		if (n >= 5) { ord = cmp(x._4, y._4); if (ord !== EQ) return ord;
		if (n >= 6) { ord = cmp(x._5, y._5); if (ord !== EQ) return ord;
		if (n >= 7) throw new Error('Comparison error: ' + err); } } } } } }
		return EQ;
	}

	throw new Error(
		'Comparison error: comparison is only defined on ints, '
		+ 'floats, times, chars, strings, lists of comparable values, '
		+ 'and tuples of comparable values.'
	);
}


// COMMON VALUES

var Tuple0 = {
	ctor: '_Tuple0'
};

function Tuple2(x, y)
{
	return {
		ctor: '_Tuple2',
		_0: x,
		_1: y
	};
}

function chr(c)
{
	return new String(c);
}


// GUID

var count = 0;
function guid(_)
{
	return count++;
}


// RECORDS

function update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


//// LIST STUFF ////

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return {
		ctor: '::',
		_0: hd,
		_1: tl
	};
}

function append(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (xs.ctor === '[]')
	{
		return ys;
	}
	var root = Cons(xs._0, Nil);
	var curr = root;
	xs = xs._1;
	while (xs.ctor !== '[]')
	{
		curr._1 = Cons(xs._0, Nil);
		xs = xs._1;
		curr = curr._1;
	}
	curr._1 = ys;
	return root;
}


// CRASHES

function crash(moduleName, region)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '` ' + regionToString(region) + '\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function crashCase(moduleName, region, value)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '`\n\n'
			+ 'This was caused by the `case` expression ' + regionToString(region) + '.\n'
			+ 'One of the branches ended with a crash and the following value got through:\n\n    ' + toString(value) + '\n\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function regionToString(region)
{
	if (region.start.line == region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'between lines ' + region.start.line + ' and ' + region.end.line;
}


// TO STRING

function toString(v)
{
	var type = typeof v;
	if (type === 'function')
	{
		return '<function>';
	}

	if (type === 'boolean')
	{
		return v ? 'True' : 'False';
	}

	if (type === 'number')
	{
		return v + '';
	}

	if (v instanceof String)
	{
		return '\'' + addSlashes(v, true) + '\'';
	}

	if (type === 'string')
	{
		return '"' + addSlashes(v, false) + '"';
	}

	if (v === null)
	{
		return 'null';
	}

	if (type === 'object' && 'ctor' in v)
	{
		var ctorStarter = v.ctor.substring(0, 5);

		if (ctorStarter === '_Tupl')
		{
			var output = [];
			for (var k in v)
			{
				if (k === 'ctor') continue;
				output.push(toString(v[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (ctorStarter === '_Task')
		{
			return '<task>'
		}

		if (v.ctor === '_Array')
		{
			var list = _elm_lang$core$Array$toList(v);
			return 'Array.fromList ' + toString(list);
		}

		if (v.ctor === '<decoder>')
		{
			return '<decoder>';
		}

		if (v.ctor === '_Process')
		{
			return '<process:' + v.id + '>';
		}

		if (v.ctor === '::')
		{
			var output = '[' + toString(v._0);
			v = v._1;
			while (v.ctor === '::')
			{
				output += ',' + toString(v._0);
				v = v._1;
			}
			return output + ']';
		}

		if (v.ctor === '[]')
		{
			return '[]';
		}

		if (v.ctor === 'Set_elm_builtin')
		{
			return 'Set.fromList ' + toString(_elm_lang$core$Set$toList(v));
		}

		if (v.ctor === 'RBNode_elm_builtin' || v.ctor === 'RBEmpty_elm_builtin')
		{
			return 'Dict.fromList ' + toString(_elm_lang$core$Dict$toList(v));
		}

		var output = '';
		for (var i in v)
		{
			if (i === 'ctor') continue;
			var str = toString(v[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return v.ctor + output;
	}

	if (type === 'object')
	{
		if (v instanceof Date)
		{
			return '<' + v.toString() + '>';
		}

		if (v.elm_web_socket)
		{
			return '<websocket>';
		}

		var output = [];
		for (var k in v)
		{
			output.push(k + ' = ' + toString(v[k]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return '<internal structure>';
}

function addSlashes(str, isChar)
{
	var s = str.replace(/\\/g, '\\\\')
			  .replace(/\n/g, '\\n')
			  .replace(/\t/g, '\\t')
			  .replace(/\r/g, '\\r')
			  .replace(/\v/g, '\\v')
			  .replace(/\0/g, '\\0');
	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}


return {
	eq: eq,
	cmp: cmp,
	Tuple0: Tuple0,
	Tuple2: Tuple2,
	chr: chr,
	update: update,
	guid: guid,

	append: F2(append),

	crash: crash,
	crashCase: crashCase,

	toString: toString
};

}();
var _elm_lang$core$Basics$never = function (_p0) {
	never:
	while (true) {
		var _p1 = _p0;
		var _v1 = _p1._0;
		_p0 = _v1;
		continue never;
	}
};
var _elm_lang$core$Basics$uncurry = F2(
	function (f, _p2) {
		var _p3 = _p2;
		return A2(f, _p3._0, _p3._1);
	});
var _elm_lang$core$Basics$curry = F3(
	function (f, a, b) {
		return f(
			{ctor: '_Tuple2', _0: a, _1: b});
	});
var _elm_lang$core$Basics$flip = F3(
	function (f, b, a) {
		return A2(f, a, b);
	});
var _elm_lang$core$Basics$always = F2(
	function (a, _p4) {
		return a;
	});
var _elm_lang$core$Basics$identity = function (x) {
	return x;
};
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<|'] = F2(
	function (f, x) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['|>'] = F2(
	function (x, f) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>>'] = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<<'] = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['++'] = _elm_lang$core$Native_Utils.append;
var _elm_lang$core$Basics$toString = _elm_lang$core$Native_Utils.toString;
var _elm_lang$core$Basics$isInfinite = _elm_lang$core$Native_Basics.isInfinite;
var _elm_lang$core$Basics$isNaN = _elm_lang$core$Native_Basics.isNaN;
var _elm_lang$core$Basics$toFloat = _elm_lang$core$Native_Basics.toFloat;
var _elm_lang$core$Basics$ceiling = _elm_lang$core$Native_Basics.ceiling;
var _elm_lang$core$Basics$floor = _elm_lang$core$Native_Basics.floor;
var _elm_lang$core$Basics$truncate = _elm_lang$core$Native_Basics.truncate;
var _elm_lang$core$Basics$round = _elm_lang$core$Native_Basics.round;
var _elm_lang$core$Basics$not = _elm_lang$core$Native_Basics.not;
var _elm_lang$core$Basics$xor = _elm_lang$core$Native_Basics.xor;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['||'] = _elm_lang$core$Native_Basics.or;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['&&'] = _elm_lang$core$Native_Basics.and;
var _elm_lang$core$Basics$max = _elm_lang$core$Native_Basics.max;
var _elm_lang$core$Basics$min = _elm_lang$core$Native_Basics.min;
var _elm_lang$core$Basics$compare = _elm_lang$core$Native_Basics.compare;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>='] = _elm_lang$core$Native_Basics.ge;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<='] = _elm_lang$core$Native_Basics.le;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>'] = _elm_lang$core$Native_Basics.gt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<'] = _elm_lang$core$Native_Basics.lt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/='] = _elm_lang$core$Native_Basics.neq;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['=='] = _elm_lang$core$Native_Basics.eq;
var _elm_lang$core$Basics$e = _elm_lang$core$Native_Basics.e;
var _elm_lang$core$Basics$pi = _elm_lang$core$Native_Basics.pi;
var _elm_lang$core$Basics$clamp = _elm_lang$core$Native_Basics.clamp;
var _elm_lang$core$Basics$logBase = _elm_lang$core$Native_Basics.logBase;
var _elm_lang$core$Basics$abs = _elm_lang$core$Native_Basics.abs;
var _elm_lang$core$Basics$negate = _elm_lang$core$Native_Basics.negate;
var _elm_lang$core$Basics$sqrt = _elm_lang$core$Native_Basics.sqrt;
var _elm_lang$core$Basics$atan2 = _elm_lang$core$Native_Basics.atan2;
var _elm_lang$core$Basics$atan = _elm_lang$core$Native_Basics.atan;
var _elm_lang$core$Basics$asin = _elm_lang$core$Native_Basics.asin;
var _elm_lang$core$Basics$acos = _elm_lang$core$Native_Basics.acos;
var _elm_lang$core$Basics$tan = _elm_lang$core$Native_Basics.tan;
var _elm_lang$core$Basics$sin = _elm_lang$core$Native_Basics.sin;
var _elm_lang$core$Basics$cos = _elm_lang$core$Native_Basics.cos;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['^'] = _elm_lang$core$Native_Basics.exp;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['%'] = _elm_lang$core$Native_Basics.mod;
var _elm_lang$core$Basics$rem = _elm_lang$core$Native_Basics.rem;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['//'] = _elm_lang$core$Native_Basics.div;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/'] = _elm_lang$core$Native_Basics.floatDiv;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['*'] = _elm_lang$core$Native_Basics.mul;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['-'] = _elm_lang$core$Native_Basics.sub;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['+'] = _elm_lang$core$Native_Basics.add;
var _elm_lang$core$Basics$toPolar = _elm_lang$core$Native_Basics.toPolar;
var _elm_lang$core$Basics$fromPolar = _elm_lang$core$Native_Basics.fromPolar;
var _elm_lang$core$Basics$turns = _elm_lang$core$Native_Basics.turns;
var _elm_lang$core$Basics$degrees = _elm_lang$core$Native_Basics.degrees;
var _elm_lang$core$Basics$radians = function (t) {
	return t;
};
var _elm_lang$core$Basics$GT = {ctor: 'GT'};
var _elm_lang$core$Basics$EQ = {ctor: 'EQ'};
var _elm_lang$core$Basics$LT = {ctor: 'LT'};
var _elm_lang$core$Basics$JustOneMore = function (a) {
	return {ctor: 'JustOneMore', _0: a};
};

//import Native.Utils //

var _elm_lang$core$Native_Debug = function() {

function log(tag, value)
{
	var msg = tag + ': ' + _elm_lang$core$Native_Utils.toString(value);
	var process = process || {};
	if (process.stdout)
	{
		process.stdout.write(msg);
	}
	else
	{
		console.log(msg);
	}
	return value;
}

function crash(message)
{
	throw new Error(message);
}

return {
	crash: crash,
	log: F2(log)
};

}();
var _elm_lang$core$Debug$crash = _elm_lang$core$Native_Debug.crash;
var _elm_lang$core$Debug$log = _elm_lang$core$Native_Debug.log;

var _elm_lang$core$Maybe$withDefault = F2(
	function ($default, maybe) {
		var _p0 = maybe;
		if (_p0.ctor === 'Just') {
			return _p0._0;
		} else {
			return $default;
		}
	});
var _elm_lang$core$Maybe$Nothing = {ctor: 'Nothing'};
var _elm_lang$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		var _p1 = maybeValue;
		if (_p1.ctor === 'Just') {
			return callback(_p1._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$Just = function (a) {
	return {ctor: 'Just', _0: a};
};
var _elm_lang$core$Maybe$map = F2(
	function (f, maybe) {
		var _p2 = maybe;
		if (_p2.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				f(_p2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		var _p3 = {ctor: '_Tuple2', _0: ma, _1: mb};
		if (((_p3.ctor === '_Tuple2') && (_p3._0.ctor === 'Just')) && (_p3._1.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A2(func, _p3._0._0, _p3._1._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map3 = F4(
	function (func, ma, mb, mc) {
		var _p4 = {ctor: '_Tuple3', _0: ma, _1: mb, _2: mc};
		if ((((_p4.ctor === '_Tuple3') && (_p4._0.ctor === 'Just')) && (_p4._1.ctor === 'Just')) && (_p4._2.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A3(func, _p4._0._0, _p4._1._0, _p4._2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map4 = F5(
	function (func, ma, mb, mc, md) {
		var _p5 = {ctor: '_Tuple4', _0: ma, _1: mb, _2: mc, _3: md};
		if (((((_p5.ctor === '_Tuple4') && (_p5._0.ctor === 'Just')) && (_p5._1.ctor === 'Just')) && (_p5._2.ctor === 'Just')) && (_p5._3.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A4(func, _p5._0._0, _p5._1._0, _p5._2._0, _p5._3._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map5 = F6(
	function (func, ma, mb, mc, md, me) {
		var _p6 = {ctor: '_Tuple5', _0: ma, _1: mb, _2: mc, _3: md, _4: me};
		if ((((((_p6.ctor === '_Tuple5') && (_p6._0.ctor === 'Just')) && (_p6._1.ctor === 'Just')) && (_p6._2.ctor === 'Just')) && (_p6._3.ctor === 'Just')) && (_p6._4.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A5(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0, _p6._4._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});

//import Native.Utils //

var _elm_lang$core$Native_List = function() {

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return { ctor: '::', _0: hd, _1: tl };
}

function fromArray(arr)
{
	var out = Nil;
	for (var i = arr.length; i--; )
	{
		out = Cons(arr[i], out);
	}
	return out;
}

function toArray(xs)
{
	var out = [];
	while (xs.ctor !== '[]')
	{
		out.push(xs._0);
		xs = xs._1;
	}
	return out;
}

function foldr(f, b, xs)
{
	var arr = toArray(xs);
	var acc = b;
	for (var i = arr.length; i--; )
	{
		acc = A2(f, arr[i], acc);
	}
	return acc;
}

function map2(f, xs, ys)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]')
	{
		arr.push(A2(f, xs._0, ys._0));
		xs = xs._1;
		ys = ys._1;
	}
	return fromArray(arr);
}

function map3(f, xs, ys, zs)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]' && zs.ctor !== '[]')
	{
		arr.push(A3(f, xs._0, ys._0, zs._0));
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map4(f, ws, xs, ys, zs)
{
	var arr = [];
	while (   ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A4(f, ws._0, xs._0, ys._0, zs._0));
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map5(f, vs, ws, xs, ys, zs)
{
	var arr = [];
	while (   vs.ctor !== '[]'
		   && ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A5(f, vs._0, ws._0, xs._0, ys._0, zs._0));
		vs = vs._1;
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function sortBy(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		return _elm_lang$core$Native_Utils.cmp(f(a), f(b));
	}));
}

function sortWith(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		var ord = f(a)(b).ctor;
		return ord === 'EQ' ? 0 : ord === 'LT' ? -1 : 1;
	}));
}

return {
	Nil: Nil,
	Cons: Cons,
	cons: F2(Cons),
	toArray: toArray,
	fromArray: fromArray,

	foldr: F3(foldr),

	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	sortBy: F2(sortBy),
	sortWith: F2(sortWith)
};

}();
var _elm_lang$core$List$sortWith = _elm_lang$core$Native_List.sortWith;
var _elm_lang$core$List$sortBy = _elm_lang$core$Native_List.sortBy;
var _elm_lang$core$List$sort = function (xs) {
	return A2(_elm_lang$core$List$sortBy, _elm_lang$core$Basics$identity, xs);
};
var _elm_lang$core$List$singleton = function (value) {
	return {
		ctor: '::',
		_0: value,
		_1: {ctor: '[]'}
	};
};
var _elm_lang$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return list;
			} else {
				var _p0 = list;
				if (_p0.ctor === '[]') {
					return list;
				} else {
					var _v1 = n - 1,
						_v2 = _p0._1;
					n = _v1;
					list = _v2;
					continue drop;
				}
			}
		}
	});
var _elm_lang$core$List$map5 = _elm_lang$core$Native_List.map5;
var _elm_lang$core$List$map4 = _elm_lang$core$Native_List.map4;
var _elm_lang$core$List$map3 = _elm_lang$core$Native_List.map3;
var _elm_lang$core$List$map2 = _elm_lang$core$Native_List.map2;
var _elm_lang$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			var _p1 = list;
			if (_p1.ctor === '[]') {
				return false;
			} else {
				if (isOkay(_p1._0)) {
					return true;
				} else {
					var _v4 = isOkay,
						_v5 = _p1._1;
					isOkay = _v4;
					list = _v5;
					continue any;
				}
			}
		}
	});
var _elm_lang$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			_elm_lang$core$List$any,
			function (_p2) {
				return !isOkay(_p2);
			},
			list);
	});
var _elm_lang$core$List$foldr = _elm_lang$core$Native_List.foldr;
var _elm_lang$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			var _p3 = list;
			if (_p3.ctor === '[]') {
				return acc;
			} else {
				var _v7 = func,
					_v8 = A2(func, _p3._0, acc),
					_v9 = _p3._1;
				func = _v7;
				acc = _v8;
				list = _v9;
				continue foldl;
			}
		}
	});
var _elm_lang$core$List$length = function (xs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p4, i) {
				return i + 1;
			}),
		0,
		xs);
};
var _elm_lang$core$List$sum = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x + y;
			}),
		0,
		numbers);
};
var _elm_lang$core$List$product = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x * y;
			}),
		1,
		numbers);
};
var _elm_lang$core$List$maximum = function (list) {
	var _p5 = list;
	if (_p5.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$max, _p5._0, _p5._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$minimum = function (list) {
	var _p6 = list;
	if (_p6.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$min, _p6._0, _p6._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$member = F2(
	function (x, xs) {
		return A2(
			_elm_lang$core$List$any,
			function (a) {
				return _elm_lang$core$Native_Utils.eq(a, x);
			},
			xs);
	});
var _elm_lang$core$List$isEmpty = function (xs) {
	var _p7 = xs;
	if (_p7.ctor === '[]') {
		return true;
	} else {
		return false;
	}
};
var _elm_lang$core$List$tail = function (list) {
	var _p8 = list;
	if (_p8.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p8._1);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$head = function (list) {
	var _p9 = list;
	if (_p9.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p9._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List_ops = _elm_lang$core$List_ops || {};
_elm_lang$core$List_ops['::'] = _elm_lang$core$Native_List.cons;
var _elm_lang$core$List$map = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, acc) {
					return {
						ctor: '::',
						_0: f(x),
						_1: acc
					};
				}),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$filter = F2(
	function (pred, xs) {
		var conditionalCons = F2(
			function (front, back) {
				return pred(front) ? {ctor: '::', _0: front, _1: back} : back;
			});
		return A3(
			_elm_lang$core$List$foldr,
			conditionalCons,
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _p10 = f(mx);
		if (_p10.ctor === 'Just') {
			return {ctor: '::', _0: _p10._0, _1: xs};
		} else {
			return xs;
		}
	});
var _elm_lang$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			_elm_lang$core$List$maybeCons(f),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$reverse = function (list) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			}),
		{ctor: '[]'},
		list);
};
var _elm_lang$core$List$scanl = F3(
	function (f, b, xs) {
		var scan1 = F2(
			function (x, accAcc) {
				var _p11 = accAcc;
				if (_p11.ctor === '::') {
					return {
						ctor: '::',
						_0: A2(f, x, _p11._0),
						_1: accAcc
					};
				} else {
					return {ctor: '[]'};
				}
			});
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$foldl,
				scan1,
				{
					ctor: '::',
					_0: b,
					_1: {ctor: '[]'}
				},
				xs));
	});
var _elm_lang$core$List$append = F2(
	function (xs, ys) {
		var _p12 = ys;
		if (_p12.ctor === '[]') {
			return xs;
		} else {
			return A3(
				_elm_lang$core$List$foldr,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				ys,
				xs);
		}
	});
var _elm_lang$core$List$concat = function (lists) {
	return A3(
		_elm_lang$core$List$foldr,
		_elm_lang$core$List$append,
		{ctor: '[]'},
		lists);
};
var _elm_lang$core$List$concatMap = F2(
	function (f, list) {
		return _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$map, f, list));
	});
var _elm_lang$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _p13) {
				var _p14 = _p13;
				var _p16 = _p14._0;
				var _p15 = _p14._1;
				return pred(x) ? {
					ctor: '_Tuple2',
					_0: {ctor: '::', _0: x, _1: _p16},
					_1: _p15
				} : {
					ctor: '_Tuple2',
					_0: _p16,
					_1: {ctor: '::', _0: x, _1: _p15}
				};
			});
		return A3(
			_elm_lang$core$List$foldr,
			step,
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'}
			},
			list);
	});
var _elm_lang$core$List$unzip = function (pairs) {
	var step = F2(
		function (_p18, _p17) {
			var _p19 = _p18;
			var _p20 = _p17;
			return {
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: _p19._0, _1: _p20._0},
				_1: {ctor: '::', _0: _p19._1, _1: _p20._1}
			};
		});
	return A3(
		_elm_lang$core$List$foldr,
		step,
		{
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		},
		pairs);
};
var _elm_lang$core$List$intersperse = F2(
	function (sep, xs) {
		var _p21 = xs;
		if (_p21.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var step = F2(
				function (x, rest) {
					return {
						ctor: '::',
						_0: sep,
						_1: {ctor: '::', _0: x, _1: rest}
					};
				});
			var spersed = A3(
				_elm_lang$core$List$foldr,
				step,
				{ctor: '[]'},
				_p21._1);
			return {ctor: '::', _0: _p21._0, _1: spersed};
		}
	});
var _elm_lang$core$List$takeReverse = F3(
	function (n, list, taken) {
		takeReverse:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return taken;
			} else {
				var _p22 = list;
				if (_p22.ctor === '[]') {
					return taken;
				} else {
					var _v23 = n - 1,
						_v24 = _p22._1,
						_v25 = {ctor: '::', _0: _p22._0, _1: taken};
					n = _v23;
					list = _v24;
					taken = _v25;
					continue takeReverse;
				}
			}
		}
	});
var _elm_lang$core$List$takeTailRec = F2(
	function (n, list) {
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$takeReverse,
				n,
				list,
				{ctor: '[]'}));
	});
var _elm_lang$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
			return {ctor: '[]'};
		} else {
			var _p23 = {ctor: '_Tuple2', _0: n, _1: list};
			_v26_5:
			do {
				_v26_1:
				do {
					if (_p23.ctor === '_Tuple2') {
						if (_p23._1.ctor === '[]') {
							return list;
						} else {
							if (_p23._1._1.ctor === '::') {
								switch (_p23._0) {
									case 1:
										break _v26_1;
									case 2:
										return {
											ctor: '::',
											_0: _p23._1._0,
											_1: {
												ctor: '::',
												_0: _p23._1._1._0,
												_1: {ctor: '[]'}
											}
										};
									case 3:
										if (_p23._1._1._1.ctor === '::') {
											return {
												ctor: '::',
												_0: _p23._1._0,
												_1: {
													ctor: '::',
													_0: _p23._1._1._0,
													_1: {
														ctor: '::',
														_0: _p23._1._1._1._0,
														_1: {ctor: '[]'}
													}
												}
											};
										} else {
											break _v26_5;
										}
									default:
										if ((_p23._1._1._1.ctor === '::') && (_p23._1._1._1._1.ctor === '::')) {
											var _p28 = _p23._1._1._1._0;
											var _p27 = _p23._1._1._0;
											var _p26 = _p23._1._0;
											var _p25 = _p23._1._1._1._1._0;
											var _p24 = _p23._1._1._1._1._1;
											return (_elm_lang$core$Native_Utils.cmp(ctr, 1000) > 0) ? {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A2(_elm_lang$core$List$takeTailRec, n - 4, _p24)
														}
													}
												}
											} : {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A3(_elm_lang$core$List$takeFast, ctr + 1, n - 4, _p24)
														}
													}
												}
											};
										} else {
											break _v26_5;
										}
								}
							} else {
								if (_p23._0 === 1) {
									break _v26_1;
								} else {
									break _v26_5;
								}
							}
						}
					} else {
						break _v26_5;
					}
				} while(false);
				return {
					ctor: '::',
					_0: _p23._1._0,
					_1: {ctor: '[]'}
				};
			} while(false);
			return list;
		}
	});
var _elm_lang$core$List$take = F2(
	function (n, list) {
		return A3(_elm_lang$core$List$takeFast, 0, n, list);
	});
var _elm_lang$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return result;
			} else {
				var _v27 = {ctor: '::', _0: value, _1: result},
					_v28 = n - 1,
					_v29 = value;
				result = _v27;
				n = _v28;
				value = _v29;
				continue repeatHelp;
			}
		}
	});
var _elm_lang$core$List$repeat = F2(
	function (n, value) {
		return A3(
			_elm_lang$core$List$repeatHelp,
			{ctor: '[]'},
			n,
			value);
	});
var _elm_lang$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(lo, hi) < 1) {
				var _v30 = lo,
					_v31 = hi - 1,
					_v32 = {ctor: '::', _0: hi, _1: list};
				lo = _v30;
				hi = _v31;
				list = _v32;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var _elm_lang$core$List$range = F2(
	function (lo, hi) {
		return A3(
			_elm_lang$core$List$rangeHelp,
			lo,
			hi,
			{ctor: '[]'});
	});
var _elm_lang$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$map2,
			f,
			A2(
				_elm_lang$core$List$range,
				0,
				_elm_lang$core$List$length(xs) - 1),
			xs);
	});

var _elm_lang$core$Result$toMaybe = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Ok') {
		return _elm_lang$core$Maybe$Just(_p0._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$Result$withDefault = F2(
	function (def, result) {
		var _p1 = result;
		if (_p1.ctor === 'Ok') {
			return _p1._0;
		} else {
			return def;
		}
	});
var _elm_lang$core$Result$Err = function (a) {
	return {ctor: 'Err', _0: a};
};
var _elm_lang$core$Result$andThen = F2(
	function (callback, result) {
		var _p2 = result;
		if (_p2.ctor === 'Ok') {
			return callback(_p2._0);
		} else {
			return _elm_lang$core$Result$Err(_p2._0);
		}
	});
var _elm_lang$core$Result$Ok = function (a) {
	return {ctor: 'Ok', _0: a};
};
var _elm_lang$core$Result$map = F2(
	function (func, ra) {
		var _p3 = ra;
		if (_p3.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				func(_p3._0));
		} else {
			return _elm_lang$core$Result$Err(_p3._0);
		}
	});
var _elm_lang$core$Result$map2 = F3(
	function (func, ra, rb) {
		var _p4 = {ctor: '_Tuple2', _0: ra, _1: rb};
		if (_p4._0.ctor === 'Ok') {
			if (_p4._1.ctor === 'Ok') {
				return _elm_lang$core$Result$Ok(
					A2(func, _p4._0._0, _p4._1._0));
			} else {
				return _elm_lang$core$Result$Err(_p4._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p4._0._0);
		}
	});
var _elm_lang$core$Result$map3 = F4(
	function (func, ra, rb, rc) {
		var _p5 = {ctor: '_Tuple3', _0: ra, _1: rb, _2: rc};
		if (_p5._0.ctor === 'Ok') {
			if (_p5._1.ctor === 'Ok') {
				if (_p5._2.ctor === 'Ok') {
					return _elm_lang$core$Result$Ok(
						A3(func, _p5._0._0, _p5._1._0, _p5._2._0));
				} else {
					return _elm_lang$core$Result$Err(_p5._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p5._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p5._0._0);
		}
	});
var _elm_lang$core$Result$map4 = F5(
	function (func, ra, rb, rc, rd) {
		var _p6 = {ctor: '_Tuple4', _0: ra, _1: rb, _2: rc, _3: rd};
		if (_p6._0.ctor === 'Ok') {
			if (_p6._1.ctor === 'Ok') {
				if (_p6._2.ctor === 'Ok') {
					if (_p6._3.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(
							A4(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0));
					} else {
						return _elm_lang$core$Result$Err(_p6._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p6._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p6._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p6._0._0);
		}
	});
var _elm_lang$core$Result$map5 = F6(
	function (func, ra, rb, rc, rd, re) {
		var _p7 = {ctor: '_Tuple5', _0: ra, _1: rb, _2: rc, _3: rd, _4: re};
		if (_p7._0.ctor === 'Ok') {
			if (_p7._1.ctor === 'Ok') {
				if (_p7._2.ctor === 'Ok') {
					if (_p7._3.ctor === 'Ok') {
						if (_p7._4.ctor === 'Ok') {
							return _elm_lang$core$Result$Ok(
								A5(func, _p7._0._0, _p7._1._0, _p7._2._0, _p7._3._0, _p7._4._0));
						} else {
							return _elm_lang$core$Result$Err(_p7._4._0);
						}
					} else {
						return _elm_lang$core$Result$Err(_p7._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p7._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p7._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p7._0._0);
		}
	});
var _elm_lang$core$Result$mapError = F2(
	function (f, result) {
		var _p8 = result;
		if (_p8.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(_p8._0);
		} else {
			return _elm_lang$core$Result$Err(
				f(_p8._0));
		}
	});
var _elm_lang$core$Result$fromMaybe = F2(
	function (err, maybe) {
		var _p9 = maybe;
		if (_p9.ctor === 'Just') {
			return _elm_lang$core$Result$Ok(_p9._0);
		} else {
			return _elm_lang$core$Result$Err(err);
		}
	});

//import Maybe, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_String = function() {

function isEmpty(str)
{
	return str.length === 0;
}
function cons(chr, str)
{
	return chr + str;
}
function uncons(str)
{
	var hd = str[0];
	if (hd)
	{
		return _elm_lang$core$Maybe$Just(_elm_lang$core$Native_Utils.Tuple2(_elm_lang$core$Native_Utils.chr(hd), str.slice(1)));
	}
	return _elm_lang$core$Maybe$Nothing;
}
function append(a, b)
{
	return a + b;
}
function concat(strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join('');
}
function length(str)
{
	return str.length;
}
function map(f, str)
{
	var out = str.split('');
	for (var i = out.length; i--; )
	{
		out[i] = f(_elm_lang$core$Native_Utils.chr(out[i]));
	}
	return out.join('');
}
function filter(pred, str)
{
	return str.split('').map(_elm_lang$core$Native_Utils.chr).filter(pred).join('');
}
function reverse(str)
{
	return str.split('').reverse().join('');
}
function foldl(f, b, str)
{
	var len = str.length;
	for (var i = 0; i < len; ++i)
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function foldr(f, b, str)
{
	for (var i = str.length; i--; )
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function split(sep, str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(sep));
}
function join(sep, strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join(sep);
}
function repeat(n, str)
{
	var result = '';
	while (n > 0)
	{
		if (n & 1)
		{
			result += str;
		}
		n >>= 1, str += str;
	}
	return result;
}
function slice(start, end, str)
{
	return str.slice(start, end);
}
function left(n, str)
{
	return n < 1 ? '' : str.slice(0, n);
}
function right(n, str)
{
	return n < 1 ? '' : str.slice(-n);
}
function dropLeft(n, str)
{
	return n < 1 ? str : str.slice(n);
}
function dropRight(n, str)
{
	return n < 1 ? str : str.slice(0, -n);
}
function pad(n, chr, str)
{
	var half = (n - str.length) / 2;
	return repeat(Math.ceil(half), chr) + str + repeat(half | 0, chr);
}
function padRight(n, chr, str)
{
	return str + repeat(n - str.length, chr);
}
function padLeft(n, chr, str)
{
	return repeat(n - str.length, chr) + str;
}

function trim(str)
{
	return str.trim();
}
function trimLeft(str)
{
	return str.replace(/^\s+/, '');
}
function trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function words(str)
{
	return _elm_lang$core$Native_List.fromArray(str.trim().split(/\s+/g));
}
function lines(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(/\r\n|\r|\n/g));
}

function toUpper(str)
{
	return str.toUpperCase();
}
function toLower(str)
{
	return str.toLowerCase();
}

function any(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return true;
		}
	}
	return false;
}
function all(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (!pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return false;
		}
	}
	return true;
}

function contains(sub, str)
{
	return str.indexOf(sub) > -1;
}
function startsWith(sub, str)
{
	return str.indexOf(sub) === 0;
}
function endsWith(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
}
function indexes(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _elm_lang$core$Native_List.Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _elm_lang$core$Native_List.fromArray(is);
}


function toInt(s)
{
	var len = s.length;

	// if empty
	if (len === 0)
	{
		return intErr(s);
	}

	// if hex
	var c = s[0];
	if (c === '0' && s[1] === 'x')
	{
		for (var i = 2; i < len; ++i)
		{
			var c = s[i];
			if (('0' <= c && c <= '9') || ('A' <= c && c <= 'F') || ('a' <= c && c <= 'f'))
			{
				continue;
			}
			return intErr(s);
		}
		return _elm_lang$core$Result$Ok(parseInt(s, 16));
	}

	// is decimal
	if (c > '9' || (c < '0' && c !== '-' && c !== '+'))
	{
		return intErr(s);
	}
	for (var i = 1; i < len; ++i)
	{
		var c = s[i];
		if (c < '0' || '9' < c)
		{
			return intErr(s);
		}
	}

	return _elm_lang$core$Result$Ok(parseInt(s, 10));
}

function intErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to an Int");
}


function toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return floatErr(s);
	}
	var n = +s;
	// faster isNaN check
	return n === n ? _elm_lang$core$Result$Ok(n) : floatErr(s);
}

function floatErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to a Float");
}


function toList(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split('').map(_elm_lang$core$Native_Utils.chr));
}
function fromList(chars)
{
	return _elm_lang$core$Native_List.toArray(chars).join('');
}

return {
	isEmpty: isEmpty,
	cons: F2(cons),
	uncons: uncons,
	append: F2(append),
	concat: concat,
	length: length,
	map: F2(map),
	filter: F2(filter),
	reverse: reverse,
	foldl: F3(foldl),
	foldr: F3(foldr),

	split: F2(split),
	join: F2(join),
	repeat: F2(repeat),

	slice: F3(slice),
	left: F2(left),
	right: F2(right),
	dropLeft: F2(dropLeft),
	dropRight: F2(dropRight),

	pad: F3(pad),
	padLeft: F3(padLeft),
	padRight: F3(padRight),

	trim: trim,
	trimLeft: trimLeft,
	trimRight: trimRight,

	words: words,
	lines: lines,

	toUpper: toUpper,
	toLower: toLower,

	any: F2(any),
	all: F2(all),

	contains: F2(contains),
	startsWith: F2(startsWith),
	endsWith: F2(endsWith),
	indexes: F2(indexes),

	toInt: toInt,
	toFloat: toFloat,
	toList: toList,
	fromList: fromList
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Char = function() {

return {
	fromCode: function(c) { return _elm_lang$core$Native_Utils.chr(String.fromCharCode(c)); },
	toCode: function(c) { return c.charCodeAt(0); },
	toUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toUpperCase()); },
	toLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLowerCase()); },
	toLocaleUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleUpperCase()); },
	toLocaleLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleLowerCase()); }
};

}();
var _elm_lang$core$Char$fromCode = _elm_lang$core$Native_Char.fromCode;
var _elm_lang$core$Char$toCode = _elm_lang$core$Native_Char.toCode;
var _elm_lang$core$Char$toLocaleLower = _elm_lang$core$Native_Char.toLocaleLower;
var _elm_lang$core$Char$toLocaleUpper = _elm_lang$core$Native_Char.toLocaleUpper;
var _elm_lang$core$Char$toLower = _elm_lang$core$Native_Char.toLower;
var _elm_lang$core$Char$toUpper = _elm_lang$core$Native_Char.toUpper;
var _elm_lang$core$Char$isBetween = F3(
	function (low, high, $char) {
		var code = _elm_lang$core$Char$toCode($char);
		return (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(low)) > -1) && (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(high)) < 1);
	});
var _elm_lang$core$Char$isUpper = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('A'),
	_elm_lang$core$Native_Utils.chr('Z'));
var _elm_lang$core$Char$isLower = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('a'),
	_elm_lang$core$Native_Utils.chr('z'));
var _elm_lang$core$Char$isDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('9'));
var _elm_lang$core$Char$isOctDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('7'));
var _elm_lang$core$Char$isHexDigit = function ($char) {
	return _elm_lang$core$Char$isDigit($char) || (A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('a'),
		_elm_lang$core$Native_Utils.chr('f'),
		$char) || A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('A'),
		_elm_lang$core$Native_Utils.chr('F'),
		$char));
};

var _elm_lang$core$String$fromList = _elm_lang$core$Native_String.fromList;
var _elm_lang$core$String$toList = _elm_lang$core$Native_String.toList;
var _elm_lang$core$String$toFloat = _elm_lang$core$Native_String.toFloat;
var _elm_lang$core$String$toInt = _elm_lang$core$Native_String.toInt;
var _elm_lang$core$String$indices = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$indexes = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$endsWith = _elm_lang$core$Native_String.endsWith;
var _elm_lang$core$String$startsWith = _elm_lang$core$Native_String.startsWith;
var _elm_lang$core$String$contains = _elm_lang$core$Native_String.contains;
var _elm_lang$core$String$all = _elm_lang$core$Native_String.all;
var _elm_lang$core$String$any = _elm_lang$core$Native_String.any;
var _elm_lang$core$String$toLower = _elm_lang$core$Native_String.toLower;
var _elm_lang$core$String$toUpper = _elm_lang$core$Native_String.toUpper;
var _elm_lang$core$String$lines = _elm_lang$core$Native_String.lines;
var _elm_lang$core$String$words = _elm_lang$core$Native_String.words;
var _elm_lang$core$String$trimRight = _elm_lang$core$Native_String.trimRight;
var _elm_lang$core$String$trimLeft = _elm_lang$core$Native_String.trimLeft;
var _elm_lang$core$String$trim = _elm_lang$core$Native_String.trim;
var _elm_lang$core$String$padRight = _elm_lang$core$Native_String.padRight;
var _elm_lang$core$String$padLeft = _elm_lang$core$Native_String.padLeft;
var _elm_lang$core$String$pad = _elm_lang$core$Native_String.pad;
var _elm_lang$core$String$dropRight = _elm_lang$core$Native_String.dropRight;
var _elm_lang$core$String$dropLeft = _elm_lang$core$Native_String.dropLeft;
var _elm_lang$core$String$right = _elm_lang$core$Native_String.right;
var _elm_lang$core$String$left = _elm_lang$core$Native_String.left;
var _elm_lang$core$String$slice = _elm_lang$core$Native_String.slice;
var _elm_lang$core$String$repeat = _elm_lang$core$Native_String.repeat;
var _elm_lang$core$String$join = _elm_lang$core$Native_String.join;
var _elm_lang$core$String$split = _elm_lang$core$Native_String.split;
var _elm_lang$core$String$foldr = _elm_lang$core$Native_String.foldr;
var _elm_lang$core$String$foldl = _elm_lang$core$Native_String.foldl;
var _elm_lang$core$String$reverse = _elm_lang$core$Native_String.reverse;
var _elm_lang$core$String$filter = _elm_lang$core$Native_String.filter;
var _elm_lang$core$String$map = _elm_lang$core$Native_String.map;
var _elm_lang$core$String$length = _elm_lang$core$Native_String.length;
var _elm_lang$core$String$concat = _elm_lang$core$Native_String.concat;
var _elm_lang$core$String$append = _elm_lang$core$Native_String.append;
var _elm_lang$core$String$uncons = _elm_lang$core$Native_String.uncons;
var _elm_lang$core$String$cons = _elm_lang$core$Native_String.cons;
var _elm_lang$core$String$fromChar = function ($char) {
	return A2(_elm_lang$core$String$cons, $char, '');
};
var _elm_lang$core$String$isEmpty = _elm_lang$core$Native_String.isEmpty;

var _elm_lang$core$Tuple$mapSecond = F2(
	function (func, _p0) {
		var _p1 = _p0;
		return {
			ctor: '_Tuple2',
			_0: _p1._0,
			_1: func(_p1._1)
		};
	});
var _elm_lang$core$Tuple$mapFirst = F2(
	function (func, _p2) {
		var _p3 = _p2;
		return {
			ctor: '_Tuple2',
			_0: func(_p3._0),
			_1: _p3._1
		};
	});
var _elm_lang$core$Tuple$second = function (_p4) {
	var _p5 = _p4;
	return _p5._1;
};
var _elm_lang$core$Tuple$first = function (_p6) {
	var _p7 = _p6;
	return _p7._0;
};

//import //

var _elm_lang$core$Native_Platform = function() {


// PROGRAMS

function program(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flags !== 'undefined')
				{
					throw new Error(
						'The `' + moduleName + '` module does not need flags.\n'
						+ 'Call ' + moduleName + '.worker() with no arguments and you should be all set!'
					);
				}

				return initialize(
					impl.init,
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function programWithFlags(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flagDecoder === 'undefined')
				{
					throw new Error(
						'Are you trying to sneak a Never value into Elm? Trickster!\n'
						+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
						+ 'Use `program` instead if you do not want flags.'
					);
				}

				var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
				if (result.ctor === 'Err')
				{
					throw new Error(
						moduleName + '.worker(...) was called with an unexpected argument.\n'
						+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
						+ result._0
					);
				}

				return initialize(
					impl.init(result._0),
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function renderer(enqueue, _)
{
	return function(_) {};
}


// HTML TO PROGRAM

function htmlToProgram(vnode)
{
	var emptyBag = batch(_elm_lang$core$Native_List.Nil);
	var noChange = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		emptyBag
	);

	return _elm_lang$virtual_dom$VirtualDom$program({
		init: noChange,
		view: function(model) { return main; },
		update: F2(function(msg, model) { return noChange; }),
		subscriptions: function (model) { return emptyBag; }
	});
}


// INITIALIZE A PROGRAM

function initialize(init, update, subscriptions, renderer)
{
	// ambient state
	var managers = {};
	var updateView;

	// init and update state in main process
	var initApp = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
		var model = init._0;
		updateView = renderer(enqueue, model);
		var cmds = init._1;
		var subs = subscriptions(model);
		dispatchEffects(managers, cmds, subs);
		callback(_elm_lang$core$Native_Scheduler.succeed(model));
	});

	function onMessage(msg, model)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
			var results = A2(update, msg, model);
			model = results._0;
			updateView(model);
			var cmds = results._1;
			var subs = subscriptions(model);
			dispatchEffects(managers, cmds, subs);
			callback(_elm_lang$core$Native_Scheduler.succeed(model));
		});
	}

	var mainProcess = spawnLoop(initApp, onMessage);

	function enqueue(msg)
	{
		_elm_lang$core$Native_Scheduler.rawSend(mainProcess, msg);
	}

	var ports = setupEffects(managers, enqueue);

	return ports ? { ports: ports } : {};
}


// EFFECT MANAGERS

var effectManagers = {};

function setupEffects(managers, callback)
{
	var ports;

	// setup all necessary effect managers
	for (var key in effectManagers)
	{
		var manager = effectManagers[key];

		if (manager.isForeign)
		{
			ports = ports || {};
			ports[key] = manager.tag === 'cmd'
				? setupOutgoingPort(key)
				: setupIncomingPort(key, callback);
		}

		managers[key] = makeManager(manager, callback);
	}

	return ports;
}

function makeManager(info, callback)
{
	var router = {
		main: callback,
		self: undefined
	};

	var tag = info.tag;
	var onEffects = info.onEffects;
	var onSelfMsg = info.onSelfMsg;

	function onMessage(msg, state)
	{
		if (msg.ctor === 'self')
		{
			return A3(onSelfMsg, router, msg._0, state);
		}

		var fx = msg._0;
		switch (tag)
		{
			case 'cmd':
				return A3(onEffects, router, fx.cmds, state);

			case 'sub':
				return A3(onEffects, router, fx.subs, state);

			case 'fx':
				return A4(onEffects, router, fx.cmds, fx.subs, state);
		}
	}

	var process = spawnLoop(info.init, onMessage);
	router.self = process;
	return process;
}

function sendToApp(router, msg)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		router.main(msg);
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sendToSelf(router, msg)
{
	return A2(_elm_lang$core$Native_Scheduler.send, router.self, {
		ctor: 'self',
		_0: msg
	});
}


// HELPER for STATEFUL LOOPS

function spawnLoop(init, onMessage)
{
	var andThen = _elm_lang$core$Native_Scheduler.andThen;

	function loop(state)
	{
		var handleMsg = _elm_lang$core$Native_Scheduler.receive(function(msg) {
			return onMessage(msg, state);
		});
		return A2(andThen, loop, handleMsg);
	}

	var task = A2(andThen, loop, init);

	return _elm_lang$core$Native_Scheduler.rawSpawn(task);
}


// BAGS

function leaf(home)
{
	return function(value)
	{
		return {
			type: 'leaf',
			home: home,
			value: value
		};
	};
}

function batch(list)
{
	return {
		type: 'node',
		branches: list
	};
}

function map(tagger, bag)
{
	return {
		type: 'map',
		tagger: tagger,
		tree: bag
	}
}


// PIPE BAGS INTO EFFECT MANAGERS

function dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	gatherEffects(true, cmdBag, effectsDict, null);
	gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		var fx = home in effectsDict
			? effectsDict[home]
			: {
				cmds: _elm_lang$core$Native_List.Nil,
				subs: _elm_lang$core$Native_List.Nil
			};

		_elm_lang$core$Native_Scheduler.rawSend(managers[home], { ctor: 'fx', _0: fx });
	}
}

function gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.type)
	{
		case 'leaf':
			var home = bag.home;
			var effect = toEffect(isCmd, home, taggers, bag.value);
			effectsDict[home] = insert(isCmd, effect, effectsDict[home]);
			return;

		case 'node':
			var list = bag.branches;
			while (list.ctor !== '[]')
			{
				gatherEffects(isCmd, list._0, effectsDict, taggers);
				list = list._1;
			}
			return;

		case 'map':
			gatherEffects(isCmd, bag.tree, effectsDict, {
				tagger: bag.tagger,
				rest: taggers
			});
			return;
	}
}

function toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		var temp = taggers;
		while (temp)
		{
			x = temp.tagger(x);
			temp = temp.rest;
		}
		return x;
	}

	var map = isCmd
		? effectManagers[home].cmdMap
		: effectManagers[home].subMap;

	return A2(map, applyTaggers, value)
}

function insert(isCmd, newEffect, effects)
{
	effects = effects || {
		cmds: _elm_lang$core$Native_List.Nil,
		subs: _elm_lang$core$Native_List.Nil
	};
	if (isCmd)
	{
		effects.cmds = _elm_lang$core$Native_List.Cons(newEffect, effects.cmds);
		return effects;
	}
	effects.subs = _elm_lang$core$Native_List.Cons(newEffect, effects.subs);
	return effects;
}


// PORTS

function checkPortName(name)
{
	if (name in effectManagers)
	{
		throw new Error('There can only be one port named `' + name + '`, but your program has multiple.');
	}
}


// OUTGOING PORTS

function outgoingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'cmd',
		cmdMap: outgoingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var outgoingPortMap = F2(function cmdMap(tagger, value) {
	return value;
});

function setupOutgoingPort(name)
{
	var subs = [];
	var converter = effectManagers[name].converter;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function onEffects(router, cmdList, state)
	{
		while (cmdList.ctor !== '[]')
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = converter(cmdList._0);
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
			cmdList = cmdList._1;
		}
		return init;
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}


// INCOMING PORTS

function incomingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'sub',
		subMap: incomingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var incomingPortMap = F2(function subMap(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});

function setupIncomingPort(name, callback)
{
	var sentBeforeInit = [];
	var subs = _elm_lang$core$Native_List.Nil;
	var converter = effectManagers[name].converter;
	var currentOnEffects = preInitOnEffects;
	var currentSend = preInitSend;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function preInitOnEffects(router, subList, state)
	{
		var postInitResult = postInitOnEffects(router, subList, state);

		for(var i = 0; i < sentBeforeInit.length; i++)
		{
			postInitSend(sentBeforeInit[i]);
		}

		sentBeforeInit = null; // to release objects held in queue
		currentSend = postInitSend;
		currentOnEffects = postInitOnEffects;
		return postInitResult;
	}

	function postInitOnEffects(router, subList, state)
	{
		subs = subList;
		return init;
	}

	function onEffects(router, subList, state)
	{
		return currentOnEffects(router, subList, state);
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function preInitSend(value)
	{
		sentBeforeInit.push(value);
	}

	function postInitSend(value)
	{
		var temp = subs;
		while (temp.ctor !== '[]')
		{
			callback(temp._0(value));
			temp = temp._1;
		}
	}

	function send(incomingValue)
	{
		var result = A2(_elm_lang$core$Json_Decode$decodeValue, converter, incomingValue);
		if (result.ctor === 'Err')
		{
			throw new Error('Trying to send an unexpected type of value through port `' + name + '`:\n' + result._0);
		}

		currentSend(result._0);
	}

	return { send: send };
}

return {
	// routers
	sendToApp: F2(sendToApp),
	sendToSelf: F2(sendToSelf),

	// global setup
	effectManagers: effectManagers,
	outgoingPort: outgoingPort,
	incomingPort: incomingPort,

	htmlToProgram: htmlToProgram,
	program: program,
	programWithFlags: programWithFlags,
	initialize: initialize,

	// effect bags
	leaf: leaf,
	batch: batch,
	map: F2(map)
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Scheduler = function() {

var MAX_STEPS = 10000;


// TASKS

function succeed(value)
{
	return {
		ctor: '_Task_succeed',
		value: value
	};
}

function fail(error)
{
	return {
		ctor: '_Task_fail',
		value: error
	};
}

function nativeBinding(callback)
{
	return {
		ctor: '_Task_nativeBinding',
		callback: callback,
		cancel: null
	};
}

function andThen(callback, task)
{
	return {
		ctor: '_Task_andThen',
		callback: callback,
		task: task
	};
}

function onError(callback, task)
{
	return {
		ctor: '_Task_onError',
		callback: callback,
		task: task
	};
}

function receive(callback)
{
	return {
		ctor: '_Task_receive',
		callback: callback
	};
}


// PROCESSES

function rawSpawn(task)
{
	var process = {
		ctor: '_Process',
		id: _elm_lang$core$Native_Utils.guid(),
		root: task,
		stack: null,
		mailbox: []
	};

	enqueue(process);

	return process;
}

function spawn(task)
{
	return nativeBinding(function(callback) {
		var process = rawSpawn(task);
		callback(succeed(process));
	});
}

function rawSend(process, msg)
{
	process.mailbox.push(msg);
	enqueue(process);
}

function send(process, msg)
{
	return nativeBinding(function(callback) {
		rawSend(process, msg);
		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function kill(process)
{
	return nativeBinding(function(callback) {
		var root = process.root;
		if (root.ctor === '_Task_nativeBinding' && root.cancel)
		{
			root.cancel();
		}

		process.root = null;

		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sleep(time)
{
	return nativeBinding(function(callback) {
		var id = setTimeout(function() {
			callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}


// STEP PROCESSES

function step(numSteps, process)
{
	while (numSteps < MAX_STEPS)
	{
		var ctor = process.root.ctor;

		if (ctor === '_Task_succeed')
		{
			while (process.stack && process.stack.ctor === '_Task_onError')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_fail')
		{
			while (process.stack && process.stack.ctor === '_Task_andThen')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_andThen')
		{
			process.stack = {
				ctor: '_Task_andThen',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_onError')
		{
			process.stack = {
				ctor: '_Task_onError',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_nativeBinding')
		{
			process.root.cancel = process.root.callback(function(newRoot) {
				process.root = newRoot;
				enqueue(process);
			});

			break;
		}

		if (ctor === '_Task_receive')
		{
			var mailbox = process.mailbox;
			if (mailbox.length === 0)
			{
				break;
			}

			process.root = process.root.callback(mailbox.shift());
			++numSteps;
			continue;
		}

		throw new Error(ctor);
	}

	if (numSteps < MAX_STEPS)
	{
		return numSteps + 1;
	}
	enqueue(process);

	return numSteps;
}


// WORK QUEUE

var working = false;
var workQueue = [];

function enqueue(process)
{
	workQueue.push(process);

	if (!working)
	{
		setTimeout(work, 0);
		working = true;
	}
}

function work()
{
	var numSteps = 0;
	var process;
	while (numSteps < MAX_STEPS && (process = workQueue.shift()))
	{
		if (process.root)
		{
			numSteps = step(numSteps, process);
		}
	}
	if (!process)
	{
		working = false;
		return;
	}
	setTimeout(work, 0);
}


return {
	succeed: succeed,
	fail: fail,
	nativeBinding: nativeBinding,
	andThen: F2(andThen),
	onError: F2(onError),
	receive: receive,

	spawn: spawn,
	kill: kill,
	sleep: sleep,
	send: F2(send),

	rawSpawn: rawSpawn,
	rawSend: rawSend
};

}();
var _elm_lang$core$Platform_Cmd$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Cmd$none = _elm_lang$core$Platform_Cmd$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Cmd_ops = _elm_lang$core$Platform_Cmd_ops || {};
_elm_lang$core$Platform_Cmd_ops['!'] = F2(
	function (model, commands) {
		return {
			ctor: '_Tuple2',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$batch(commands)
		};
	});
var _elm_lang$core$Platform_Cmd$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Cmd$Cmd = {ctor: 'Cmd'};

var _elm_lang$core$Platform_Sub$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Sub$none = _elm_lang$core$Platform_Sub$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Sub$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Sub$Sub = {ctor: 'Sub'};

var _elm_lang$core$Platform$hack = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Platform$sendToSelf = _elm_lang$core$Native_Platform.sendToSelf;
var _elm_lang$core$Platform$sendToApp = _elm_lang$core$Native_Platform.sendToApp;
var _elm_lang$core$Platform$programWithFlags = _elm_lang$core$Native_Platform.programWithFlags;
var _elm_lang$core$Platform$program = _elm_lang$core$Native_Platform.program;
var _elm_lang$core$Platform$Program = {ctor: 'Program'};
var _elm_lang$core$Platform$Task = {ctor: 'Task'};
var _elm_lang$core$Platform$ProcessId = {ctor: 'ProcessId'};
var _elm_lang$core$Platform$Router = {ctor: 'Router'};

var _elm_lang$lazy$Lazy$force = function (_p0) {
	var _p1 = _p0;
	return _p1._0(
		{ctor: '_Tuple0'});
};
var _elm_lang$lazy$Lazy$Lazy = function (a) {
	return {ctor: 'Lazy', _0: a};
};
var _elm_lang$lazy$Lazy$lazy = function (thunk) {
	return _elm_lang$lazy$Lazy$Lazy(
		_elm_lang$lazy$Native_Lazy.memoize(thunk));
};
var _elm_lang$lazy$Lazy$map = F2(
	function (f, a) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p2) {
				var _p3 = _p2;
				return f(
					_elm_lang$lazy$Lazy$force(a));
			});
	});
var _elm_lang$lazy$Lazy$map2 = F3(
	function (f, a, b) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p4) {
				var _p5 = _p4;
				return A2(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b));
			});
	});
var _elm_lang$lazy$Lazy$map3 = F4(
	function (f, a, b, c) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p6) {
				var _p7 = _p6;
				return A3(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c));
			});
	});
var _elm_lang$lazy$Lazy$map4 = F5(
	function (f, a, b, c, d) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p8) {
				var _p9 = _p8;
				return A4(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c),
					_elm_lang$lazy$Lazy$force(d));
			});
	});
var _elm_lang$lazy$Lazy$map5 = F6(
	function (f, a, b, c, d, e) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p10) {
				var _p11 = _p10;
				return A5(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c),
					_elm_lang$lazy$Lazy$force(d),
					_elm_lang$lazy$Lazy$force(e));
			});
	});
var _elm_lang$lazy$Lazy$apply = F2(
	function (f, x) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p12) {
				var _p13 = _p12;
				return A2(
					_elm_lang$lazy$Lazy$force,
					f,
					_elm_lang$lazy$Lazy$force(x));
			});
	});
var _elm_lang$lazy$Lazy$andThen = F2(
	function (callback, a) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p14) {
				var _p15 = _p14;
				return _elm_lang$lazy$Lazy$force(
					callback(
						_elm_lang$lazy$Lazy$force(a)));
			});
	});

//import Maybe, Native.List //

var _elm_lang$core$Native_Regex = function() {

function escape(str)
{
	return str.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}
function caseInsensitive(re)
{
	return new RegExp(re.source, 'gi');
}
function regex(raw)
{
	return new RegExp(raw, 'g');
}

function contains(re, string)
{
	return string.match(re) !== null;
}

function find(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex === re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		out.push({
			match: result[0],
			submatches: _elm_lang$core$Native_List.fromArray(subs),
			index: result.index,
			number: number
		});
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

function replace(n, re, replacer, string)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		return replacer({
			match: match,
			submatches: _elm_lang$core$Native_List.fromArray(submatches),
			index: arguments[arguments.length - 2],
			number: count
		});
	}
	return string.replace(re, jsReplacer);
}

function split(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	if (n === Infinity)
	{
		return _elm_lang$core$Native_List.fromArray(str.split(re));
	}
	var string = str;
	var result;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		if (!(result = re.exec(string))) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

return {
	regex: regex,
	caseInsensitive: caseInsensitive,
	escape: escape,

	contains: F2(contains),
	find: F3(find),
	replace: F4(replace),
	split: F3(split)
};

}();

var _elm_lang$core$Regex$split = _elm_lang$core$Native_Regex.split;
var _elm_lang$core$Regex$replace = _elm_lang$core$Native_Regex.replace;
var _elm_lang$core$Regex$find = _elm_lang$core$Native_Regex.find;
var _elm_lang$core$Regex$contains = _elm_lang$core$Native_Regex.contains;
var _elm_lang$core$Regex$caseInsensitive = _elm_lang$core$Native_Regex.caseInsensitive;
var _elm_lang$core$Regex$regex = _elm_lang$core$Native_Regex.regex;
var _elm_lang$core$Regex$escape = _elm_lang$core$Native_Regex.escape;
var _elm_lang$core$Regex$Match = F4(
	function (a, b, c, d) {
		return {match: a, submatches: b, index: c, number: d};
	});
var _elm_lang$core$Regex$Regex = {ctor: 'Regex'};
var _elm_lang$core$Regex$AtMost = function (a) {
	return {ctor: 'AtMost', _0: a};
};
var _elm_lang$core$Regex$All = {ctor: 'All'};

var _Bogdanp$elm_combine$Combine$app = function (p) {
	var _p0 = p;
	if (_p0.ctor === 'Parser') {
		return _p0._0;
	} else {
		return _elm_lang$lazy$Lazy$force(_p0._0);
	}
};
var _Bogdanp$elm_combine$Combine$InputStream = F3(
	function (a, b, c) {
		return {data: a, input: b, position: c};
	});
var _Bogdanp$elm_combine$Combine$initStream = function (s) {
	return A3(_Bogdanp$elm_combine$Combine$InputStream, s, s, 0);
};
var _Bogdanp$elm_combine$Combine$runParser = F3(
	function (p, st, s) {
		var _p1 = A3(
			_Bogdanp$elm_combine$Combine$app,
			p,
			st,
			_Bogdanp$elm_combine$Combine$initStream(s));
		if (_p1._2.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				{ctor: '_Tuple3', _0: _p1._0, _1: _p1._1, _2: _p1._2._0});
		} else {
			return _elm_lang$core$Result$Err(
				{ctor: '_Tuple3', _0: _p1._0, _1: _p1._1, _2: _p1._2._0});
		}
	});
var _Bogdanp$elm_combine$Combine$parse = function (p) {
	return A2(
		_Bogdanp$elm_combine$Combine$runParser,
		p,
		{ctor: '_Tuple0'});
};
var _Bogdanp$elm_combine$Combine$ParseLocation = F3(
	function (a, b, c) {
		return {source: a, line: b, column: c};
	});
var _Bogdanp$elm_combine$Combine$currentLocation = function (stream) {
	var find = F3(
		function (position, currentLine, lines) {
			find:
			while (true) {
				var _p2 = lines;
				if (_p2.ctor === '[]') {
					return A3(_Bogdanp$elm_combine$Combine$ParseLocation, '', 1, position);
				} else {
					if (_p2._1.ctor === '[]') {
						return A3(_Bogdanp$elm_combine$Combine$ParseLocation, _p2._0, currentLine + 1, position);
					} else {
						var _p3 = _p2._0;
						var length = _elm_lang$core$String$length(_p3);
						if (_elm_lang$core$Native_Utils.cmp(position, length) > -1) {
							var _v3 = (position - length) - 1,
								_v4 = currentLine + 1,
								_v5 = _p2._1;
							position = _v3;
							currentLine = _v4;
							lines = _v5;
							continue find;
						} else {
							if (_elm_lang$core$Native_Utils.eq(currentLine, 0)) {
								return A3(_Bogdanp$elm_combine$Combine$ParseLocation, _p3, 1, position);
							} else {
								return A3(_Bogdanp$elm_combine$Combine$ParseLocation, _p3, currentLine, position - 1);
							}
						}
					}
				}
			}
		});
	var lines = A2(_elm_lang$core$String$split, '\n', stream.data);
	return A3(find, stream.position, 0, lines);
};
var _Bogdanp$elm_combine$Combine$currentSourceLine = function (_p4) {
	return function (_) {
		return _.source;
	}(
		_Bogdanp$elm_combine$Combine$currentLocation(_p4));
};
var _Bogdanp$elm_combine$Combine$currentLine = function (_p5) {
	return function (_) {
		return _.line;
	}(
		_Bogdanp$elm_combine$Combine$currentLocation(_p5));
};
var _Bogdanp$elm_combine$Combine$currentColumn = function (_p6) {
	return function (_) {
		return _.column;
	}(
		_Bogdanp$elm_combine$Combine$currentLocation(_p6));
};
var _Bogdanp$elm_combine$Combine$RecursiveParser = function (a) {
	return {ctor: 'RecursiveParser', _0: a};
};
var _Bogdanp$elm_combine$Combine$lazy = function (t) {
	return _Bogdanp$elm_combine$Combine$RecursiveParser(
		_elm_lang$lazy$Lazy$lazy(
			function (_p7) {
				var _p8 = _p7;
				return _Bogdanp$elm_combine$Combine$app(
					t(
						{ctor: '_Tuple0'}));
			}));
};
var _Bogdanp$elm_combine$Combine$Parser = function (a) {
	return {ctor: 'Parser', _0: a};
};
var _Bogdanp$elm_combine$Combine$primitive = _Bogdanp$elm_combine$Combine$Parser;
var _Bogdanp$elm_combine$Combine$bimap = F3(
	function (fok, ferr, p) {
		return _Bogdanp$elm_combine$Combine$Parser(
			F2(
				function (state, stream) {
					var _p9 = A3(_Bogdanp$elm_combine$Combine$app, p, state, stream);
					if (_p9._2.ctor === 'Ok') {
						return {
							ctor: '_Tuple3',
							_0: _p9._0,
							_1: _p9._1,
							_2: _elm_lang$core$Result$Ok(
								fok(_p9._2._0))
						};
					} else {
						return {
							ctor: '_Tuple3',
							_0: _p9._0,
							_1: _p9._1,
							_2: _elm_lang$core$Result$Err(
								ferr(_p9._2._0))
						};
					}
				}));
	});
var _Bogdanp$elm_combine$Combine$map = F2(
	function (f, p) {
		return A3(_Bogdanp$elm_combine$Combine$bimap, f, _elm_lang$core$Basics$identity, p);
	});
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['<$>'] = _Bogdanp$elm_combine$Combine$map;
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['<$'] = function (res) {
	return _Bogdanp$elm_combine$Combine$map(
		_elm_lang$core$Basics$always(res));
};
var _Bogdanp$elm_combine$Combine$skip = function (p) {
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<$'],
		{ctor: '_Tuple0'},
		p);
};
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['$>'] = _elm_lang$core$Basics$flip(
	F2(
		function (x, y) {
			return A2(_Bogdanp$elm_combine$Combine_ops['<$'], x, y);
		}));
var _Bogdanp$elm_combine$Combine$mapError = _Bogdanp$elm_combine$Combine$bimap(_elm_lang$core$Basics$identity);
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['<?>'] = F2(
	function (p, m) {
		return A2(
			_Bogdanp$elm_combine$Combine$mapError,
			_elm_lang$core$Basics$always(
				{
					ctor: '::',
					_0: m,
					_1: {ctor: '[]'}
				}),
			p);
	});
var _Bogdanp$elm_combine$Combine$withState = function (f) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_Bogdanp$elm_combine$Combine$app,
					f(state),
					state,
					stream);
			}));
};
var _Bogdanp$elm_combine$Combine$withLocation = function (f) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_Bogdanp$elm_combine$Combine$app,
					f(
						_Bogdanp$elm_combine$Combine$currentLocation(stream)),
					state,
					stream);
			}));
};
var _Bogdanp$elm_combine$Combine$withLine = function (f) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_Bogdanp$elm_combine$Combine$app,
					f(
						_Bogdanp$elm_combine$Combine$currentLine(stream)),
					state,
					stream);
			}));
};
var _Bogdanp$elm_combine$Combine$withColumn = function (f) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_Bogdanp$elm_combine$Combine$app,
					f(
						_Bogdanp$elm_combine$Combine$currentColumn(stream)),
					state,
					stream);
			}));
};
var _Bogdanp$elm_combine$Combine$andThen = F2(
	function (f, p) {
		return _Bogdanp$elm_combine$Combine$Parser(
			F2(
				function (state, stream) {
					var _p10 = A3(_Bogdanp$elm_combine$Combine$app, p, state, stream);
					if (_p10._2.ctor === 'Ok') {
						return A3(
							_Bogdanp$elm_combine$Combine$app,
							f(_p10._2._0),
							_p10._0,
							_p10._1);
					} else {
						return {
							ctor: '_Tuple3',
							_0: _p10._0,
							_1: _p10._1,
							_2: _elm_lang$core$Result$Err(_p10._2._0)
						};
					}
				}));
	});
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['>>='] = _elm_lang$core$Basics$flip(_Bogdanp$elm_combine$Combine$andThen);
var _Bogdanp$elm_combine$Combine$andMap = F2(
	function (rp, lp) {
		return A2(
			_Bogdanp$elm_combine$Combine_ops['>>='],
			lp,
			A2(_elm_lang$core$Basics$flip, _Bogdanp$elm_combine$Combine$map, rp));
	});
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['<*>'] = _elm_lang$core$Basics$flip(_Bogdanp$elm_combine$Combine$andMap);
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['<*'] = F2(
	function (lp, rp) {
		return A2(
			_Bogdanp$elm_combine$Combine$andMap,
			rp,
			A2(_Bogdanp$elm_combine$Combine$map, _elm_lang$core$Basics$always, lp));
	});
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['*>'] = F2(
	function (lp, rp) {
		return A2(
			_Bogdanp$elm_combine$Combine$andMap,
			rp,
			A2(
				_Bogdanp$elm_combine$Combine$map,
				_elm_lang$core$Basics$flip(_elm_lang$core$Basics$always),
				lp));
	});
var _Bogdanp$elm_combine$Combine$between = F3(
	function (lp, rp, p) {
		return A2(
			_Bogdanp$elm_combine$Combine_ops['<*'],
			A2(_Bogdanp$elm_combine$Combine_ops['*>'], lp, p),
			rp);
	});
var _Bogdanp$elm_combine$Combine$sequence = function (ps) {
	var accumulate = F4(
		function (acc, ps, state, stream) {
			accumulate:
			while (true) {
				var _p11 = ps;
				if (_p11.ctor === '[]') {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Ok(
							_elm_lang$core$List$reverse(acc))
					};
				} else {
					var _p12 = A3(_Bogdanp$elm_combine$Combine$app, _p11._0, state, stream);
					if (_p12._2.ctor === 'Ok') {
						var _v11 = {ctor: '::', _0: _p12._2._0, _1: acc},
							_v12 = _p11._1,
							_v13 = _p12._0,
							_v14 = _p12._1;
						acc = _v11;
						ps = _v12;
						state = _v13;
						stream = _v14;
						continue accumulate;
					} else {
						return {
							ctor: '_Tuple3',
							_0: _p12._0,
							_1: _p12._1,
							_2: _elm_lang$core$Result$Err(_p12._2._0)
						};
					}
				}
			}
		});
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return A4(
					accumulate,
					{ctor: '[]'},
					ps,
					state,
					stream);
			}));
};
var _Bogdanp$elm_combine$Combine$fail = function (m) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return {
					ctor: '_Tuple3',
					_0: state,
					_1: stream,
					_2: _elm_lang$core$Result$Err(
						{
							ctor: '::',
							_0: m,
							_1: {ctor: '[]'}
						})
				};
			}));
};
var _Bogdanp$elm_combine$Combine$emptyErr = _Bogdanp$elm_combine$Combine$Parser(
	F2(
		function (state, stream) {
			return {
				ctor: '_Tuple3',
				_0: state,
				_1: stream,
				_2: _elm_lang$core$Result$Err(
					{ctor: '[]'})
			};
		}));
var _Bogdanp$elm_combine$Combine$succeed = function (res) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return {
					ctor: '_Tuple3',
					_0: state,
					_1: stream,
					_2: _elm_lang$core$Result$Ok(res)
				};
			}));
};
var _Bogdanp$elm_combine$Combine$putState = function (state) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (_p13, stream) {
				return A3(
					_Bogdanp$elm_combine$Combine$app,
					_Bogdanp$elm_combine$Combine$succeed(
						{ctor: '_Tuple0'}),
					state,
					stream);
			}));
};
var _Bogdanp$elm_combine$Combine$modifyState = function (f) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_Bogdanp$elm_combine$Combine$app,
					_Bogdanp$elm_combine$Combine$succeed(
						{ctor: '_Tuple0'}),
					f(state),
					stream);
			}));
};
var _Bogdanp$elm_combine$Combine$count = F2(
	function (n, p) {
		var accumulate = F2(
			function (x, acc) {
				return (_elm_lang$core$Native_Utils.cmp(x, 0) < 1) ? _Bogdanp$elm_combine$Combine$succeed(
					_elm_lang$core$List$reverse(acc)) : A2(
					_Bogdanp$elm_combine$Combine$andThen,
					function (res) {
						return A2(
							accumulate,
							x - 1,
							{ctor: '::', _0: res, _1: acc});
					},
					p);
			});
		return A2(
			accumulate,
			n,
			{ctor: '[]'});
	});
var _Bogdanp$elm_combine$Combine$string = function (s) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				if (A2(_elm_lang$core$String$startsWith, s, stream.input)) {
					var len = _elm_lang$core$String$length(s);
					var rem = A2(_elm_lang$core$String$dropLeft, len, stream.input);
					var pos = stream.position + len;
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: _elm_lang$core$Native_Utils.update(
							stream,
							{input: rem, position: pos}),
						_2: _elm_lang$core$Result$Ok(s)
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Err(
							{
								ctor: '::',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									'expected ',
									_elm_lang$core$Basics$toString(s)),
								_1: {ctor: '[]'}
							})
					};
				}
			}));
};
var _Bogdanp$elm_combine$Combine$parens = A2(
	_Bogdanp$elm_combine$Combine$between,
	_Bogdanp$elm_combine$Combine$string('('),
	_Bogdanp$elm_combine$Combine$string(')'));
var _Bogdanp$elm_combine$Combine$braces = A2(
	_Bogdanp$elm_combine$Combine$between,
	_Bogdanp$elm_combine$Combine$string('{'),
	_Bogdanp$elm_combine$Combine$string('}'));
var _Bogdanp$elm_combine$Combine$brackets = A2(
	_Bogdanp$elm_combine$Combine$between,
	_Bogdanp$elm_combine$Combine$string('['),
	_Bogdanp$elm_combine$Combine$string(']'));
var _Bogdanp$elm_combine$Combine$regex = function (pat) {
	var pattern = A2(_elm_lang$core$String$startsWith, '^', pat) ? pat : A2(_elm_lang$core$Basics_ops['++'], '^', pat);
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				var _p14 = A3(
					_elm_lang$core$Regex$find,
					_elm_lang$core$Regex$AtMost(1),
					_elm_lang$core$Regex$regex(pattern),
					stream.input);
				if ((_p14.ctor === '::') && (_p14._1.ctor === '[]')) {
					var _p15 = _p14._0;
					var len = _elm_lang$core$String$length(_p15.match);
					var rem = A2(_elm_lang$core$String$dropLeft, len, stream.input);
					var pos = stream.position + len;
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: _elm_lang$core$Native_Utils.update(
							stream,
							{input: rem, position: pos}),
						_2: _elm_lang$core$Result$Ok(_p15.match)
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Err(
							{
								ctor: '::',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									'expected input matching Regexp /',
									A2(_elm_lang$core$Basics_ops['++'], pattern, '/')),
								_1: {ctor: '[]'}
							})
					};
				}
			}));
};
var _Bogdanp$elm_combine$Combine$whitespace = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine$regex('[ \t\r\n]*'),
	'whitespace');
var _Bogdanp$elm_combine$Combine$while = function (pred) {
	var accumulate = F3(
		function (acc, state, stream) {
			accumulate:
			while (true) {
				var _p16 = _elm_lang$core$String$uncons(stream.input);
				if (_p16.ctor === 'Just') {
					var _p17 = _p16._0._0;
					if (pred(_p17)) {
						var pos = stream.position + 1;
						var c = A2(_elm_lang$core$String$cons, _p17, '');
						var _v17 = A2(_elm_lang$core$Basics_ops['++'], acc, c),
							_v18 = state,
							_v19 = _elm_lang$core$Native_Utils.update(
							stream,
							{input: _p16._0._1, position: pos});
						acc = _v17;
						state = _v18;
						stream = _v19;
						continue accumulate;
					} else {
						return {ctor: '_Tuple3', _0: state, _1: stream, _2: acc};
					}
				} else {
					return {ctor: '_Tuple3', _0: state, _1: stream, _2: acc};
				}
			}
		});
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				var _p18 = A3(accumulate, '', state, stream);
				var rstate = _p18._0;
				var rstream = _p18._1;
				var res = _p18._2;
				return {
					ctor: '_Tuple3',
					_0: rstate,
					_1: rstream,
					_2: _elm_lang$core$Result$Ok(res)
				};
			}));
};
var _Bogdanp$elm_combine$Combine$end = _Bogdanp$elm_combine$Combine$Parser(
	F2(
		function (state, stream) {
			return _elm_lang$core$Native_Utils.eq(stream.input, '') ? {
				ctor: '_Tuple3',
				_0: state,
				_1: stream,
				_2: _elm_lang$core$Result$Ok(
					{ctor: '_Tuple0'})
			} : {
				ctor: '_Tuple3',
				_0: state,
				_1: stream,
				_2: _elm_lang$core$Result$Err(
					{
						ctor: '::',
						_0: 'expected end of input',
						_1: {ctor: '[]'}
					})
			};
		}));
var _Bogdanp$elm_combine$Combine$lookAhead = function (p) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				var _p19 = A3(_Bogdanp$elm_combine$Combine$app, p, state, stream);
				if ((_p19.ctor === '_Tuple3') && (_p19._2.ctor === 'Ok')) {
					return {
						ctor: '_Tuple3',
						_0: _p19._0,
						_1: stream,
						_2: _elm_lang$core$Result$Ok(_p19._2._0)
					};
				} else {
					return _p19;
				}
			}));
};
var _Bogdanp$elm_combine$Combine$or = F2(
	function (lp, rp) {
		return _Bogdanp$elm_combine$Combine$Parser(
			F2(
				function (state, stream) {
					var _p20 = A3(_Bogdanp$elm_combine$Combine$app, lp, state, stream);
					if (_p20._2.ctor === 'Ok') {
						return _p20;
					} else {
						var _p21 = A3(_Bogdanp$elm_combine$Combine$app, rp, state, stream);
						if (_p21._2.ctor === 'Ok') {
							return _p21;
						} else {
							return {
								ctor: '_Tuple3',
								_0: state,
								_1: stream,
								_2: _elm_lang$core$Result$Err(
									A2(_elm_lang$core$Basics_ops['++'], _p20._2._0, _p21._2._0))
							};
						}
					}
				}));
	});
var _Bogdanp$elm_combine$Combine$choice = function (xs) {
	return A3(_elm_lang$core$List$foldr, _Bogdanp$elm_combine$Combine$or, _Bogdanp$elm_combine$Combine$emptyErr, xs);
};
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['<|>'] = _Bogdanp$elm_combine$Combine$or;
var _Bogdanp$elm_combine$Combine$optional = F2(
	function (res, p) {
		return A2(
			_Bogdanp$elm_combine$Combine_ops['<|>'],
			p,
			_Bogdanp$elm_combine$Combine$succeed(res));
	});
var _Bogdanp$elm_combine$Combine$chainl = F2(
	function (op, p) {
		var accumulate = function (x) {
			return A2(
				_Bogdanp$elm_combine$Combine_ops['<|>'],
				A2(
					_Bogdanp$elm_combine$Combine$andThen,
					function (f) {
						return A2(
							_Bogdanp$elm_combine$Combine$andThen,
							function (y) {
								return accumulate(
									A2(f, x, y));
							},
							p);
					},
					op),
				_Bogdanp$elm_combine$Combine$succeed(x));
		};
		return A2(_Bogdanp$elm_combine$Combine$andThen, accumulate, p);
	});
var _Bogdanp$elm_combine$Combine$chainr = F2(
	function (op, p) {
		var accumulate = function (x) {
			return A2(
				_Bogdanp$elm_combine$Combine_ops['<|>'],
				A2(
					_Bogdanp$elm_combine$Combine$andThen,
					function (f) {
						return A2(
							_Bogdanp$elm_combine$Combine$andThen,
							function (y) {
								return _Bogdanp$elm_combine$Combine$succeed(
									A2(f, x, y));
							},
							A2(_Bogdanp$elm_combine$Combine$andThen, accumulate, p));
					},
					op),
				_Bogdanp$elm_combine$Combine$succeed(x));
		};
		return A2(_Bogdanp$elm_combine$Combine$andThen, accumulate, p);
	});
var _Bogdanp$elm_combine$Combine$maybe = function (p) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				var _p22 = A3(_Bogdanp$elm_combine$Combine$app, p, state, stream);
				if ((_p22.ctor === '_Tuple3') && (_p22._2.ctor === 'Ok')) {
					return {
						ctor: '_Tuple3',
						_0: _p22._0,
						_1: _p22._1,
						_2: _elm_lang$core$Result$Ok(
							_elm_lang$core$Maybe$Just(_p22._2._0))
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Ok(_elm_lang$core$Maybe$Nothing)
					};
				}
			}));
};
var _Bogdanp$elm_combine$Combine$many = function (p) {
	var accumulate = F3(
		function (acc, state, stream) {
			accumulate:
			while (true) {
				var _p23 = A3(_Bogdanp$elm_combine$Combine$app, p, state, stream);
				if ((_p23.ctor === '_Tuple3') && (_p23._2.ctor === 'Ok')) {
					var _p25 = _p23._1;
					var _p24 = _p23._0;
					if (_elm_lang$core$Native_Utils.eq(stream, _p25)) {
						return {
							ctor: '_Tuple3',
							_0: _p24,
							_1: _p25,
							_2: _elm_lang$core$List$reverse(acc)
						};
					} else {
						var _v25 = {ctor: '::', _0: _p23._2._0, _1: acc},
							_v26 = _p24,
							_v27 = _p25;
						acc = _v25;
						state = _v26;
						stream = _v27;
						continue accumulate;
					}
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$List$reverse(acc)
					};
				}
			}
		});
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				var _p26 = A3(
					accumulate,
					{ctor: '[]'},
					state,
					stream);
				var rstate = _p26._0;
				var rstream = _p26._1;
				var res = _p26._2;
				return {
					ctor: '_Tuple3',
					_0: rstate,
					_1: rstream,
					_2: _elm_lang$core$Result$Ok(res)
				};
			}));
};
var _Bogdanp$elm_combine$Combine$many1 = function (p) {
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<*>'],
		A2(
			_Bogdanp$elm_combine$Combine_ops['<$>'],
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			p),
		_Bogdanp$elm_combine$Combine$many(p));
};
var _Bogdanp$elm_combine$Combine$skipMany1 = function (p) {
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<$'],
		{ctor: '_Tuple0'},
		_Bogdanp$elm_combine$Combine$many1(
			_Bogdanp$elm_combine$Combine$skip(p)));
};
var _Bogdanp$elm_combine$Combine$sepBy1 = F2(
	function (sep, p) {
		return A2(
			_Bogdanp$elm_combine$Combine_ops['<*>'],
			A2(
				_Bogdanp$elm_combine$Combine_ops['<$>'],
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				p),
			_Bogdanp$elm_combine$Combine$many(
				A2(_Bogdanp$elm_combine$Combine_ops['*>'], sep, p)));
	});
var _Bogdanp$elm_combine$Combine$sepBy = F2(
	function (sep, p) {
		return A2(
			_Bogdanp$elm_combine$Combine_ops['<|>'],
			A2(_Bogdanp$elm_combine$Combine$sepBy1, sep, p),
			_Bogdanp$elm_combine$Combine$succeed(
				{ctor: '[]'}));
	});
var _Bogdanp$elm_combine$Combine$sepEndBy1 = F2(
	function (sep, p) {
		return A2(
			_Bogdanp$elm_combine$Combine_ops['<*'],
			A2(_Bogdanp$elm_combine$Combine$sepBy1, sep, p),
			_Bogdanp$elm_combine$Combine$maybe(sep));
	});
var _Bogdanp$elm_combine$Combine$sepEndBy = F2(
	function (sep, p) {
		return A2(
			_Bogdanp$elm_combine$Combine_ops['<|>'],
			A2(_Bogdanp$elm_combine$Combine$sepEndBy1, sep, p),
			_Bogdanp$elm_combine$Combine$succeed(
				{ctor: '[]'}));
	});
var _Bogdanp$elm_combine$Combine$skipMany = function (p) {
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<$'],
		{ctor: '_Tuple0'},
		_Bogdanp$elm_combine$Combine$many(
			_Bogdanp$elm_combine$Combine$skip(p)));
};
var _Bogdanp$elm_combine$Combine$manyTill = F2(
	function (p, end) {
		var accumulate = F3(
			function (acc, state, stream) {
				accumulate:
				while (true) {
					var _p27 = A3(_Bogdanp$elm_combine$Combine$app, end, state, stream);
					if (_p27._2.ctor === 'Ok') {
						return {
							ctor: '_Tuple3',
							_0: _p27._0,
							_1: _p27._1,
							_2: _elm_lang$core$Result$Ok(
								_elm_lang$core$List$reverse(acc))
						};
					} else {
						var _p28 = A3(_Bogdanp$elm_combine$Combine$app, p, state, stream);
						if ((_p28.ctor === '_Tuple3') && (_p28._2.ctor === 'Ok')) {
							var _v30 = {ctor: '::', _0: _p28._2._0, _1: acc},
								_v31 = _p28._0,
								_v32 = _p28._1;
							acc = _v30;
							state = _v31;
							stream = _v32;
							continue accumulate;
						} else {
							return {
								ctor: '_Tuple3',
								_0: _p27._0,
								_1: _p27._1,
								_2: _elm_lang$core$Result$Err(_p27._2._0)
							};
						}
					}
				}
			});
		return _Bogdanp$elm_combine$Combine$Parser(
			accumulate(
				{ctor: '[]'}));
	});

var _Bogdanp$elm_combine$Combine_Char$crlf = A2(
	_Bogdanp$elm_combine$Combine_ops['<$'],
	_elm_lang$core$Native_Utils.chr('\n'),
	A2(
		_Bogdanp$elm_combine$Combine_ops['<?>'],
		_Bogdanp$elm_combine$Combine$regex('\r\n'),
		'expected crlf'));
var _Bogdanp$elm_combine$Combine_Char$satisfy = function (pred) {
	return _Bogdanp$elm_combine$Combine$primitive(
		F2(
			function (state, stream) {
				var message = 'could not satisfy predicate';
				var _p0 = _elm_lang$core$String$uncons(stream.input);
				if (_p0.ctor === 'Just') {
					var _p1 = _p0._0._0;
					return pred(_p1) ? {
						ctor: '_Tuple3',
						_0: state,
						_1: _elm_lang$core$Native_Utils.update(
							stream,
							{input: _p0._0._1, position: stream.position + 1}),
						_2: _elm_lang$core$Result$Ok(_p1)
					} : {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Err(
							{
								ctor: '::',
								_0: message,
								_1: {ctor: '[]'}
							})
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Err(
							{
								ctor: '::',
								_0: message,
								_1: {ctor: '[]'}
							})
					};
				}
			}));
};
var _Bogdanp$elm_combine$Combine_Char$char = function (c) {
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<?>'],
		_Bogdanp$elm_combine$Combine_Char$satisfy(
			F2(
				function (x, y) {
					return _elm_lang$core$Native_Utils.eq(x, y);
				})(c)),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'expected ',
			_elm_lang$core$Basics$toString(c)));
};
var _Bogdanp$elm_combine$Combine_Char$anyChar = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(
		_elm_lang$core$Basics$always(true)),
	'expected any character');
var _Bogdanp$elm_combine$Combine_Char$oneOf = function (cs) {
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<?>'],
		_Bogdanp$elm_combine$Combine_Char$satisfy(
			A2(_elm_lang$core$Basics$flip, _elm_lang$core$List$member, cs)),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'expected one of ',
			_elm_lang$core$Basics$toString(cs)));
};
var _Bogdanp$elm_combine$Combine_Char$noneOf = function (cs) {
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<?>'],
		_Bogdanp$elm_combine$Combine_Char$satisfy(
			function (_p2) {
				return !A3(_elm_lang$core$Basics$flip, _elm_lang$core$List$member, cs, _p2);
			}),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'expected none of ',
			_elm_lang$core$Basics$toString(cs)));
};
var _Bogdanp$elm_combine$Combine_Char$space = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(
			_elm_lang$core$Native_Utils.chr(' '))),
	'expected space');
var _Bogdanp$elm_combine$Combine_Char$tab = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(
			_elm_lang$core$Native_Utils.chr('\t'))),
	'expected tab');
var _Bogdanp$elm_combine$Combine_Char$newline = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(
			_elm_lang$core$Native_Utils.chr('\n'))),
	'expected newline');
var _Bogdanp$elm_combine$Combine_Char$eol = A2(_Bogdanp$elm_combine$Combine_ops['<|>'], _Bogdanp$elm_combine$Combine_Char$newline, _Bogdanp$elm_combine$Combine_Char$crlf);
var _Bogdanp$elm_combine$Combine_Char$lower = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(_elm_lang$core$Char$isLower),
	'expected a lowercase character');
var _Bogdanp$elm_combine$Combine_Char$upper = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(_elm_lang$core$Char$isUpper),
	'expected an uppercase character');
var _Bogdanp$elm_combine$Combine_Char$digit = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(_elm_lang$core$Char$isDigit),
	'expected a digit');
var _Bogdanp$elm_combine$Combine_Char$octDigit = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(_elm_lang$core$Char$isOctDigit),
	'expected an octal digit');
var _Bogdanp$elm_combine$Combine_Char$hexDigit = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(_elm_lang$core$Char$isHexDigit),
	'expected a hexadecimal digit');

var _Bogdanp$elm_combine$Combine_Num$digit = function () {
	var toDigit = function (c) {
		return _elm_lang$core$Char$toCode(c) - _elm_lang$core$Char$toCode(
			_elm_lang$core$Native_Utils.chr('0'));
	};
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<$>'],
		toDigit,
		A2(_Bogdanp$elm_combine$Combine_ops['<?>'], _Bogdanp$elm_combine$Combine_Char$digit, 'expected a digit'));
}();
var _Bogdanp$elm_combine$Combine_Num$sign = A2(
	_Bogdanp$elm_combine$Combine$optional,
	1,
	_Bogdanp$elm_combine$Combine$choice(
		{
			ctor: '::',
			_0: A2(
				_Bogdanp$elm_combine$Combine_ops['<$'],
				1,
				_Bogdanp$elm_combine$Combine$string('+')),
			_1: {
				ctor: '::',
				_0: A2(
					_Bogdanp$elm_combine$Combine_ops['<$'],
					-1,
					_Bogdanp$elm_combine$Combine$string('-')),
				_1: {ctor: '[]'}
			}
		}));
var _Bogdanp$elm_combine$Combine_Num$unwrap = F2(
	function (f, s) {
		var _p0 = f(s);
		if (_p0.ctor === 'Ok') {
			return _p0._0;
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'Combine.Num',
				{
					start: {line: 23, column: 3},
					end: {line: 28, column: 79}
				},
				_p0)(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'impossible state in Combine.Num.unwrap: ',
					_elm_lang$core$Basics$toString(_p0._0)));
		}
	});
var _Bogdanp$elm_combine$Combine_Num$toInt = _Bogdanp$elm_combine$Combine_Num$unwrap(_elm_lang$core$String$toInt);
var _Bogdanp$elm_combine$Combine_Num$int = A2(
	_Bogdanp$elm_combine$Combine_ops['<*>'],
	A2(
		_Bogdanp$elm_combine$Combine_ops['<$>'],
		F2(
			function (x, y) {
				return x * y;
			}),
		_Bogdanp$elm_combine$Combine_Num$sign),
	A2(
		_Bogdanp$elm_combine$Combine_ops['<?>'],
		A2(
			_Bogdanp$elm_combine$Combine_ops['<$>'],
			_Bogdanp$elm_combine$Combine_Num$toInt,
			_Bogdanp$elm_combine$Combine$regex('(0|[1-9][0-9]*)')),
		'expected an integer'));
var _Bogdanp$elm_combine$Combine_Num$toFloat = _Bogdanp$elm_combine$Combine_Num$unwrap(_elm_lang$core$String$toFloat);
var _Bogdanp$elm_combine$Combine_Num$float = A2(
	_Bogdanp$elm_combine$Combine_ops['<*>'],
	A2(
		_Bogdanp$elm_combine$Combine_ops['<$>'],
		function (_p2) {
			return F2(
				function (x, y) {
					return x * y;
				})(
				_elm_lang$core$Basics$toFloat(_p2));
		},
		_Bogdanp$elm_combine$Combine_Num$sign),
	A2(
		_Bogdanp$elm_combine$Combine_ops['<?>'],
		A2(
			_Bogdanp$elm_combine$Combine_ops['<$>'],
			_Bogdanp$elm_combine$Combine_Num$toFloat,
			_Bogdanp$elm_combine$Combine$regex('(0|[1-9][0-9]*)(\\.[0-9]+)')),
		'expected a float'));

var _elm_lang$core$Dict$foldr = F3(
	function (f, acc, t) {
		foldr:
		while (true) {
			var _p0 = t;
			if (_p0.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v1 = f,
					_v2 = A3(
					f,
					_p0._1,
					_p0._2,
					A3(_elm_lang$core$Dict$foldr, f, acc, _p0._4)),
					_v3 = _p0._3;
				f = _v1;
				acc = _v2;
				t = _v3;
				continue foldr;
			}
		}
	});
var _elm_lang$core$Dict$keys = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return {ctor: '::', _0: key, _1: keyList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$values = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return {ctor: '::', _0: value, _1: valueList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$toList = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: key, _1: value},
					_1: list
				};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$foldl = F3(
	function (f, acc, dict) {
		foldl:
		while (true) {
			var _p1 = dict;
			if (_p1.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v5 = f,
					_v6 = A3(
					f,
					_p1._1,
					_p1._2,
					A3(_elm_lang$core$Dict$foldl, f, acc, _p1._3)),
					_v7 = _p1._4;
				f = _v5;
				acc = _v6;
				dict = _v7;
				continue foldl;
			}
		}
	});
var _elm_lang$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _p2) {
				stepState:
				while (true) {
					var _p3 = _p2;
					var _p9 = _p3._1;
					var _p8 = _p3._0;
					var _p4 = _p8;
					if (_p4.ctor === '[]') {
						return {
							ctor: '_Tuple2',
							_0: _p8,
							_1: A3(rightStep, rKey, rValue, _p9)
						};
					} else {
						var _p7 = _p4._1;
						var _p6 = _p4._0._1;
						var _p5 = _p4._0._0;
						if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) < 0) {
							var _v10 = rKey,
								_v11 = rValue,
								_v12 = {
								ctor: '_Tuple2',
								_0: _p7,
								_1: A3(leftStep, _p5, _p6, _p9)
							};
							rKey = _v10;
							rValue = _v11;
							_p2 = _v12;
							continue stepState;
						} else {
							if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) > 0) {
								return {
									ctor: '_Tuple2',
									_0: _p8,
									_1: A3(rightStep, rKey, rValue, _p9)
								};
							} else {
								return {
									ctor: '_Tuple2',
									_0: _p7,
									_1: A4(bothStep, _p5, _p6, rValue, _p9)
								};
							}
						}
					}
				}
			});
		var _p10 = A3(
			_elm_lang$core$Dict$foldl,
			stepState,
			{
				ctor: '_Tuple2',
				_0: _elm_lang$core$Dict$toList(leftDict),
				_1: initialResult
			},
			rightDict);
		var leftovers = _p10._0;
		var intermediateResult = _p10._1;
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (_p11, result) {
					var _p12 = _p11;
					return A3(leftStep, _p12._0, _p12._1, result);
				}),
			intermediateResult,
			leftovers);
	});
var _elm_lang$core$Dict$reportRemBug = F4(
	function (msg, c, lgot, rgot) {
		return _elm_lang$core$Native_Debug.crash(
			_elm_lang$core$String$concat(
				{
					ctor: '::',
					_0: 'Internal red-black tree invariant violated, expected ',
					_1: {
						ctor: '::',
						_0: msg,
						_1: {
							ctor: '::',
							_0: ' and got ',
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Basics$toString(c),
								_1: {
									ctor: '::',
									_0: '/',
									_1: {
										ctor: '::',
										_0: lgot,
										_1: {
											ctor: '::',
											_0: '/',
											_1: {
												ctor: '::',
												_0: rgot,
												_1: {
													ctor: '::',
													_0: '\nPlease report this bug to <https://github.com/elm-lang/core/issues>',
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}));
	});
var _elm_lang$core$Dict$isBBlack = function (dict) {
	var _p13 = dict;
	_v14_2:
	do {
		if (_p13.ctor === 'RBNode_elm_builtin') {
			if (_p13._0.ctor === 'BBlack') {
				return true;
			} else {
				break _v14_2;
			}
		} else {
			if (_p13._0.ctor === 'LBBlack') {
				return true;
			} else {
				break _v14_2;
			}
		}
	} while(false);
	return false;
};
var _elm_lang$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			var _p14 = dict;
			if (_p14.ctor === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var _v16 = A2(_elm_lang$core$Dict$sizeHelp, n + 1, _p14._4),
					_v17 = _p14._3;
				n = _v16;
				dict = _v17;
				continue sizeHelp;
			}
		}
	});
var _elm_lang$core$Dict$size = function (dict) {
	return A2(_elm_lang$core$Dict$sizeHelp, 0, dict);
};
var _elm_lang$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			var _p15 = dict;
			if (_p15.ctor === 'RBEmpty_elm_builtin') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p16 = A2(_elm_lang$core$Basics$compare, targetKey, _p15._1);
				switch (_p16.ctor) {
					case 'LT':
						var _v20 = targetKey,
							_v21 = _p15._3;
						targetKey = _v20;
						dict = _v21;
						continue get;
					case 'EQ':
						return _elm_lang$core$Maybe$Just(_p15._2);
					default:
						var _v22 = targetKey,
							_v23 = _p15._4;
						targetKey = _v22;
						dict = _v23;
						continue get;
				}
			}
		}
	});
var _elm_lang$core$Dict$member = F2(
	function (key, dict) {
		var _p17 = A2(_elm_lang$core$Dict$get, key, dict);
		if (_p17.ctor === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var _elm_lang$core$Dict$maxWithDefault = F3(
	function (k, v, r) {
		maxWithDefault:
		while (true) {
			var _p18 = r;
			if (_p18.ctor === 'RBEmpty_elm_builtin') {
				return {ctor: '_Tuple2', _0: k, _1: v};
			} else {
				var _v26 = _p18._1,
					_v27 = _p18._2,
					_v28 = _p18._4;
				k = _v26;
				v = _v27;
				r = _v28;
				continue maxWithDefault;
			}
		}
	});
var _elm_lang$core$Dict$NBlack = {ctor: 'NBlack'};
var _elm_lang$core$Dict$BBlack = {ctor: 'BBlack'};
var _elm_lang$core$Dict$Black = {ctor: 'Black'};
var _elm_lang$core$Dict$blackish = function (t) {
	var _p19 = t;
	if (_p19.ctor === 'RBNode_elm_builtin') {
		var _p20 = _p19._0;
		return _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$Black) || _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$BBlack);
	} else {
		return true;
	}
};
var _elm_lang$core$Dict$Red = {ctor: 'Red'};
var _elm_lang$core$Dict$moreBlack = function (color) {
	var _p21 = color;
	switch (_p21.ctor) {
		case 'Black':
			return _elm_lang$core$Dict$BBlack;
		case 'Red':
			return _elm_lang$core$Dict$Black;
		case 'NBlack':
			return _elm_lang$core$Dict$Red;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a double black node more black!');
	}
};
var _elm_lang$core$Dict$lessBlack = function (color) {
	var _p22 = color;
	switch (_p22.ctor) {
		case 'BBlack':
			return _elm_lang$core$Dict$Black;
		case 'Black':
			return _elm_lang$core$Dict$Red;
		case 'Red':
			return _elm_lang$core$Dict$NBlack;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a negative black node less black!');
	}
};
var _elm_lang$core$Dict$LBBlack = {ctor: 'LBBlack'};
var _elm_lang$core$Dict$LBlack = {ctor: 'LBlack'};
var _elm_lang$core$Dict$RBEmpty_elm_builtin = function (a) {
	return {ctor: 'RBEmpty_elm_builtin', _0: a};
};
var _elm_lang$core$Dict$empty = _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
var _elm_lang$core$Dict$isEmpty = function (dict) {
	return _elm_lang$core$Native_Utils.eq(dict, _elm_lang$core$Dict$empty);
};
var _elm_lang$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {ctor: 'RBNode_elm_builtin', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _elm_lang$core$Dict$ensureBlackRoot = function (dict) {
	var _p23 = dict;
	if ((_p23.ctor === 'RBNode_elm_builtin') && (_p23._0.ctor === 'Red')) {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p23._1, _p23._2, _p23._3, _p23._4);
	} else {
		return dict;
	}
};
var _elm_lang$core$Dict$lessBlackTree = function (dict) {
	var _p24 = dict;
	if (_p24.ctor === 'RBNode_elm_builtin') {
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$lessBlack(_p24._0),
			_p24._1,
			_p24._2,
			_p24._3,
			_p24._4);
	} else {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	}
};
var _elm_lang$core$Dict$balancedTree = function (col) {
	return function (xk) {
		return function (xv) {
			return function (yk) {
				return function (yv) {
					return function (zk) {
						return function (zv) {
							return function (a) {
								return function (b) {
									return function (c) {
										return function (d) {
											return A5(
												_elm_lang$core$Dict$RBNode_elm_builtin,
												_elm_lang$core$Dict$lessBlack(col),
												yk,
												yv,
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, xk, xv, a, b),
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, zk, zv, c, d));
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elm_lang$core$Dict$blacken = function (t) {
	var _p25 = t;
	if (_p25.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p25._1, _p25._2, _p25._3, _p25._4);
	}
};
var _elm_lang$core$Dict$redden = function (t) {
	var _p26 = t;
	if (_p26.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Native_Debug.crash('can\'t make a Leaf red');
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, _p26._1, _p26._2, _p26._3, _p26._4);
	}
};
var _elm_lang$core$Dict$balanceHelp = function (tree) {
	var _p27 = tree;
	_v36_6:
	do {
		_v36_5:
		do {
			_v36_4:
			do {
				_v36_3:
				do {
					_v36_2:
					do {
						_v36_1:
						do {
							_v36_0:
							do {
								if (_p27.ctor === 'RBNode_elm_builtin') {
									if (_p27._3.ctor === 'RBNode_elm_builtin') {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._3._0.ctor) {
												case 'Red':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																		break _v36_2;
																	} else {
																		if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																			break _v36_3;
																		} else {
																			break _v36_6;
																		}
																	}
																}
															}
														case 'NBlack':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																		break _v36_4;
																	} else {
																		break _v36_6;
																	}
																}
															}
														default:
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	break _v36_6;
																}
															}
													}
												case 'NBlack':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															}
														case 'NBlack':
															if (_p27._0.ctor === 'BBlack') {
																if ((((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																	break _v36_4;
																} else {
																	if ((((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															} else {
																break _v36_6;
															}
														default:
															if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																break _v36_5;
															} else {
																break _v36_6;
															}
													}
												default:
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	break _v36_6;
																}
															}
														case 'NBlack':
															if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																break _v36_4;
															} else {
																break _v36_6;
															}
														default:
															break _v36_6;
													}
											}
										} else {
											switch (_p27._3._0.ctor) {
												case 'Red':
													if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
														break _v36_0;
													} else {
														if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
															break _v36_1;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
														break _v36_5;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										}
									} else {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._4._0.ctor) {
												case 'Red':
													if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
														break _v36_2;
													} else {
														if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
															break _v36_3;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
														break _v36_4;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										} else {
											break _v36_6;
										}
									}
								} else {
									break _v36_6;
								}
							} while(false);
							return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._3._1)(_p27._3._3._2)(_p27._3._1)(_p27._3._2)(_p27._1)(_p27._2)(_p27._3._3._3)(_p27._3._3._4)(_p27._3._4)(_p27._4);
						} while(false);
						return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._1)(_p27._3._2)(_p27._3._4._1)(_p27._3._4._2)(_p27._1)(_p27._2)(_p27._3._3)(_p27._3._4._3)(_p27._3._4._4)(_p27._4);
					} while(false);
					return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._3._1)(_p27._4._3._2)(_p27._4._1)(_p27._4._2)(_p27._3)(_p27._4._3._3)(_p27._4._3._4)(_p27._4._4);
				} while(false);
				return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._1)(_p27._4._2)(_p27._4._4._1)(_p27._4._4._2)(_p27._3)(_p27._4._3)(_p27._4._4._3)(_p27._4._4._4);
			} while(false);
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_elm_lang$core$Dict$Black,
				_p27._4._3._1,
				_p27._4._3._2,
				A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3, _p27._4._3._3),
				A5(
					_elm_lang$core$Dict$balance,
					_elm_lang$core$Dict$Black,
					_p27._4._1,
					_p27._4._2,
					_p27._4._3._4,
					_elm_lang$core$Dict$redden(_p27._4._4)));
		} while(false);
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$Black,
			_p27._3._4._1,
			_p27._3._4._2,
			A5(
				_elm_lang$core$Dict$balance,
				_elm_lang$core$Dict$Black,
				_p27._3._1,
				_p27._3._2,
				_elm_lang$core$Dict$redden(_p27._3._3),
				_p27._3._4._3),
			A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3._4._4, _p27._4));
	} while(false);
	return tree;
};
var _elm_lang$core$Dict$balance = F5(
	function (c, k, v, l, r) {
		var tree = A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
		return _elm_lang$core$Dict$blackish(tree) ? _elm_lang$core$Dict$balanceHelp(tree) : tree;
	});
var _elm_lang$core$Dict$bubble = F5(
	function (c, k, v, l, r) {
		return (_elm_lang$core$Dict$isBBlack(l) || _elm_lang$core$Dict$isBBlack(r)) ? A5(
			_elm_lang$core$Dict$balance,
			_elm_lang$core$Dict$moreBlack(c),
			k,
			v,
			_elm_lang$core$Dict$lessBlackTree(l),
			_elm_lang$core$Dict$lessBlackTree(r)) : A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
	});
var _elm_lang$core$Dict$removeMax = F5(
	function (c, k, v, l, r) {
		var _p28 = r;
		if (_p28.ctor === 'RBEmpty_elm_builtin') {
			return A3(_elm_lang$core$Dict$rem, c, l, r);
		} else {
			return A5(
				_elm_lang$core$Dict$bubble,
				c,
				k,
				v,
				l,
				A5(_elm_lang$core$Dict$removeMax, _p28._0, _p28._1, _p28._2, _p28._3, _p28._4));
		}
	});
var _elm_lang$core$Dict$rem = F3(
	function (color, left, right) {
		var _p29 = {ctor: '_Tuple2', _0: left, _1: right};
		if (_p29._0.ctor === 'RBEmpty_elm_builtin') {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p30 = color;
				switch (_p30.ctor) {
					case 'Red':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
					case 'Black':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBBlack);
					default:
						return _elm_lang$core$Native_Debug.crash('cannot have bblack or nblack nodes at this point');
				}
			} else {
				var _p33 = _p29._1._0;
				var _p32 = _p29._0._0;
				var _p31 = {ctor: '_Tuple3', _0: color, _1: _p32, _2: _p33};
				if ((((_p31.ctor === '_Tuple3') && (_p31._0.ctor === 'Black')) && (_p31._1.ctor === 'LBlack')) && (_p31._2.ctor === 'Red')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._1._1, _p29._1._2, _p29._1._3, _p29._1._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/LBlack/Red',
						color,
						_elm_lang$core$Basics$toString(_p32),
						_elm_lang$core$Basics$toString(_p33));
				}
			}
		} else {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p36 = _p29._1._0;
				var _p35 = _p29._0._0;
				var _p34 = {ctor: '_Tuple3', _0: color, _1: _p35, _2: _p36};
				if ((((_p34.ctor === '_Tuple3') && (_p34._0.ctor === 'Black')) && (_p34._1.ctor === 'Red')) && (_p34._2.ctor === 'LBlack')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._0._1, _p29._0._2, _p29._0._3, _p29._0._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/Red/LBlack',
						color,
						_elm_lang$core$Basics$toString(_p35),
						_elm_lang$core$Basics$toString(_p36));
				}
			} else {
				var _p40 = _p29._0._2;
				var _p39 = _p29._0._4;
				var _p38 = _p29._0._1;
				var newLeft = A5(_elm_lang$core$Dict$removeMax, _p29._0._0, _p38, _p40, _p29._0._3, _p39);
				var _p37 = A3(_elm_lang$core$Dict$maxWithDefault, _p38, _p40, _p39);
				var k = _p37._0;
				var v = _p37._1;
				return A5(_elm_lang$core$Dict$bubble, color, k, v, newLeft, right);
			}
		}
	});
var _elm_lang$core$Dict$map = F2(
	function (f, dict) {
		var _p41 = dict;
		if (_p41.ctor === 'RBEmpty_elm_builtin') {
			return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
		} else {
			var _p42 = _p41._1;
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_p41._0,
				_p42,
				A2(f, _p42, _p41._2),
				A2(_elm_lang$core$Dict$map, f, _p41._3),
				A2(_elm_lang$core$Dict$map, f, _p41._4));
		}
	});
var _elm_lang$core$Dict$Same = {ctor: 'Same'};
var _elm_lang$core$Dict$Remove = {ctor: 'Remove'};
var _elm_lang$core$Dict$Insert = {ctor: 'Insert'};
var _elm_lang$core$Dict$update = F3(
	function (k, alter, dict) {
		var up = function (dict) {
			var _p43 = dict;
			if (_p43.ctor === 'RBEmpty_elm_builtin') {
				var _p44 = alter(_elm_lang$core$Maybe$Nothing);
				if (_p44.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: _elm_lang$core$Dict$Same, _1: _elm_lang$core$Dict$empty};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Dict$Insert,
						_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, k, _p44._0, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty)
					};
				}
			} else {
				var _p55 = _p43._2;
				var _p54 = _p43._4;
				var _p53 = _p43._3;
				var _p52 = _p43._1;
				var _p51 = _p43._0;
				var _p45 = A2(_elm_lang$core$Basics$compare, k, _p52);
				switch (_p45.ctor) {
					case 'EQ':
						var _p46 = alter(
							_elm_lang$core$Maybe$Just(_p55));
						if (_p46.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Remove,
								_1: A3(_elm_lang$core$Dict$rem, _p51, _p53, _p54)
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Same,
								_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p46._0, _p53, _p54)
							};
						}
					case 'LT':
						var _p47 = up(_p53);
						var flag = _p47._0;
						var newLeft = _p47._1;
						var _p48 = flag;
						switch (_p48.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, newLeft, _p54)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, newLeft, _p54)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, newLeft, _p54)
								};
						}
					default:
						var _p49 = up(_p54);
						var flag = _p49._0;
						var newRight = _p49._1;
						var _p50 = flag;
						switch (_p50.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, _p53, newRight)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, _p53, newRight)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, _p53, newRight)
								};
						}
				}
			}
		};
		var _p56 = up(dict);
		var flag = _p56._0;
		var updatedDict = _p56._1;
		var _p57 = flag;
		switch (_p57.ctor) {
			case 'Same':
				return updatedDict;
			case 'Insert':
				return _elm_lang$core$Dict$ensureBlackRoot(updatedDict);
			default:
				return _elm_lang$core$Dict$blacken(updatedDict);
		}
	});
var _elm_lang$core$Dict$insert = F3(
	function (key, value, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Maybe$Just(value)),
			dict);
	});
var _elm_lang$core$Dict$singleton = F2(
	function (key, value) {
		return A3(_elm_lang$core$Dict$insert, key, value, _elm_lang$core$Dict$empty);
	});
var _elm_lang$core$Dict$union = F2(
	function (t1, t2) {
		return A3(_elm_lang$core$Dict$foldl, _elm_lang$core$Dict$insert, t2, t1);
	});
var _elm_lang$core$Dict$filter = F2(
	function (predicate, dictionary) {
		var add = F3(
			function (key, value, dict) {
				return A2(predicate, key, value) ? A3(_elm_lang$core$Dict$insert, key, value, dict) : dict;
			});
		return A3(_elm_lang$core$Dict$foldl, add, _elm_lang$core$Dict$empty, dictionary);
	});
var _elm_lang$core$Dict$intersect = F2(
	function (t1, t2) {
		return A2(
			_elm_lang$core$Dict$filter,
			F2(
				function (k, _p58) {
					return A2(_elm_lang$core$Dict$member, k, t2);
				}),
			t1);
	});
var _elm_lang$core$Dict$partition = F2(
	function (predicate, dict) {
		var add = F3(
			function (key, value, _p59) {
				var _p60 = _p59;
				var _p62 = _p60._1;
				var _p61 = _p60._0;
				return A2(predicate, key, value) ? {
					ctor: '_Tuple2',
					_0: A3(_elm_lang$core$Dict$insert, key, value, _p61),
					_1: _p62
				} : {
					ctor: '_Tuple2',
					_0: _p61,
					_1: A3(_elm_lang$core$Dict$insert, key, value, _p62)
				};
			});
		return A3(
			_elm_lang$core$Dict$foldl,
			add,
			{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: _elm_lang$core$Dict$empty},
			dict);
	});
var _elm_lang$core$Dict$fromList = function (assocs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p63, dict) {
				var _p64 = _p63;
				return A3(_elm_lang$core$Dict$insert, _p64._0, _p64._1, dict);
			}),
		_elm_lang$core$Dict$empty,
		assocs);
};
var _elm_lang$core$Dict$remove = F2(
	function (key, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			dict);
	});
var _elm_lang$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2(_elm_lang$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});

var _elm_lang$http$Native_Http = function() {


// ENCODING AND DECODING

function encodeUri(string)
{
	return encodeURIComponent(string);
}

function decodeUri(string)
{
	try
	{
		return _elm_lang$core$Maybe$Just(decodeURIComponent(string));
	}
	catch(e)
	{
		return _elm_lang$core$Maybe$Nothing;
	}
}


// SEND REQUEST

function toTask(request, maybeProgress)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var xhr = new XMLHttpRequest();

		configureProgress(xhr, maybeProgress);

		xhr.addEventListener('error', function() {
			callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'NetworkError' }));
		});
		xhr.addEventListener('timeout', function() {
			callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'Timeout' }));
		});
		xhr.addEventListener('load', function() {
			callback(handleResponse(xhr, request.expect.responseToResult));
		});

		try
		{
			xhr.open(request.method, request.url, true);
		}
		catch (e)
		{
			return callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'BadUrl', _0: request.url }));
		}

		configureRequest(xhr, request);
		send(xhr, request.body);

		return function() { xhr.abort(); };
	});
}

function configureProgress(xhr, maybeProgress)
{
	if (maybeProgress.ctor === 'Nothing')
	{
		return;
	}

	xhr.addEventListener('progress', function(event) {
		if (!event.lengthComputable)
		{
			return;
		}
		_elm_lang$core$Native_Scheduler.rawSpawn(maybeProgress._0({
			bytes: event.loaded,
			bytesExpected: event.total
		}));
	});
}

function configureRequest(xhr, request)
{
	function setHeader(pair)
	{
		xhr.setRequestHeader(pair._0, pair._1);
	}

	A2(_elm_lang$core$List$map, setHeader, request.headers);
	xhr.responseType = request.expect.responseType;
	xhr.withCredentials = request.withCredentials;

	if (request.timeout.ctor === 'Just')
	{
		xhr.timeout = request.timeout._0;
	}
}

function send(xhr, body)
{
	switch (body.ctor)
	{
		case 'EmptyBody':
			xhr.send();
			return;

		case 'StringBody':
			xhr.setRequestHeader('Content-Type', body._0);
			xhr.send(body._1);
			return;

		case 'FormDataBody':
			xhr.send(body._0);
			return;
	}
}


// RESPONSES

function handleResponse(xhr, responseToResult)
{
	var response = toResponse(xhr);

	if (xhr.status < 200 || 300 <= xhr.status)
	{
		response.body = xhr.responseText;
		return _elm_lang$core$Native_Scheduler.fail({
			ctor: 'BadStatus',
			_0: response
		});
	}

	var result = responseToResult(response);

	if (result.ctor === 'Ok')
	{
		return _elm_lang$core$Native_Scheduler.succeed(result._0);
	}
	else
	{
		response.body = xhr.responseText;
		return _elm_lang$core$Native_Scheduler.fail({
			ctor: 'BadPayload',
			_0: result._0,
			_1: response
		});
	}
}

function toResponse(xhr)
{
	return {
		status: { code: xhr.status, message: xhr.statusText },
		headers: parseHeaders(xhr.getAllResponseHeaders()),
		url: xhr.responseURL,
		body: xhr.response
	};
}

function parseHeaders(rawHeaders)
{
	var headers = _elm_lang$core$Dict$empty;

	if (!rawHeaders)
	{
		return headers;
	}

	var headerPairs = rawHeaders.split('\u000d\u000a');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf('\u003a\u0020');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3(_elm_lang$core$Dict$update, key, function(oldValue) {
				if (oldValue.ctor === 'Just')
				{
					return _elm_lang$core$Maybe$Just(value + ', ' + oldValue._0);
				}
				return _elm_lang$core$Maybe$Just(value);
			}, headers);
		}
	}

	return headers;
}


// EXPECTORS

function expectStringResponse(responseToResult)
{
	return {
		responseType: 'text',
		responseToResult: responseToResult
	};
}

function mapExpect(func, expect)
{
	return {
		responseType: expect.responseType,
		responseToResult: function(response) {
			var convertedResponse = expect.responseToResult(response);
			return A2(_elm_lang$core$Result$map, func, convertedResponse);
		}
	};
}


// BODY

function multipart(parts)
{
	var formData = new FormData();

	while (parts.ctor !== '[]')
	{
		var part = parts._0;
		formData.append(part._0, part._1);
		parts = parts._1;
	}

	return { ctor: 'FormDataBody', _0: formData };
}

return {
	toTask: F2(toTask),
	expectStringResponse: expectStringResponse,
	mapExpect: F2(mapExpect),
	multipart: multipart,
	encodeUri: encodeUri,
	decodeUri: decodeUri
};

}();

//import Native.Scheduler //

var _elm_lang$core$Native_Time = function() {

var now = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
{
	callback(_elm_lang$core$Native_Scheduler.succeed(Date.now()));
});

function setInterval_(interval, task)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var id = setInterval(function() {
			_elm_lang$core$Native_Scheduler.rawSpawn(task);
		}, interval);

		return function() { clearInterval(id); };
	});
}

return {
	now: now,
	setInterval_: F2(setInterval_)
};

}();
var _elm_lang$core$Task$onError = _elm_lang$core$Native_Scheduler.onError;
var _elm_lang$core$Task$andThen = _elm_lang$core$Native_Scheduler.andThen;
var _elm_lang$core$Task$spawnCmd = F2(
	function (router, _p0) {
		var _p1 = _p0;
		return _elm_lang$core$Native_Scheduler.spawn(
			A2(
				_elm_lang$core$Task$andThen,
				_elm_lang$core$Platform$sendToApp(router),
				_p1._0));
	});
var _elm_lang$core$Task$fail = _elm_lang$core$Native_Scheduler.fail;
var _elm_lang$core$Task$mapError = F2(
	function (convert, task) {
		return A2(
			_elm_lang$core$Task$onError,
			function (_p2) {
				return _elm_lang$core$Task$fail(
					convert(_p2));
			},
			task);
	});
var _elm_lang$core$Task$succeed = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return _elm_lang$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var _elm_lang$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return _elm_lang$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map3 = F4(
	function (func, taskA, taskB, taskC) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return _elm_lang$core$Task$succeed(
									A3(func, a, b, c));
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map4 = F5(
	function (func, taskA, taskB, taskC, taskD) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return _elm_lang$core$Task$succeed(
											A4(func, a, b, c, d));
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map5 = F6(
	function (func, taskA, taskB, taskC, taskD, taskE) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return A2(
											_elm_lang$core$Task$andThen,
											function (e) {
												return _elm_lang$core$Task$succeed(
													A5(func, a, b, c, d, e));
											},
											taskE);
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$sequence = function (tasks) {
	var _p3 = tasks;
	if (_p3.ctor === '[]') {
		return _elm_lang$core$Task$succeed(
			{ctor: '[]'});
	} else {
		return A3(
			_elm_lang$core$Task$map2,
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			_p3._0,
			_elm_lang$core$Task$sequence(_p3._1));
	}
};
var _elm_lang$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			_elm_lang$core$Task$map,
			function (_p4) {
				return {ctor: '_Tuple0'};
			},
			_elm_lang$core$Task$sequence(
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Task$spawnCmd(router),
					commands)));
	});
var _elm_lang$core$Task$init = _elm_lang$core$Task$succeed(
	{ctor: '_Tuple0'});
var _elm_lang$core$Task$onSelfMsg = F3(
	function (_p7, _p6, _p5) {
		return _elm_lang$core$Task$succeed(
			{ctor: '_Tuple0'});
	});
var _elm_lang$core$Task$command = _elm_lang$core$Native_Platform.leaf('Task');
var _elm_lang$core$Task$Perform = function (a) {
	return {ctor: 'Perform', _0: a};
};
var _elm_lang$core$Task$perform = F2(
	function (toMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(_elm_lang$core$Task$map, toMessage, task)));
	});
var _elm_lang$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(
					_elm_lang$core$Task$onError,
					function (_p8) {
						return _elm_lang$core$Task$succeed(
							resultToMessage(
								_elm_lang$core$Result$Err(_p8)));
					},
					A2(
						_elm_lang$core$Task$andThen,
						function (_p9) {
							return _elm_lang$core$Task$succeed(
								resultToMessage(
									_elm_lang$core$Result$Ok(_p9)));
						},
						task))));
	});
var _elm_lang$core$Task$cmdMap = F2(
	function (tagger, _p10) {
		var _p11 = _p10;
		return _elm_lang$core$Task$Perform(
			A2(_elm_lang$core$Task$map, tagger, _p11._0));
	});
_elm_lang$core$Native_Platform.effectManagers['Task'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Task$init, onEffects: _elm_lang$core$Task$onEffects, onSelfMsg: _elm_lang$core$Task$onSelfMsg, tag: 'cmd', cmdMap: _elm_lang$core$Task$cmdMap};

var _elm_lang$core$Time$setInterval = _elm_lang$core$Native_Time.setInterval_;
var _elm_lang$core$Time$spawnHelp = F3(
	function (router, intervals, processes) {
		var _p0 = intervals;
		if (_p0.ctor === '[]') {
			return _elm_lang$core$Task$succeed(processes);
		} else {
			var _p1 = _p0._0;
			var spawnRest = function (id) {
				return A3(
					_elm_lang$core$Time$spawnHelp,
					router,
					_p0._1,
					A3(_elm_lang$core$Dict$insert, _p1, id, processes));
			};
			var spawnTimer = _elm_lang$core$Native_Scheduler.spawn(
				A2(
					_elm_lang$core$Time$setInterval,
					_p1,
					A2(_elm_lang$core$Platform$sendToSelf, router, _p1)));
			return A2(_elm_lang$core$Task$andThen, spawnRest, spawnTimer);
		}
	});
var _elm_lang$core$Time$addMySub = F2(
	function (_p2, state) {
		var _p3 = _p2;
		var _p6 = _p3._1;
		var _p5 = _p3._0;
		var _p4 = A2(_elm_lang$core$Dict$get, _p5, state);
		if (_p4.ctor === 'Nothing') {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				{
					ctor: '::',
					_0: _p6,
					_1: {ctor: '[]'}
				},
				state);
		} else {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				{ctor: '::', _0: _p6, _1: _p4._0},
				state);
		}
	});
var _elm_lang$core$Time$inMilliseconds = function (t) {
	return t;
};
var _elm_lang$core$Time$millisecond = 1;
var _elm_lang$core$Time$second = 1000 * _elm_lang$core$Time$millisecond;
var _elm_lang$core$Time$minute = 60 * _elm_lang$core$Time$second;
var _elm_lang$core$Time$hour = 60 * _elm_lang$core$Time$minute;
var _elm_lang$core$Time$inHours = function (t) {
	return t / _elm_lang$core$Time$hour;
};
var _elm_lang$core$Time$inMinutes = function (t) {
	return t / _elm_lang$core$Time$minute;
};
var _elm_lang$core$Time$inSeconds = function (t) {
	return t / _elm_lang$core$Time$second;
};
var _elm_lang$core$Time$now = _elm_lang$core$Native_Time.now;
var _elm_lang$core$Time$onSelfMsg = F3(
	function (router, interval, state) {
		var _p7 = A2(_elm_lang$core$Dict$get, interval, state.taggers);
		if (_p7.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var tellTaggers = function (time) {
				return _elm_lang$core$Task$sequence(
					A2(
						_elm_lang$core$List$map,
						function (tagger) {
							return A2(
								_elm_lang$core$Platform$sendToApp,
								router,
								tagger(time));
						},
						_p7._0));
			};
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p8) {
					return _elm_lang$core$Task$succeed(state);
				},
				A2(_elm_lang$core$Task$andThen, tellTaggers, _elm_lang$core$Time$now));
		}
	});
var _elm_lang$core$Time$subscription = _elm_lang$core$Native_Platform.leaf('Time');
var _elm_lang$core$Time$State = F2(
	function (a, b) {
		return {taggers: a, processes: b};
	});
var _elm_lang$core$Time$init = _elm_lang$core$Task$succeed(
	A2(_elm_lang$core$Time$State, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty));
var _elm_lang$core$Time$onEffects = F3(
	function (router, subs, _p9) {
		var _p10 = _p9;
		var rightStep = F3(
			function (_p12, id, _p11) {
				var _p13 = _p11;
				return {
					ctor: '_Tuple3',
					_0: _p13._0,
					_1: _p13._1,
					_2: A2(
						_elm_lang$core$Task$andThen,
						function (_p14) {
							return _p13._2;
						},
						_elm_lang$core$Native_Scheduler.kill(id))
				};
			});
		var bothStep = F4(
			function (interval, taggers, id, _p15) {
				var _p16 = _p15;
				return {
					ctor: '_Tuple3',
					_0: _p16._0,
					_1: A3(_elm_lang$core$Dict$insert, interval, id, _p16._1),
					_2: _p16._2
				};
			});
		var leftStep = F3(
			function (interval, taggers, _p17) {
				var _p18 = _p17;
				return {
					ctor: '_Tuple3',
					_0: {ctor: '::', _0: interval, _1: _p18._0},
					_1: _p18._1,
					_2: _p18._2
				};
			});
		var newTaggers = A3(_elm_lang$core$List$foldl, _elm_lang$core$Time$addMySub, _elm_lang$core$Dict$empty, subs);
		var _p19 = A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			newTaggers,
			_p10.processes,
			{
				ctor: '_Tuple3',
				_0: {ctor: '[]'},
				_1: _elm_lang$core$Dict$empty,
				_2: _elm_lang$core$Task$succeed(
					{ctor: '_Tuple0'})
			});
		var spawnList = _p19._0;
		var existingDict = _p19._1;
		var killTask = _p19._2;
		return A2(
			_elm_lang$core$Task$andThen,
			function (newProcesses) {
				return _elm_lang$core$Task$succeed(
					A2(_elm_lang$core$Time$State, newTaggers, newProcesses));
			},
			A2(
				_elm_lang$core$Task$andThen,
				function (_p20) {
					return A3(_elm_lang$core$Time$spawnHelp, router, spawnList, existingDict);
				},
				killTask));
	});
var _elm_lang$core$Time$Every = F2(
	function (a, b) {
		return {ctor: 'Every', _0: a, _1: b};
	});
var _elm_lang$core$Time$every = F2(
	function (interval, tagger) {
		return _elm_lang$core$Time$subscription(
			A2(_elm_lang$core$Time$Every, interval, tagger));
	});
var _elm_lang$core$Time$subMap = F2(
	function (f, _p21) {
		var _p22 = _p21;
		return A2(
			_elm_lang$core$Time$Every,
			_p22._0,
			function (_p23) {
				return f(
					_p22._1(_p23));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Time'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Time$init, onEffects: _elm_lang$core$Time$onEffects, onSelfMsg: _elm_lang$core$Time$onSelfMsg, tag: 'sub', subMap: _elm_lang$core$Time$subMap};

var _elm_lang$http$Http_Internal$map = F2(
	function (func, request) {
		return _elm_lang$core$Native_Utils.update(
			request,
			{
				expect: A2(_elm_lang$http$Native_Http.mapExpect, func, request.expect)
			});
	});
var _elm_lang$http$Http_Internal$RawRequest = F7(
	function (a, b, c, d, e, f, g) {
		return {method: a, headers: b, url: c, body: d, expect: e, timeout: f, withCredentials: g};
	});
var _elm_lang$http$Http_Internal$Request = function (a) {
	return {ctor: 'Request', _0: a};
};
var _elm_lang$http$Http_Internal$Expect = {ctor: 'Expect'};
var _elm_lang$http$Http_Internal$FormDataBody = {ctor: 'FormDataBody'};
var _elm_lang$http$Http_Internal$StringBody = F2(
	function (a, b) {
		return {ctor: 'StringBody', _0: a, _1: b};
	});
var _elm_lang$http$Http_Internal$EmptyBody = {ctor: 'EmptyBody'};
var _elm_lang$http$Http_Internal$Header = F2(
	function (a, b) {
		return {ctor: 'Header', _0: a, _1: b};
	});

//import Native.List //

var _elm_lang$core$Native_Array = function() {

// A RRB-Tree has two distinct data types.
// Leaf -> "height"  is always 0
//         "table"   is an array of elements
// Node -> "height"  is always greater than 0
//         "table"   is an array of child nodes
//         "lengths" is an array of accumulated lengths of the child nodes

// M is the maximal table size. 32 seems fast. E is the allowed increase
// of search steps when concatting to find an index. Lower values will
// decrease balancing, but will increase search steps.
var M = 32;
var E = 2;

// An empty array.
var empty = {
	ctor: '_Array',
	height: 0,
	table: []
};


function get(i, array)
{
	if (i < 0 || i >= length(array))
	{
		throw new Error(
			'Index ' + i + ' is out of range. Check the length of ' +
			'your array first or use getMaybe or getWithDefault.');
	}
	return unsafeGet(i, array);
}


function unsafeGet(i, array)
{
	for (var x = array.height; x > 0; x--)
	{
		var slot = i >> (x * 5);
		while (array.lengths[slot] <= i)
		{
			slot++;
		}
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array = array.table[slot];
	}
	return array.table[i];
}


// Sets the value at the index i. Only the nodes leading to i will get
// copied and updated.
function set(i, item, array)
{
	if (i < 0 || length(array) <= i)
	{
		return array;
	}
	return unsafeSet(i, item, array);
}


function unsafeSet(i, item, array)
{
	array = nodeCopy(array);

	if (array.height === 0)
	{
		array.table[i] = item;
	}
	else
	{
		var slot = getSlot(i, array);
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array.table[slot] = unsafeSet(i, item, array.table[slot]);
	}
	return array;
}


function initialize(len, f)
{
	if (len <= 0)
	{
		return empty;
	}
	var h = Math.floor( Math.log(len) / Math.log(M) );
	return initialize_(f, h, 0, len);
}

function initialize_(f, h, from, to)
{
	if (h === 0)
	{
		var table = new Array((to - from) % (M + 1));
		for (var i = 0; i < table.length; i++)
		{
		  table[i] = f(from + i);
		}
		return {
			ctor: '_Array',
			height: 0,
			table: table
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = initialize_(f, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i-1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

function fromList(list)
{
	if (list.ctor === '[]')
	{
		return empty;
	}

	// Allocate M sized blocks (table) and write list elements to it.
	var table = new Array(M);
	var nodes = [];
	var i = 0;

	while (list.ctor !== '[]')
	{
		table[i] = list._0;
		list = list._1;
		i++;

		// table is full, so we can push a leaf containing it into the
		// next node.
		if (i === M)
		{
			var leaf = {
				ctor: '_Array',
				height: 0,
				table: table
			};
			fromListPush(leaf, nodes);
			table = new Array(M);
			i = 0;
		}
	}

	// Maybe there is something left on the table.
	if (i > 0)
	{
		var leaf = {
			ctor: '_Array',
			height: 0,
			table: table.splice(0, i)
		};
		fromListPush(leaf, nodes);
	}

	// Go through all of the nodes and eventually push them into higher nodes.
	for (var h = 0; h < nodes.length - 1; h++)
	{
		if (nodes[h].table.length > 0)
		{
			fromListPush(nodes[h], nodes);
		}
	}

	var head = nodes[nodes.length - 1];
	if (head.height > 0 && head.table.length === 1)
	{
		return head.table[0];
	}
	else
	{
		return head;
	}
}

// Push a node into a higher node as a child.
function fromListPush(toPush, nodes)
{
	var h = toPush.height;

	// Maybe the node on this height does not exist.
	if (nodes.length === h)
	{
		var node = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
		nodes.push(node);
	}

	nodes[h].table.push(toPush);
	var len = length(toPush);
	if (nodes[h].lengths.length > 0)
	{
		len += nodes[h].lengths[nodes[h].lengths.length - 1];
	}
	nodes[h].lengths.push(len);

	if (nodes[h].table.length === M)
	{
		fromListPush(nodes[h], nodes);
		nodes[h] = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
	}
}

// Pushes an item via push_ to the bottom right of a tree.
function push(item, a)
{
	var pushed = push_(item, a);
	if (pushed !== null)
	{
		return pushed;
	}

	var newTree = create(item, a.height);
	return siblise(a, newTree);
}

// Recursively tries to push an item to the bottom-right most
// tree possible. If there is no space left for the item,
// null will be returned.
function push_(item, a)
{
	// Handle resursion stop at leaf level.
	if (a.height === 0)
	{
		if (a.table.length < M)
		{
			var newA = {
				ctor: '_Array',
				height: 0,
				table: a.table.slice()
			};
			newA.table.push(item);
			return newA;
		}
		else
		{
		  return null;
		}
	}

	// Recursively push
	var pushed = push_(item, botRight(a));

	// There was space in the bottom right tree, so the slot will
	// be updated.
	if (pushed !== null)
	{
		var newA = nodeCopy(a);
		newA.table[newA.table.length - 1] = pushed;
		newA.lengths[newA.lengths.length - 1]++;
		return newA;
	}

	// When there was no space left, check if there is space left
	// for a new slot with a tree which contains only the item
	// at the bottom.
	if (a.table.length < M)
	{
		var newSlot = create(item, a.height - 1);
		var newA = nodeCopy(a);
		newA.table.push(newSlot);
		newA.lengths.push(newA.lengths[newA.lengths.length - 1] + length(newSlot));
		return newA;
	}
	else
	{
		return null;
	}
}

// Converts an array into a list of elements.
function toList(a)
{
	return toList_(_elm_lang$core$Native_List.Nil, a);
}

function toList_(list, a)
{
	for (var i = a.table.length - 1; i >= 0; i--)
	{
		list =
			a.height === 0
				? _elm_lang$core$Native_List.Cons(a.table[i], list)
				: toList_(list, a.table[i]);
	}
	return list;
}

// Maps a function over the elements of an array.
function map(f, a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? f(a.table[i])
				: map(f, a.table[i]);
	}
	return newA;
}

// Maps a function over the elements with their index as first argument.
function indexedMap(f, a)
{
	return indexedMap_(f, a, 0);
}

function indexedMap_(f, a, from)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? A2(f, from + i, a.table[i])
				: indexedMap_(f, a.table[i], i == 0 ? from : from + a.lengths[i - 1]);
	}
	return newA;
}

function foldl(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = foldl(f, b, a.table[i]);
		}
	}
	return b;
}

function foldr(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = a.table.length; i--; )
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = a.table.length; i--; )
		{
			b = foldr(f, b, a.table[i]);
		}
	}
	return b;
}

// TODO: currently, it slices the right, then the left. This can be
// optimized.
function slice(from, to, a)
{
	if (from < 0)
	{
		from += length(a);
	}
	if (to < 0)
	{
		to += length(a);
	}
	return sliceLeft(from, sliceRight(to, a));
}

function sliceRight(to, a)
{
	if (to === length(a))
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(0, to);
		return newA;
	}

	// Slice the right recursively.
	var right = getSlot(to, a);
	var sliced = sliceRight(to - (right > 0 ? a.lengths[right - 1] : 0), a.table[right]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (right === 0)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(0, right),
		lengths: a.lengths.slice(0, right)
	};
	if (sliced.table.length > 0)
	{
		newA.table[right] = sliced;
		newA.lengths[right] = length(sliced) + (right > 0 ? newA.lengths[right - 1] : 0);
	}
	return newA;
}

function sliceLeft(from, a)
{
	if (from === 0)
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(from, a.table.length + 1);
		return newA;
	}

	// Slice the left recursively.
	var left = getSlot(from, a);
	var sliced = sliceLeft(from - (left > 0 ? a.lengths[left - 1] : 0), a.table[left]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (left === a.table.length - 1)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(left, a.table.length + 1),
		lengths: new Array(a.table.length - left)
	};
	newA.table[0] = sliced;
	var len = 0;
	for (var i = 0; i < newA.table.length; i++)
	{
		len += length(newA.table[i]);
		newA.lengths[i] = len;
	}

	return newA;
}

// Appends two trees.
function append(a,b)
{
	if (a.table.length === 0)
	{
		return b;
	}
	if (b.table.length === 0)
	{
		return a;
	}

	var c = append_(a, b);

	// Check if both nodes can be crunshed together.
	if (c[0].table.length + c[1].table.length <= M)
	{
		if (c[0].table.length === 0)
		{
			return c[1];
		}
		if (c[1].table.length === 0)
		{
			return c[0];
		}

		// Adjust .table and .lengths
		c[0].table = c[0].table.concat(c[1].table);
		if (c[0].height > 0)
		{
			var len = length(c[0]);
			for (var i = 0; i < c[1].lengths.length; i++)
			{
				c[1].lengths[i] += len;
			}
			c[0].lengths = c[0].lengths.concat(c[1].lengths);
		}

		return c[0];
	}

	if (c[0].height > 0)
	{
		var toRemove = calcToRemove(a, b);
		if (toRemove > E)
		{
			c = shuffle(c[0], c[1], toRemove);
		}
	}

	return siblise(c[0], c[1]);
}

// Returns an array of two nodes; right and left. One node _may_ be empty.
function append_(a, b)
{
	if (a.height === 0 && b.height === 0)
	{
		return [a, b];
	}

	if (a.height !== 1 || b.height !== 1)
	{
		if (a.height === b.height)
		{
			a = nodeCopy(a);
			b = nodeCopy(b);
			var appended = append_(botRight(a), botLeft(b));

			insertRight(a, appended[1]);
			insertLeft(b, appended[0]);
		}
		else if (a.height > b.height)
		{
			a = nodeCopy(a);
			var appended = append_(botRight(a), b);

			insertRight(a, appended[0]);
			b = parentise(appended[1], appended[1].height + 1);
		}
		else
		{
			b = nodeCopy(b);
			var appended = append_(a, botLeft(b));

			var left = appended[0].table.length === 0 ? 0 : 1;
			var right = left === 0 ? 1 : 0;
			insertLeft(b, appended[left]);
			a = parentise(appended[right], appended[right].height + 1);
		}
	}

	// Check if balancing is needed and return based on that.
	if (a.table.length === 0 || b.table.length === 0)
	{
		return [a, b];
	}

	var toRemove = calcToRemove(a, b);
	if (toRemove <= E)
	{
		return [a, b];
	}
	return shuffle(a, b, toRemove);
}

// Helperfunctions for append_. Replaces a child node at the side of the parent.
function insertRight(parent, node)
{
	var index = parent.table.length - 1;
	parent.table[index] = node;
	parent.lengths[index] = length(node);
	parent.lengths[index] += index > 0 ? parent.lengths[index - 1] : 0;
}

function insertLeft(parent, node)
{
	if (node.table.length > 0)
	{
		parent.table[0] = node;
		parent.lengths[0] = length(node);

		var len = length(parent.table[0]);
		for (var i = 1; i < parent.lengths.length; i++)
		{
			len += length(parent.table[i]);
			parent.lengths[i] = len;
		}
	}
	else
	{
		parent.table.shift();
		for (var i = 1; i < parent.lengths.length; i++)
		{
			parent.lengths[i] = parent.lengths[i] - parent.lengths[0];
		}
		parent.lengths.shift();
	}
}

// Returns the extra search steps for E. Refer to the paper.
function calcToRemove(a, b)
{
	var subLengths = 0;
	for (var i = 0; i < a.table.length; i++)
	{
		subLengths += a.table[i].table.length;
	}
	for (var i = 0; i < b.table.length; i++)
	{
		subLengths += b.table[i].table.length;
	}

	var toRemove = a.table.length + b.table.length;
	return toRemove - (Math.floor((subLengths - 1) / M) + 1);
}

// get2, set2 and saveSlot are helpers for accessing elements over two arrays.
function get2(a, b, index)
{
	return index < a.length
		? a[index]
		: b[index - a.length];
}

function set2(a, b, index, value)
{
	if (index < a.length)
	{
		a[index] = value;
	}
	else
	{
		b[index - a.length] = value;
	}
}

function saveSlot(a, b, index, slot)
{
	set2(a.table, b.table, index, slot);

	var l = (index === 0 || index === a.lengths.length)
		? 0
		: get2(a.lengths, a.lengths, index - 1);

	set2(a.lengths, b.lengths, index, l + length(slot));
}

// Creates a node or leaf with a given length at their arrays for perfomance.
// Is only used by shuffle.
function createNode(h, length)
{
	if (length < 0)
	{
		length = 0;
	}
	var a = {
		ctor: '_Array',
		height: h,
		table: new Array(length)
	};
	if (h > 0)
	{
		a.lengths = new Array(length);
	}
	return a;
}

// Returns an array of two balanced nodes.
function shuffle(a, b, toRemove)
{
	var newA = createNode(a.height, Math.min(M, a.table.length + b.table.length - toRemove));
	var newB = createNode(a.height, newA.table.length - (a.table.length + b.table.length - toRemove));

	// Skip the slots with size M. More precise: copy the slot references
	// to the new node
	var read = 0;
	while (get2(a.table, b.table, read).table.length % M === 0)
	{
		set2(newA.table, newB.table, read, get2(a.table, b.table, read));
		set2(newA.lengths, newB.lengths, read, get2(a.lengths, b.lengths, read));
		read++;
	}

	// Pulling items from left to right, caching in a slot before writing
	// it into the new nodes.
	var write = read;
	var slot = new createNode(a.height - 1, 0);
	var from = 0;

	// If the current slot is still containing data, then there will be at
	// least one more write, so we do not break this loop yet.
	while (read - write - (slot.table.length > 0 ? 1 : 0) < toRemove)
	{
		// Find out the max possible items for copying.
		var source = get2(a.table, b.table, read);
		var to = Math.min(M - slot.table.length, source.table.length);

		// Copy and adjust size table.
		slot.table = slot.table.concat(source.table.slice(from, to));
		if (slot.height > 0)
		{
			var len = slot.lengths.length;
			for (var i = len; i < len + to - from; i++)
			{
				slot.lengths[i] = length(slot.table[i]);
				slot.lengths[i] += (i > 0 ? slot.lengths[i - 1] : 0);
			}
		}

		from += to;

		// Only proceed to next slots[i] if the current one was
		// fully copied.
		if (source.table.length <= to)
		{
			read++; from = 0;
		}

		// Only create a new slot if the current one is filled up.
		if (slot.table.length === M)
		{
			saveSlot(newA, newB, write, slot);
			slot = createNode(a.height - 1, 0);
			write++;
		}
	}

	// Cleanup after the loop. Copy the last slot into the new nodes.
	if (slot.table.length > 0)
	{
		saveSlot(newA, newB, write, slot);
		write++;
	}

	// Shift the untouched slots to the left
	while (read < a.table.length + b.table.length )
	{
		saveSlot(newA, newB, write, get2(a.table, b.table, read));
		read++;
		write++;
	}

	return [newA, newB];
}

// Navigation functions
function botRight(a)
{
	return a.table[a.table.length - 1];
}
function botLeft(a)
{
	return a.table[0];
}

// Copies a node for updating. Note that you should not use this if
// only updating only one of "table" or "lengths" for performance reasons.
function nodeCopy(a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice()
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths.slice();
	}
	return newA;
}

// Returns how many items are in the tree.
function length(array)
{
	if (array.height === 0)
	{
		return array.table.length;
	}
	else
	{
		return array.lengths[array.lengths.length - 1];
	}
}

// Calculates in which slot of "table" the item probably is, then
// find the exact slot via forward searching in  "lengths". Returns the index.
function getSlot(i, a)
{
	var slot = i >> (5 * a.height);
	while (a.lengths[slot] <= i)
	{
		slot++;
	}
	return slot;
}

// Recursively creates a tree with a given height containing
// only the given item.
function create(item, h)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: [item]
		};
	}
	return {
		ctor: '_Array',
		height: h,
		table: [create(item, h - 1)],
		lengths: [1]
	};
}

// Recursively creates a tree that contains the given tree.
function parentise(tree, h)
{
	if (h === tree.height)
	{
		return tree;
	}

	return {
		ctor: '_Array',
		height: h,
		table: [parentise(tree, h - 1)],
		lengths: [length(tree)]
	};
}

// Emphasizes blood brotherhood beneath two trees.
function siblise(a, b)
{
	return {
		ctor: '_Array',
		height: a.height + 1,
		table: [a, b],
		lengths: [length(a), length(a) + length(b)]
	};
}

function toJSArray(a)
{
	var jsArray = new Array(length(a));
	toJSArray_(jsArray, 0, a);
	return jsArray;
}

function toJSArray_(jsArray, i, a)
{
	for (var t = 0; t < a.table.length; t++)
	{
		if (a.height === 0)
		{
			jsArray[i + t] = a.table[t];
		}
		else
		{
			var inc = t === 0 ? 0 : a.lengths[t - 1];
			toJSArray_(jsArray, i + inc, a.table[t]);
		}
	}
}

function fromJSArray(jsArray)
{
	if (jsArray.length === 0)
	{
		return empty;
	}
	var h = Math.floor(Math.log(jsArray.length) / Math.log(M));
	return fromJSArray_(jsArray, h, 0, jsArray.length);
}

function fromJSArray_(jsArray, h, from, to)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: jsArray.slice(from, to)
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = fromJSArray_(jsArray, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i - 1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

return {
	empty: empty,
	fromList: fromList,
	toList: toList,
	initialize: F2(initialize),
	append: F2(append),
	push: F2(push),
	slice: F3(slice),
	get: F2(get),
	set: F3(set),
	map: F2(map),
	indexedMap: F2(indexedMap),
	foldl: F3(foldl),
	foldr: F3(foldr),
	length: length,

	toJSArray: toJSArray,
	fromJSArray: fromJSArray
};

}();
var _elm_lang$core$Array$append = _elm_lang$core$Native_Array.append;
var _elm_lang$core$Array$length = _elm_lang$core$Native_Array.length;
var _elm_lang$core$Array$isEmpty = function (array) {
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Array$length(array),
		0);
};
var _elm_lang$core$Array$slice = _elm_lang$core$Native_Array.slice;
var _elm_lang$core$Array$set = _elm_lang$core$Native_Array.set;
var _elm_lang$core$Array$get = F2(
	function (i, array) {
		return ((_elm_lang$core$Native_Utils.cmp(0, i) < 1) && (_elm_lang$core$Native_Utils.cmp(
			i,
			_elm_lang$core$Native_Array.length(array)) < 0)) ? _elm_lang$core$Maybe$Just(
			A2(_elm_lang$core$Native_Array.get, i, array)) : _elm_lang$core$Maybe$Nothing;
	});
var _elm_lang$core$Array$push = _elm_lang$core$Native_Array.push;
var _elm_lang$core$Array$empty = _elm_lang$core$Native_Array.empty;
var _elm_lang$core$Array$filter = F2(
	function (isOkay, arr) {
		var update = F2(
			function (x, xs) {
				return isOkay(x) ? A2(_elm_lang$core$Native_Array.push, x, xs) : xs;
			});
		return A3(_elm_lang$core$Native_Array.foldl, update, _elm_lang$core$Native_Array.empty, arr);
	});
var _elm_lang$core$Array$foldr = _elm_lang$core$Native_Array.foldr;
var _elm_lang$core$Array$foldl = _elm_lang$core$Native_Array.foldl;
var _elm_lang$core$Array$indexedMap = _elm_lang$core$Native_Array.indexedMap;
var _elm_lang$core$Array$map = _elm_lang$core$Native_Array.map;
var _elm_lang$core$Array$toIndexedList = function (array) {
	return A3(
		_elm_lang$core$List$map2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		A2(
			_elm_lang$core$List$range,
			0,
			_elm_lang$core$Native_Array.length(array) - 1),
		_elm_lang$core$Native_Array.toList(array));
};
var _elm_lang$core$Array$toList = _elm_lang$core$Native_Array.toList;
var _elm_lang$core$Array$fromList = _elm_lang$core$Native_Array.fromList;
var _elm_lang$core$Array$initialize = _elm_lang$core$Native_Array.initialize;
var _elm_lang$core$Array$repeat = F2(
	function (n, e) {
		return A2(
			_elm_lang$core$Array$initialize,
			n,
			_elm_lang$core$Basics$always(e));
	});
var _elm_lang$core$Array$Array = {ctor: 'Array'};

//import Maybe, Native.Array, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_Json = function() {


// CORE DECODERS

function succeed(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'succeed',
		msg: msg
	};
}

function fail(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'fail',
		msg: msg
	};
}

function decodePrimitive(tag)
{
	return {
		ctor: '<decoder>',
		tag: tag
	};
}

function decodeContainer(tag, decoder)
{
	return {
		ctor: '<decoder>',
		tag: tag,
		decoder: decoder
	};
}

function decodeNull(value)
{
	return {
		ctor: '<decoder>',
		tag: 'null',
		value: value
	};
}

function decodeField(field, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'field',
		field: field,
		decoder: decoder
	};
}

function decodeIndex(index, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'index',
		index: index,
		decoder: decoder
	};
}

function decodeKeyValuePairs(decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'key-value',
		decoder: decoder
	};
}

function mapMany(f, decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'map-many',
		func: f,
		decoders: decoders
	};
}

function andThen(callback, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'andThen',
		decoder: decoder,
		callback: callback
	};
}

function oneOf(decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'oneOf',
		decoders: decoders
	};
}


// DECODING OBJECTS

function map1(f, d1)
{
	return mapMany(f, [d1]);
}

function map2(f, d1, d2)
{
	return mapMany(f, [d1, d2]);
}

function map3(f, d1, d2, d3)
{
	return mapMany(f, [d1, d2, d3]);
}

function map4(f, d1, d2, d3, d4)
{
	return mapMany(f, [d1, d2, d3, d4]);
}

function map5(f, d1, d2, d3, d4, d5)
{
	return mapMany(f, [d1, d2, d3, d4, d5]);
}

function map6(f, d1, d2, d3, d4, d5, d6)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6]);
}

function map7(f, d1, d2, d3, d4, d5, d6, d7)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
}

function map8(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
}


// DECODE HELPERS

function ok(value)
{
	return { tag: 'ok', value: value };
}

function badPrimitive(type, value)
{
	return { tag: 'primitive', type: type, value: value };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badField(field, nestedProblems)
{
	return { tag: 'field', field: field, rest: nestedProblems };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badOneOf(problems)
{
	return { tag: 'oneOf', problems: problems };
}

function bad(msg)
{
	return { tag: 'fail', msg: msg };
}

function badToString(problem)
{
	var context = '_';
	while (problem)
	{
		switch (problem.tag)
		{
			case 'primitive':
				return 'Expecting ' + problem.type
					+ (context === '_' ? '' : ' at ' + context)
					+ ' but instead got: ' + jsToString(problem.value);

			case 'index':
				context += '[' + problem.index + ']';
				problem = problem.rest;
				break;

			case 'field':
				context += '.' + problem.field;
				problem = problem.rest;
				break;

			case 'oneOf':
				var problems = problem.problems;
				for (var i = 0; i < problems.length; i++)
				{
					problems[i] = badToString(problems[i]);
				}
				return 'I ran into the following problems'
					+ (context === '_' ? '' : ' at ' + context)
					+ ':\n\n' + problems.join('\n');

			case 'fail':
				return 'I ran into a `fail` decoder'
					+ (context === '_' ? '' : ' at ' + context)
					+ ': ' + problem.msg;
		}
	}
}

function jsToString(value)
{
	return value === undefined
		? 'undefined'
		: JSON.stringify(value);
}


// DECODE

function runOnString(decoder, string)
{
	var json;
	try
	{
		json = JSON.parse(string);
	}
	catch (e)
	{
		return _elm_lang$core$Result$Err('Given an invalid JSON: ' + e.message);
	}
	return run(decoder, json);
}

function run(decoder, value)
{
	var result = runHelp(decoder, value);
	return (result.tag === 'ok')
		? _elm_lang$core$Result$Ok(result.value)
		: _elm_lang$core$Result$Err(badToString(result));
}

function runHelp(decoder, value)
{
	switch (decoder.tag)
	{
		case 'bool':
			return (typeof value === 'boolean')
				? ok(value)
				: badPrimitive('a Bool', value);

		case 'int':
			if (typeof value !== 'number') {
				return badPrimitive('an Int', value);
			}

			if (-2147483647 < value && value < 2147483647 && (value | 0) === value) {
				return ok(value);
			}

			if (isFinite(value) && !(value % 1)) {
				return ok(value);
			}

			return badPrimitive('an Int', value);

		case 'float':
			return (typeof value === 'number')
				? ok(value)
				: badPrimitive('a Float', value);

		case 'string':
			return (typeof value === 'string')
				? ok(value)
				: (value instanceof String)
					? ok(value + '')
					: badPrimitive('a String', value);

		case 'null':
			return (value === null)
				? ok(decoder.value)
				: badPrimitive('null', value);

		case 'value':
			return ok(value);

		case 'list':
			if (!(value instanceof Array))
			{
				return badPrimitive('a List', value);
			}

			var list = _elm_lang$core$Native_List.Nil;
			for (var i = value.length; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result)
				}
				list = _elm_lang$core$Native_List.Cons(result.value, list);
			}
			return ok(list);

		case 'array':
			if (!(value instanceof Array))
			{
				return badPrimitive('an Array', value);
			}

			var len = value.length;
			var array = new Array(len);
			for (var i = len; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result);
				}
				array[i] = result.value;
			}
			return ok(_elm_lang$core$Native_Array.fromJSArray(array));

		case 'maybe':
			var result = runHelp(decoder.decoder, value);
			return (result.tag === 'ok')
				? ok(_elm_lang$core$Maybe$Just(result.value))
				: ok(_elm_lang$core$Maybe$Nothing);

		case 'field':
			var field = decoder.field;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return badPrimitive('an object with a field named `' + field + '`', value);
			}

			var result = runHelp(decoder.decoder, value[field]);
			return (result.tag === 'ok') ? result : badField(field, result);

		case 'index':
			var index = decoder.index;
			if (!(value instanceof Array))
			{
				return badPrimitive('an array', value);
			}
			if (index >= value.length)
			{
				return badPrimitive('a longer array. Need index ' + index + ' but there are only ' + value.length + ' entries', value);
			}

			var result = runHelp(decoder.decoder, value[index]);
			return (result.tag === 'ok') ? result : badIndex(index, result);

		case 'key-value':
			if (typeof value !== 'object' || value === null || value instanceof Array)
			{
				return badPrimitive('an object', value);
			}

			var keyValuePairs = _elm_lang$core$Native_List.Nil;
			for (var key in value)
			{
				var result = runHelp(decoder.decoder, value[key]);
				if (result.tag !== 'ok')
				{
					return badField(key, result);
				}
				var pair = _elm_lang$core$Native_Utils.Tuple2(key, result.value);
				keyValuePairs = _elm_lang$core$Native_List.Cons(pair, keyValuePairs);
			}
			return ok(keyValuePairs);

		case 'map-many':
			var answer = decoder.func;
			var decoders = decoder.decoders;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = runHelp(decoders[i], value);
				if (result.tag !== 'ok')
				{
					return result;
				}
				answer = answer(result.value);
			}
			return ok(answer);

		case 'andThen':
			var result = runHelp(decoder.decoder, value);
			return (result.tag !== 'ok')
				? result
				: runHelp(decoder.callback(result.value), value);

		case 'oneOf':
			var errors = [];
			var temp = decoder.decoders;
			while (temp.ctor !== '[]')
			{
				var result = runHelp(temp._0, value);

				if (result.tag === 'ok')
				{
					return result;
				}

				errors.push(result);

				temp = temp._1;
			}
			return badOneOf(errors);

		case 'fail':
			return bad(decoder.msg);

		case 'succeed':
			return ok(decoder.msg);
	}
}


// EQUALITY

function equality(a, b)
{
	if (a === b)
	{
		return true;
	}

	if (a.tag !== b.tag)
	{
		return false;
	}

	switch (a.tag)
	{
		case 'succeed':
		case 'fail':
			return a.msg === b.msg;

		case 'bool':
		case 'int':
		case 'float':
		case 'string':
		case 'value':
			return true;

		case 'null':
			return a.value === b.value;

		case 'list':
		case 'array':
		case 'maybe':
		case 'key-value':
			return equality(a.decoder, b.decoder);

		case 'field':
			return a.field === b.field && equality(a.decoder, b.decoder);

		case 'index':
			return a.index === b.index && equality(a.decoder, b.decoder);

		case 'map-many':
			if (a.func !== b.func)
			{
				return false;
			}
			return listEquality(a.decoders, b.decoders);

		case 'andThen':
			return a.callback === b.callback && equality(a.decoder, b.decoder);

		case 'oneOf':
			return listEquality(a.decoders, b.decoders);
	}
}

function listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

function encode(indentLevel, value)
{
	return JSON.stringify(value, null, indentLevel);
}

function identity(value)
{
	return value;
}

function encodeObject(keyValuePairs)
{
	var obj = {};
	while (keyValuePairs.ctor !== '[]')
	{
		var pair = keyValuePairs._0;
		obj[pair._0] = pair._1;
		keyValuePairs = keyValuePairs._1;
	}
	return obj;
}

return {
	encode: F2(encode),
	runOnString: F2(runOnString),
	run: F2(run),

	decodeNull: decodeNull,
	decodePrimitive: decodePrimitive,
	decodeContainer: F2(decodeContainer),

	decodeField: F2(decodeField),
	decodeIndex: F2(decodeIndex),

	map1: F2(map1),
	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	map6: F7(map6),
	map7: F8(map7),
	map8: F9(map8),
	decodeKeyValuePairs: decodeKeyValuePairs,

	andThen: F2(andThen),
	fail: fail,
	succeed: succeed,
	oneOf: oneOf,

	identity: identity,
	encodeNull: null,
	encodeArray: _elm_lang$core$Native_Array.toJSArray,
	encodeList: _elm_lang$core$Native_List.toArray,
	encodeObject: encodeObject,

	equality: equality
};

}();

var _elm_lang$core$Json_Encode$list = _elm_lang$core$Native_Json.encodeList;
var _elm_lang$core$Json_Encode$array = _elm_lang$core$Native_Json.encodeArray;
var _elm_lang$core$Json_Encode$object = _elm_lang$core$Native_Json.encodeObject;
var _elm_lang$core$Json_Encode$null = _elm_lang$core$Native_Json.encodeNull;
var _elm_lang$core$Json_Encode$bool = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$float = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$int = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$string = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$encode = _elm_lang$core$Native_Json.encode;
var _elm_lang$core$Json_Encode$Value = {ctor: 'Value'};

var _elm_lang$core$Json_Decode$null = _elm_lang$core$Native_Json.decodeNull;
var _elm_lang$core$Json_Decode$value = _elm_lang$core$Native_Json.decodePrimitive('value');
var _elm_lang$core$Json_Decode$andThen = _elm_lang$core$Native_Json.andThen;
var _elm_lang$core$Json_Decode$fail = _elm_lang$core$Native_Json.fail;
var _elm_lang$core$Json_Decode$succeed = _elm_lang$core$Native_Json.succeed;
var _elm_lang$core$Json_Decode$lazy = function (thunk) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		thunk,
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Json_Decode$decodeValue = _elm_lang$core$Native_Json.run;
var _elm_lang$core$Json_Decode$decodeString = _elm_lang$core$Native_Json.runOnString;
var _elm_lang$core$Json_Decode$map8 = _elm_lang$core$Native_Json.map8;
var _elm_lang$core$Json_Decode$map7 = _elm_lang$core$Native_Json.map7;
var _elm_lang$core$Json_Decode$map6 = _elm_lang$core$Native_Json.map6;
var _elm_lang$core$Json_Decode$map5 = _elm_lang$core$Native_Json.map5;
var _elm_lang$core$Json_Decode$map4 = _elm_lang$core$Native_Json.map4;
var _elm_lang$core$Json_Decode$map3 = _elm_lang$core$Native_Json.map3;
var _elm_lang$core$Json_Decode$map2 = _elm_lang$core$Native_Json.map2;
var _elm_lang$core$Json_Decode$map = _elm_lang$core$Native_Json.map1;
var _elm_lang$core$Json_Decode$oneOf = _elm_lang$core$Native_Json.oneOf;
var _elm_lang$core$Json_Decode$maybe = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'maybe', decoder);
};
var _elm_lang$core$Json_Decode$index = _elm_lang$core$Native_Json.decodeIndex;
var _elm_lang$core$Json_Decode$field = _elm_lang$core$Native_Json.decodeField;
var _elm_lang$core$Json_Decode$at = F2(
	function (fields, decoder) {
		return A3(_elm_lang$core$List$foldr, _elm_lang$core$Json_Decode$field, decoder, fields);
	});
var _elm_lang$core$Json_Decode$keyValuePairs = _elm_lang$core$Native_Json.decodeKeyValuePairs;
var _elm_lang$core$Json_Decode$dict = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Dict$fromList,
		_elm_lang$core$Json_Decode$keyValuePairs(decoder));
};
var _elm_lang$core$Json_Decode$array = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'array', decoder);
};
var _elm_lang$core$Json_Decode$list = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'list', decoder);
};
var _elm_lang$core$Json_Decode$nullable = function (decoder) {
	return _elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, decoder),
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$core$Json_Decode$float = _elm_lang$core$Native_Json.decodePrimitive('float');
var _elm_lang$core$Json_Decode$int = _elm_lang$core$Native_Json.decodePrimitive('int');
var _elm_lang$core$Json_Decode$bool = _elm_lang$core$Native_Json.decodePrimitive('bool');
var _elm_lang$core$Json_Decode$string = _elm_lang$core$Native_Json.decodePrimitive('string');
var _elm_lang$core$Json_Decode$Decoder = {ctor: 'Decoder'};

var _elm_lang$http$Http$decodeUri = _elm_lang$http$Native_Http.decodeUri;
var _elm_lang$http$Http$encodeUri = _elm_lang$http$Native_Http.encodeUri;
var _elm_lang$http$Http$expectStringResponse = _elm_lang$http$Native_Http.expectStringResponse;
var _elm_lang$http$Http$expectJson = function (decoder) {
	return _elm_lang$http$Http$expectStringResponse(
		function (response) {
			return A2(_elm_lang$core$Json_Decode$decodeString, decoder, response.body);
		});
};
var _elm_lang$http$Http$expectString = _elm_lang$http$Http$expectStringResponse(
	function (response) {
		return _elm_lang$core$Result$Ok(response.body);
	});
var _elm_lang$http$Http$multipartBody = _elm_lang$http$Native_Http.multipart;
var _elm_lang$http$Http$stringBody = _elm_lang$http$Http_Internal$StringBody;
var _elm_lang$http$Http$jsonBody = function (value) {
	return A2(
		_elm_lang$http$Http_Internal$StringBody,
		'application/json',
		A2(_elm_lang$core$Json_Encode$encode, 0, value));
};
var _elm_lang$http$Http$emptyBody = _elm_lang$http$Http_Internal$EmptyBody;
var _elm_lang$http$Http$header = _elm_lang$http$Http_Internal$Header;
var _elm_lang$http$Http$request = _elm_lang$http$Http_Internal$Request;
var _elm_lang$http$Http$post = F3(
	function (url, body, decoder) {
		return _elm_lang$http$Http$request(
			{
				method: 'POST',
				headers: {ctor: '[]'},
				url: url,
				body: body,
				expect: _elm_lang$http$Http$expectJson(decoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _elm_lang$http$Http$get = F2(
	function (url, decoder) {
		return _elm_lang$http$Http$request(
			{
				method: 'GET',
				headers: {ctor: '[]'},
				url: url,
				body: _elm_lang$http$Http$emptyBody,
				expect: _elm_lang$http$Http$expectJson(decoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _elm_lang$http$Http$getString = function (url) {
	return _elm_lang$http$Http$request(
		{
			method: 'GET',
			headers: {ctor: '[]'},
			url: url,
			body: _elm_lang$http$Http$emptyBody,
			expect: _elm_lang$http$Http$expectString,
			timeout: _elm_lang$core$Maybe$Nothing,
			withCredentials: false
		});
};
var _elm_lang$http$Http$toTask = function (_p0) {
	var _p1 = _p0;
	return A2(_elm_lang$http$Native_Http.toTask, _p1._0, _elm_lang$core$Maybe$Nothing);
};
var _elm_lang$http$Http$send = F2(
	function (resultToMessage, request) {
		return A2(
			_elm_lang$core$Task$attempt,
			resultToMessage,
			_elm_lang$http$Http$toTask(request));
	});
var _elm_lang$http$Http$Response = F4(
	function (a, b, c, d) {
		return {url: a, status: b, headers: c, body: d};
	});
var _elm_lang$http$Http$BadPayload = F2(
	function (a, b) {
		return {ctor: 'BadPayload', _0: a, _1: b};
	});
var _elm_lang$http$Http$BadStatus = function (a) {
	return {ctor: 'BadStatus', _0: a};
};
var _elm_lang$http$Http$NetworkError = {ctor: 'NetworkError'};
var _elm_lang$http$Http$Timeout = {ctor: 'Timeout'};
var _elm_lang$http$Http$BadUrl = function (a) {
	return {ctor: 'BadUrl', _0: a};
};
var _elm_lang$http$Http$StringPart = F2(
	function (a, b) {
		return {ctor: 'StringPart', _0: a, _1: b};
	});
var _elm_lang$http$Http$stringPart = _elm_lang$http$Http$StringPart;

var _Bogdanp$elm_querystring$QueryString$maybeParse = function (p) {
	return function (_p0) {
		return A2(
			_elm_lang$core$Maybe$map,
			function (_p1) {
				var _p2 = _p1;
				return _p2._2;
			},
			_elm_lang$core$Result$toMaybe(
				A2(_Bogdanp$elm_combine$Combine$parse, p, _p0)));
	};
};
var _Bogdanp$elm_querystring$QueryString$parameter = function () {
	var param = F2(
		function (k, v) {
			return {
				ctor: '_Tuple2',
				_0: k,
				_1: A2(
					_elm_lang$core$Maybe$withDefault,
					'',
					_elm_lang$http$Http$decodeUri(v))
			};
		});
	var value = _Bogdanp$elm_combine$Combine$regex('[^&]*');
	var key = _Bogdanp$elm_combine$Combine$regex('[^=]+');
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<*>'],
		A2(
			_Bogdanp$elm_combine$Combine_ops['<$>'],
			param,
			A2(
				_Bogdanp$elm_combine$Combine_ops['<*'],
				key,
				_Bogdanp$elm_combine$Combine$string('='))),
		value);
}();
var _Bogdanp$elm_querystring$QueryString$parameters = A2(
	_Bogdanp$elm_combine$Combine_ops['<*'],
	A2(
		_Bogdanp$elm_combine$Combine$sepBy,
		_Bogdanp$elm_combine$Combine$string('&'),
		_Bogdanp$elm_querystring$QueryString$parameter),
	A2(
		_Bogdanp$elm_combine$Combine_ops['<|>'],
		_Bogdanp$elm_combine$Combine$skip(
			_Bogdanp$elm_combine$Combine$string('#')),
		_Bogdanp$elm_combine$Combine$end));
var _Bogdanp$elm_querystring$QueryString$query = function () {
	var prepend = F2(
		function (y, xs) {
			var _p3 = xs;
			if (_p3.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: y,
						_1: {ctor: '[]'}
					});
			} else {
				return _elm_lang$core$Maybe$Just(
					{ctor: '::', _0: y, _1: _p3._0});
			}
		});
	var collect = F2(
		function (_p4, d) {
			var _p5 = _p4;
			return A3(
				_elm_lang$core$Dict$update,
				_p5._0,
				prepend(_p5._1),
				d);
		});
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<$>'],
		A2(_elm_lang$core$List$foldr, collect, _elm_lang$core$Dict$empty),
		A2(
			_Bogdanp$elm_combine$Combine_ops['*>'],
			_Bogdanp$elm_combine$Combine$maybe(
				_Bogdanp$elm_combine$Combine$string('?')),
			_Bogdanp$elm_querystring$QueryString$parameters));
}();
var _Bogdanp$elm_querystring$QueryString$render = function (_p6) {
	var _p7 = _p6;
	var flatten = function (_p8) {
		var _p9 = _p8;
		return A2(
			_elm_lang$core$List$map,
			function (x) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p9._0,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'=',
						_elm_lang$http$Http$encodeUri(x)));
			},
			_p9._1);
	};
	return A2(
		F2(
			function (x, y) {
				return A2(_elm_lang$core$Basics_ops['++'], x, y);
			}),
		'?',
		A2(
			_elm_lang$core$String$join,
			'&',
			A2(
				_elm_lang$core$List$concatMap,
				flatten,
				_elm_lang$core$Dict$toList(_p7._0))));
};
var _Bogdanp$elm_querystring$QueryString$int = _Bogdanp$elm_combine$Combine_Num$int;
var _Bogdanp$elm_querystring$QueryString$string = _Bogdanp$elm_combine$Combine$regex('.*');
var _Bogdanp$elm_querystring$QueryString$all = F2(
	function (k, _p10) {
		var _p11 = _p10;
		return A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			A2(_elm_lang$core$Dict$get, k, _p11._0));
	});
var _Bogdanp$elm_querystring$QueryString$many = F2(
	function (p, k) {
		return function (_p12) {
			return A2(
				_elm_lang$core$List$filterMap,
				_Bogdanp$elm_querystring$QueryString$maybeParse(p),
				A2(_Bogdanp$elm_querystring$QueryString$all, k, _p12));
		};
	});
var _Bogdanp$elm_querystring$QueryString$one = F2(
	function (p, k) {
		return function (_p13) {
			return _elm_lang$core$List$head(
				A3(_Bogdanp$elm_querystring$QueryString$many, p, k, _p13));
		};
	});
var _Bogdanp$elm_querystring$QueryString$QueryString = function (a) {
	return {ctor: 'QueryString', _0: a};
};
var _Bogdanp$elm_querystring$QueryString$empty = _Bogdanp$elm_querystring$QueryString$QueryString(_elm_lang$core$Dict$empty);
var _Bogdanp$elm_querystring$QueryString$parse = function (_p14) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		_Bogdanp$elm_querystring$QueryString$empty,
		A2(
			_elm_lang$core$Maybe$map,
			function (_p15) {
				var _p16 = _p15;
				return _Bogdanp$elm_querystring$QueryString$QueryString(_p16._2);
			},
			_elm_lang$core$Result$toMaybe(
				A2(_Bogdanp$elm_combine$Combine$parse, _Bogdanp$elm_querystring$QueryString$query, _p14))));
};
var _Bogdanp$elm_querystring$QueryString$add = F3(
	function (k, v, _p17) {
		var _p18 = _p17;
		var prepend = function (xs) {
			var _p19 = xs;
			if (_p19.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: v,
						_1: {ctor: '[]'}
					});
			} else {
				return _elm_lang$core$Maybe$Just(
					{ctor: '::', _0: v, _1: _p19._0});
			}
		};
		return _Bogdanp$elm_querystring$QueryString$QueryString(
			A3(_elm_lang$core$Dict$update, k, prepend, _p18._0));
	});
var _Bogdanp$elm_querystring$QueryString$remove = F2(
	function (k, _p20) {
		var _p21 = _p20;
		return _Bogdanp$elm_querystring$QueryString$QueryString(
			A2(_elm_lang$core$Dict$remove, k, _p21._0));
	});
var _Bogdanp$elm_querystring$QueryString$filter = F3(
	function (k, f, _p22) {
		var _p23 = _p22;
		var remove = function (xs) {
			return A2(
				_elm_lang$core$Maybe$map,
				_elm_lang$core$List$filter(f),
				xs);
		};
		return _Bogdanp$elm_querystring$QueryString$QueryString(
			A3(_elm_lang$core$Dict$update, k, remove, _p23._0));
	});

var _Bogdanp$elm_route$Route$reverse = F2(
	function (_p0, inputs) {
		var _p1 = _p0;
		var accumulate = F3(
			function (cs, is, xs) {
				accumulate:
				while (true) {
					var _p2 = {ctor: '_Tuple2', _0: is, _1: xs};
					_v1_5:
					do {
						if (_p2.ctor === '_Tuple2') {
							if (_p2._1.ctor === '[]') {
								if (_p2._0.ctor === '[]') {
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'/',
										A2(
											_elm_lang$core$String$join,
											'/',
											_elm_lang$core$List$reverse(cs)));
								} else {
									break _v1_5;
								}
							} else {
								switch (_p2._1._0.ctor) {
									case 'CStatic':
										var _v2 = {ctor: '::', _0: _p2._1._0._0, _1: cs},
											_v3 = is,
											_v4 = _p2._1._1;
										cs = _v2;
										is = _v3;
										xs = _v4;
										continue accumulate;
									case 'CCustom':
										if (_p2._0.ctor === '::') {
											var _p5 = _p2._0._0;
											var _p3 = _p2._1._0._0(_p5);
											if (_p3.ctor === 'Ok') {
												var _v6 = {ctor: '::', _0: _p5, _1: cs},
													_v7 = _p2._0._1,
													_v8 = _p2._1._1;
												cs = _v6;
												is = _v7;
												xs = _v8;
												continue accumulate;
											} else {
												return _elm_lang$core$Native_Utils.crashCase(
													'Route',
													{
														start: {line: 388, column: 21},
														end: {line: 393, column: 100}
													},
													_p3)(
													A2(
														_elm_lang$core$Basics_ops['++'],
														_p3._0,
														A2(
															_elm_lang$core$Basics_ops['++'],
															' in a call to \'reverse\' but received \'',
															A2(_elm_lang$core$Basics_ops['++'], _p5, '\''))));
											}
										} else {
											break _v1_5;
										}
									case 'CString':
										if (_p2._0.ctor === '::') {
											var _v9 = {ctor: '::', _0: _p2._0._0, _1: cs},
												_v10 = _p2._0._1,
												_v11 = _p2._1._1;
											cs = _v9;
											is = _v10;
											xs = _v11;
											continue accumulate;
										} else {
											break _v1_5;
										}
									default:
										if (_p2._0.ctor === '::') {
											var _p7 = _p2._0._0;
											var _p6 = _elm_lang$core$String$toInt(_p7);
											if (_p6.ctor === 'Ok') {
												var _v13 = {ctor: '::', _0: _p7, _1: cs},
													_v14 = _p2._0._1,
													_v15 = _p2._1._1;
												cs = _v13;
												is = _v14;
												xs = _v15;
												continue accumulate;
											} else {
												return A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Native_Utils.crash(
														'Route',
														{
															start: {line: 404, column: 29},
															end: {line: 404, column: 40}
														})(_p6._0),
													' in a call to \'reverse\'');
											}
										} else {
											break _v1_5;
										}
								}
							}
						} else {
							break _v1_5;
						}
					} while(false);
					return _elm_lang$core$Native_Utils.crashCase(
						'Route',
						{
							start: {line: 380, column: 13},
							end: {line: 407, column: 90}
						},
						_p2)('\'reverse\' called with an unexpected number of arguments');
				}
			});
		return A3(
			accumulate,
			{ctor: '[]'},
			inputs,
			_p1._0.components);
	});
var _Bogdanp$elm_route$Route$match = F2(
	function (_p9, path) {
		var _p10 = _p9;
		var _p11 = _elm_lang$core$String$uncons(path);
		if (((_p11.ctor === 'Just') && (_p11._0.ctor === '_Tuple2')) && (_p11._0._0.valueOf() === '/')) {
			return A2(
				_elm_lang$core$Maybe$map,
				function (_p12) {
					var _p13 = _p12;
					return _p13._2;
				},
				_elm_lang$core$Result$toMaybe(
					A2(_Bogdanp$elm_combine$Combine$parse, _p10._0, _p11._0._1)));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _Bogdanp$elm_route$Route$CInt = {ctor: 'CInt'};
var _Bogdanp$elm_route$Route$CString = {ctor: 'CString'};
var _Bogdanp$elm_route$Route$CCustom = function (a) {
	return {ctor: 'CCustom', _0: a};
};
var _Bogdanp$elm_route$Route$CStatic = function (a) {
	return {ctor: 'CStatic', _0: a};
};
var _Bogdanp$elm_route$Route$Route = function (a) {
	return {ctor: 'Route', _0: a};
};
var _Bogdanp$elm_route$Route$route = F2(
	function (x, _p14) {
		var _p15 = _p14;
		var _p16 = _p15._0;
		return _Bogdanp$elm_route$Route$Route(
			{
				parser: A2(
					_Bogdanp$elm_combine$Combine_ops['>>='],
					_p16.parser,
					function (k) {
						return _Bogdanp$elm_combine$Combine$succeed(
							k(x));
					}),
				components: _p16.components
			});
	});
var _Bogdanp$elm_route$Route_ops = _Bogdanp$elm_route$Route_ops || {};
_Bogdanp$elm_route$Route_ops[':='] = _Bogdanp$elm_route$Route$route;
var _Bogdanp$elm_route$Route$static = function (s) {
	return _Bogdanp$elm_route$Route$Route(
		{
			parser: A2(
				_Bogdanp$elm_combine$Combine_ops['<$'],
				_elm_lang$core$Basics$identity,
				_Bogdanp$elm_combine$Combine$string(s)),
			components: {
				ctor: '::',
				_0: _Bogdanp$elm_route$Route$CStatic(s),
				_1: {ctor: '[]'}
			}
		});
};
var _Bogdanp$elm_route$Route$custom = function (p) {
	var validator = function (s) {
		var _p17 = A2(_Bogdanp$elm_combine$Combine$parse, p, s);
		if (_p17.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				{ctor: '_Tuple0'});
		} else {
			return _elm_lang$core$Result$Err(
				A2(_elm_lang$core$String$join, ' or ', _p17._0._2));
		}
	};
	return _Bogdanp$elm_route$Route$Route(
		{
			parser: A2(
				_Bogdanp$elm_combine$Combine_ops['<$>'],
				F2(
					function (x, y) {
						return y(x);
					}),
				p),
			components: {
				ctor: '::',
				_0: _Bogdanp$elm_route$Route$CCustom(validator),
				_1: {ctor: '[]'}
			}
		});
};
var _Bogdanp$elm_route$Route$string = _Bogdanp$elm_route$Route$Route(
	{
		parser: A2(
			_Bogdanp$elm_combine$Combine_ops['<$>'],
			F2(
				function (x, y) {
					return y(x);
				}),
			_Bogdanp$elm_combine$Combine$regex('[^/]+')),
		components: {
			ctor: '::',
			_0: _Bogdanp$elm_route$Route$CString,
			_1: {ctor: '[]'}
		}
	});
var _Bogdanp$elm_route$Route$int = _Bogdanp$elm_route$Route$Route(
	{
		parser: A2(
			_Bogdanp$elm_combine$Combine_ops['<$>'],
			F2(
				function (x, y) {
					return y(x);
				}),
			_Bogdanp$elm_combine$Combine_Num$int),
		components: {
			ctor: '::',
			_0: _Bogdanp$elm_route$Route$CInt,
			_1: {ctor: '[]'}
		}
	});
var _Bogdanp$elm_route$Route$and = F2(
	function (_p19, _p18) {
		var _p20 = _p19;
		var _p24 = _p20._0;
		var _p21 = _p18;
		var _p23 = _p21._0;
		return _Bogdanp$elm_route$Route$Route(
			{
				parser: A2(
					_Bogdanp$elm_combine$Combine_ops['<*>'],
					A2(
						_Bogdanp$elm_combine$Combine_ops['<$>'],
						F2(
							function (x, y) {
								return function (_p22) {
									return y(
										x(_p22));
								};
							}),
						_p24.parser),
					A2(
						_Bogdanp$elm_combine$Combine_ops['*>'],
						_Bogdanp$elm_combine$Combine$string('/'),
						_p23.parser)),
				components: A2(_elm_lang$core$Basics_ops['++'], _p24.components, _p23.components)
			});
	});
var _Bogdanp$elm_route$Route_ops = _Bogdanp$elm_route$Route_ops || {};
_Bogdanp$elm_route$Route_ops['</>'] = _Bogdanp$elm_route$Route$and;
var _Bogdanp$elm_route$Route$Router = function (a) {
	return {ctor: 'Router', _0: a};
};
var _Bogdanp$elm_route$Route$router = function (rs) {
	return _Bogdanp$elm_route$Route$Router(
		_Bogdanp$elm_combine$Combine$choice(
			A2(
				_elm_lang$core$List$map,
				function (_p25) {
					var _p26 = _p25;
					return A2(_Bogdanp$elm_combine$Combine_ops['<*'], _p26._0.parser, _Bogdanp$elm_combine$Combine$end);
				},
				rs)));
};

var _NoRedInk$elm_simple_fuzzy$Simple_Fuzzy$isJust = function (maybeThing) {
	var _p0 = maybeThing;
	if (_p0.ctor === 'Just') {
		return true;
	} else {
		return false;
	}
};
var _NoRedInk$elm_simple_fuzzy$Simple_Fuzzy$searchHelper = F2(
	function (letter, restOfWord) {
		var _p1 = restOfWord;
		if (_p1.ctor === 'Just') {
			var _p3 = _p1._0;
			var _p2 = A2(
				_elm_lang$core$String$indexes,
				_elm_lang$core$String$fromChar(letter),
				_p3);
			if (_p2.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return _elm_lang$core$Maybe$Just(
					A2(_elm_lang$core$String$dropLeft, _p2._0 + 1, _p3));
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _NoRedInk$elm_simple_fuzzy$Simple_Fuzzy$root = function (string) {
	return A2(
		_elm_lang$core$String$filter,
		function (c) {
			return _elm_lang$core$Char$isLower(c) || _elm_lang$core$Char$isDigit(c);
		},
		_elm_lang$core$String$toLower(string));
};
var _NoRedInk$elm_simple_fuzzy$Simple_Fuzzy$match = F2(
	function (needle, haystack) {
		return _NoRedInk$elm_simple_fuzzy$Simple_Fuzzy$isJust(
			A3(
				_elm_lang$core$String$foldl,
				_NoRedInk$elm_simple_fuzzy$Simple_Fuzzy$searchHelper,
				_elm_lang$core$Maybe$Just(
					_NoRedInk$elm_simple_fuzzy$Simple_Fuzzy$root(haystack)),
				_NoRedInk$elm_simple_fuzzy$Simple_Fuzzy$root(needle)));
	});
var _NoRedInk$elm_simple_fuzzy$Simple_Fuzzy$filter = F3(
	function (map, needle, records) {
		return A2(
			_elm_lang$core$List$filter,
			function (_p4) {
				return A2(
					_NoRedInk$elm_simple_fuzzy$Simple_Fuzzy$match,
					needle,
					map(_p4));
			},
			records);
	});

var _avh4$elm_fifo$Fifo$toList = function (_p0) {
	var _p1 = _p0;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_p1._0,
		_elm_lang$core$List$reverse(_p1._1));
};
var _avh4$elm_fifo$Fifo$Fifo = F2(
	function (a, b) {
		return {ctor: 'Fifo', _0: a, _1: b};
	});
var _avh4$elm_fifo$Fifo$empty = A2(
	_avh4$elm_fifo$Fifo$Fifo,
	{ctor: '[]'},
	{ctor: '[]'});
var _avh4$elm_fifo$Fifo$insert = F2(
	function (a, _p2) {
		var _p3 = _p2;
		return A2(
			_avh4$elm_fifo$Fifo$Fifo,
			_p3._0,
			{ctor: '::', _0: a, _1: _p3._1});
	});
var _avh4$elm_fifo$Fifo$remove = function (fifo) {
	remove:
	while (true) {
		var _p4 = fifo;
		if (_p4._0.ctor === '[]') {
			if (_p4._1.ctor === '[]') {
				return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _avh4$elm_fifo$Fifo$empty};
			} else {
				var _v3 = A2(
					_avh4$elm_fifo$Fifo$Fifo,
					_elm_lang$core$List$reverse(_p4._1),
					{ctor: '[]'});
				fifo = _v3;
				continue remove;
			}
		} else {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Maybe$Just(_p4._0._0),
				_1: A2(_avh4$elm_fifo$Fifo$Fifo, _p4._0._1, _p4._1)
			};
		}
	}
};
var _avh4$elm_fifo$Fifo$fromList = function (list) {
	return A2(
		_avh4$elm_fifo$Fifo$Fifo,
		list,
		{ctor: '[]'});
};

var _chendrix$elm_matrix$Matrix$rowCount = function (m) {
	return _elm_lang$core$Array$length(m);
};
var _chendrix$elm_matrix$Matrix$colCount = function (m) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		0,
		A2(
			_elm_lang$core$Maybe$map,
			_elm_lang$core$Array$length,
			A2(_elm_lang$core$Array$get, 0, m)));
};
var _chendrix$elm_matrix$Matrix$fromList = function (l) {
	return _elm_lang$core$Array$fromList(
		A2(_elm_lang$core$List$map, _elm_lang$core$Array$fromList, l));
};
var _chendrix$elm_matrix$Matrix$toList = function (m) {
	return _elm_lang$core$Array$toList(
		A2(_elm_lang$core$Array$map, _elm_lang$core$Array$toList, m));
};
var _chendrix$elm_matrix$Matrix$flatten = function (m) {
	return _elm_lang$core$List$concat(
		_chendrix$elm_matrix$Matrix$toList(m));
};
var _chendrix$elm_matrix$Matrix$map = F2(
	function (f, m) {
		return A2(
			_elm_lang$core$Array$map,
			_elm_lang$core$Array$map(f),
			m);
	});
var _chendrix$elm_matrix$Matrix$col = _elm_lang$core$Tuple$second;
var _chendrix$elm_matrix$Matrix$row = _elm_lang$core$Tuple$first;
var _chendrix$elm_matrix$Matrix$get = F2(
	function (location, m) {
		return A2(
			_elm_lang$core$Maybe$andThen,
			_elm_lang$core$Array$get(
				_chendrix$elm_matrix$Matrix$col(location)),
			A2(
				_elm_lang$core$Array$get,
				_chendrix$elm_matrix$Matrix$row(location),
				m));
	});
var _chendrix$elm_matrix$Matrix$update = F3(
	function (location, f, m) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			m,
			A2(
				_elm_lang$core$Maybe$map,
				function (current) {
					return A2(
						_elm_lang$core$Maybe$withDefault,
						m,
						A2(
							_elm_lang$core$Maybe$map,
							function (oldRow) {
								return function (newRow) {
									return A3(
										_elm_lang$core$Array$set,
										_chendrix$elm_matrix$Matrix$row(location),
										newRow,
										m);
								}(
									A3(
										_elm_lang$core$Array$set,
										_chendrix$elm_matrix$Matrix$col(location),
										f(current),
										oldRow));
							},
							A2(
								_elm_lang$core$Array$get,
								_chendrix$elm_matrix$Matrix$row(location),
								m)));
				},
				A2(_chendrix$elm_matrix$Matrix$get, location, m)));
	});
var _chendrix$elm_matrix$Matrix$set = F3(
	function (location, value, m) {
		return A3(
			_chendrix$elm_matrix$Matrix$update,
			location,
			_elm_lang$core$Basics$always(value),
			m);
	});
var _chendrix$elm_matrix$Matrix$loc = F2(
	function (v0, v1) {
		return {ctor: '_Tuple2', _0: v0, _1: v1};
	});
var _chendrix$elm_matrix$Matrix$matrix = F3(
	function (numRows, numCols, f) {
		return A2(
			_elm_lang$core$Array$initialize,
			numRows,
			function (row) {
				return A2(
					_elm_lang$core$Array$initialize,
					numCols,
					function (col) {
						return f(
							A2(_chendrix$elm_matrix$Matrix$loc, row, col));
					});
			});
	});
var _chendrix$elm_matrix$Matrix$square = function (size) {
	return A2(_chendrix$elm_matrix$Matrix$matrix, size, size);
};
var _chendrix$elm_matrix$Matrix$mapWithLocation = F2(
	function (f, m) {
		return A2(
			_elm_lang$core$Array$indexedMap,
			F2(
				function (rowNum, row) {
					return A2(
						_elm_lang$core$Array$indexedMap,
						F2(
							function (colNum, element) {
								return A2(
									f,
									A2(_chendrix$elm_matrix$Matrix$loc, rowNum, colNum),
									element);
							}),
						row);
				}),
			m);
	});

var _elm_lang$animation_frame$Native_AnimationFrame = function()
{

function create()
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var id = requestAnimationFrame(function() {
			callback(_elm_lang$core$Native_Scheduler.succeed(Date.now()));
		});

		return function() {
			cancelAnimationFrame(id);
		};
	});
}

return {
	create: create
};

}();

var _elm_lang$core$Process$kill = _elm_lang$core$Native_Scheduler.kill;
var _elm_lang$core$Process$sleep = _elm_lang$core$Native_Scheduler.sleep;
var _elm_lang$core$Process$spawn = _elm_lang$core$Native_Scheduler.spawn;

var _elm_lang$animation_frame$AnimationFrame$rAF = _elm_lang$animation_frame$Native_AnimationFrame.create(
	{ctor: '_Tuple0'});
var _elm_lang$animation_frame$AnimationFrame$subscription = _elm_lang$core$Native_Platform.leaf('AnimationFrame');
var _elm_lang$animation_frame$AnimationFrame$State = F3(
	function (a, b, c) {
		return {subs: a, request: b, oldTime: c};
	});
var _elm_lang$animation_frame$AnimationFrame$init = _elm_lang$core$Task$succeed(
	A3(
		_elm_lang$animation_frame$AnimationFrame$State,
		{ctor: '[]'},
		_elm_lang$core$Maybe$Nothing,
		0));
var _elm_lang$animation_frame$AnimationFrame$onEffects = F3(
	function (router, subs, _p0) {
		var _p1 = _p0;
		var _p5 = _p1.request;
		var _p4 = _p1.oldTime;
		var _p2 = {ctor: '_Tuple2', _0: _p5, _1: subs};
		if (_p2._0.ctor === 'Nothing') {
			if (_p2._1.ctor === '[]') {
				return _elm_lang$core$Task$succeed(
					A3(
						_elm_lang$animation_frame$AnimationFrame$State,
						{ctor: '[]'},
						_elm_lang$core$Maybe$Nothing,
						_p4));
			} else {
				return A2(
					_elm_lang$core$Task$andThen,
					function (pid) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (time) {
								return _elm_lang$core$Task$succeed(
									A3(
										_elm_lang$animation_frame$AnimationFrame$State,
										subs,
										_elm_lang$core$Maybe$Just(pid),
										time));
							},
							_elm_lang$core$Time$now);
					},
					_elm_lang$core$Process$spawn(
						A2(
							_elm_lang$core$Task$andThen,
							_elm_lang$core$Platform$sendToSelf(router),
							_elm_lang$animation_frame$AnimationFrame$rAF)));
			}
		} else {
			if (_p2._1.ctor === '[]') {
				return A2(
					_elm_lang$core$Task$andThen,
					function (_p3) {
						return _elm_lang$core$Task$succeed(
							A3(
								_elm_lang$animation_frame$AnimationFrame$State,
								{ctor: '[]'},
								_elm_lang$core$Maybe$Nothing,
								_p4));
					},
					_elm_lang$core$Process$kill(_p2._0._0));
			} else {
				return _elm_lang$core$Task$succeed(
					A3(_elm_lang$animation_frame$AnimationFrame$State, subs, _p5, _p4));
			}
		}
	});
var _elm_lang$animation_frame$AnimationFrame$onSelfMsg = F3(
	function (router, newTime, _p6) {
		var _p7 = _p6;
		var _p10 = _p7.subs;
		var diff = newTime - _p7.oldTime;
		var send = function (sub) {
			var _p8 = sub;
			if (_p8.ctor === 'Time') {
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					_p8._0(newTime));
			} else {
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					_p8._0(diff));
			}
		};
		return A2(
			_elm_lang$core$Task$andThen,
			function (pid) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (_p9) {
						return _elm_lang$core$Task$succeed(
							A3(
								_elm_lang$animation_frame$AnimationFrame$State,
								_p10,
								_elm_lang$core$Maybe$Just(pid),
								newTime));
					},
					_elm_lang$core$Task$sequence(
						A2(_elm_lang$core$List$map, send, _p10)));
			},
			_elm_lang$core$Process$spawn(
				A2(
					_elm_lang$core$Task$andThen,
					_elm_lang$core$Platform$sendToSelf(router),
					_elm_lang$animation_frame$AnimationFrame$rAF)));
	});
var _elm_lang$animation_frame$AnimationFrame$Diff = function (a) {
	return {ctor: 'Diff', _0: a};
};
var _elm_lang$animation_frame$AnimationFrame$diffs = function (tagger) {
	return _elm_lang$animation_frame$AnimationFrame$subscription(
		_elm_lang$animation_frame$AnimationFrame$Diff(tagger));
};
var _elm_lang$animation_frame$AnimationFrame$Time = function (a) {
	return {ctor: 'Time', _0: a};
};
var _elm_lang$animation_frame$AnimationFrame$times = function (tagger) {
	return _elm_lang$animation_frame$AnimationFrame$subscription(
		_elm_lang$animation_frame$AnimationFrame$Time(tagger));
};
var _elm_lang$animation_frame$AnimationFrame$subMap = F2(
	function (func, sub) {
		var _p11 = sub;
		if (_p11.ctor === 'Time') {
			return _elm_lang$animation_frame$AnimationFrame$Time(
				function (_p12) {
					return func(
						_p11._0(_p12));
				});
		} else {
			return _elm_lang$animation_frame$AnimationFrame$Diff(
				function (_p13) {
					return func(
						_p11._0(_p13));
				});
		}
	});
_elm_lang$core$Native_Platform.effectManagers['AnimationFrame'] = {pkg: 'elm-lang/animation-frame', init: _elm_lang$animation_frame$AnimationFrame$init, onEffects: _elm_lang$animation_frame$AnimationFrame$onEffects, onSelfMsg: _elm_lang$animation_frame$AnimationFrame$onSelfMsg, tag: 'sub', subMap: _elm_lang$animation_frame$AnimationFrame$subMap};

var _elm_lang$virtual_dom$VirtualDom_Debug$wrap;
var _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags;

var _elm_lang$virtual_dom$Native_VirtualDom = function() {

var STYLE_KEY = 'STYLE';
var EVENT_KEY = 'EVENT';
var ATTR_KEY = 'ATTR';
var ATTR_NS_KEY = 'ATTR_NS';

var localDoc = typeof document !== 'undefined' ? document : {};


////////////  VIRTUAL DOM NODES  ////////////


function text(string)
{
	return {
		type: 'text',
		text: string
	};
}


function node(tag)
{
	return F2(function(factList, kidList) {
		return nodeHelp(tag, factList, kidList);
	});
}


function nodeHelp(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function keyedNode(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid._1.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'keyed-node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function custom(factList, model, impl)
{
	var facts = organizeFacts(factList).facts;

	return {
		type: 'custom',
		facts: facts,
		model: model,
		impl: impl
	};
}


function map(tagger, node)
{
	return {
		type: 'tagger',
		tagger: tagger,
		node: node,
		descendantsCount: 1 + (node.descendantsCount || 0)
	};
}


function thunk(func, args, thunk)
{
	return {
		type: 'thunk',
		func: func,
		args: args,
		thunk: thunk,
		node: undefined
	};
}

function lazy(fn, a)
{
	return thunk(fn, [a], function() {
		return fn(a);
	});
}

function lazy2(fn, a, b)
{
	return thunk(fn, [a,b], function() {
		return A2(fn, a, b);
	});
}

function lazy3(fn, a, b, c)
{
	return thunk(fn, [a,b,c], function() {
		return A3(fn, a, b, c);
	});
}



// FACTS


function organizeFacts(factList)
{
	var namespace, facts = {};

	while (factList.ctor !== '[]')
	{
		var entry = factList._0;
		var key = entry.key;

		if (key === ATTR_KEY || key === ATTR_NS_KEY || key === EVENT_KEY)
		{
			var subFacts = facts[key] || {};
			subFacts[entry.realKey] = entry.value;
			facts[key] = subFacts;
		}
		else if (key === STYLE_KEY)
		{
			var styles = facts[key] || {};
			var styleList = entry.value;
			while (styleList.ctor !== '[]')
			{
				var style = styleList._0;
				styles[style._0] = style._1;
				styleList = styleList._1;
			}
			facts[key] = styles;
		}
		else if (key === 'namespace')
		{
			namespace = entry.value;
		}
		else if (key === 'className')
		{
			var classes = facts[key];
			facts[key] = typeof classes === 'undefined'
				? entry.value
				: classes + ' ' + entry.value;
		}
 		else
		{
			facts[key] = entry.value;
		}
		factList = factList._1;
	}

	return {
		facts: facts,
		namespace: namespace
	};
}



////////////  PROPERTIES AND ATTRIBUTES  ////////////


function style(value)
{
	return {
		key: STYLE_KEY,
		value: value
	};
}


function property(key, value)
{
	return {
		key: key,
		value: value
	};
}


function attribute(key, value)
{
	return {
		key: ATTR_KEY,
		realKey: key,
		value: value
	};
}


function attributeNS(namespace, key, value)
{
	return {
		key: ATTR_NS_KEY,
		realKey: key,
		value: {
			value: value,
			namespace: namespace
		}
	};
}


function on(name, options, decoder)
{
	return {
		key: EVENT_KEY,
		realKey: name,
		value: {
			options: options,
			decoder: decoder
		}
	};
}


function equalEvents(a, b)
{
	if (a.options !== b.options)
	{
		if (a.options.stopPropagation !== b.options.stopPropagation || a.options.preventDefault !== b.options.preventDefault)
		{
			return false;
		}
	}
	return _elm_lang$core$Native_Json.equality(a.decoder, b.decoder);
}


function mapProperty(func, property)
{
	if (property.key !== EVENT_KEY)
	{
		return property;
	}
	return on(
		property.realKey,
		property.value.options,
		A2(_elm_lang$core$Json_Decode$map, func, property.value.decoder)
	);
}


////////////  RENDER  ////////////


function render(vNode, eventNode)
{
	switch (vNode.type)
	{
		case 'thunk':
			if (!vNode.node)
			{
				vNode.node = vNode.thunk();
			}
			return render(vNode.node, eventNode);

		case 'tagger':
			var subNode = vNode.node;
			var tagger = vNode.tagger;

			while (subNode.type === 'tagger')
			{
				typeof tagger !== 'object'
					? tagger = [tagger, subNode.tagger]
					: tagger.push(subNode.tagger);

				subNode = subNode.node;
			}

			var subEventRoot = { tagger: tagger, parent: eventNode };
			var domNode = render(subNode, subEventRoot);
			domNode.elm_event_node_ref = subEventRoot;
			return domNode;

		case 'text':
			return localDoc.createTextNode(vNode.text);

		case 'node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i], eventNode));
			}

			return domNode;

		case 'keyed-node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i]._1, eventNode));
			}

			return domNode;

		case 'custom':
			var domNode = vNode.impl.render(vNode.model);
			applyFacts(domNode, eventNode, vNode.facts);
			return domNode;
	}
}



////////////  APPLY FACTS  ////////////


function applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		switch (key)
		{
			case STYLE_KEY:
				applyStyles(domNode, value);
				break;

			case EVENT_KEY:
				applyEvents(domNode, eventNode, value);
				break;

			case ATTR_KEY:
				applyAttrs(domNode, value);
				break;

			case ATTR_NS_KEY:
				applyAttrsNS(domNode, value);
				break;

			case 'value':
				if (domNode[key] !== value)
				{
					domNode[key] = value;
				}
				break;

			default:
				domNode[key] = value;
				break;
		}
	}
}

function applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}

function applyEvents(domNode, eventNode, events)
{
	var allHandlers = domNode.elm_handlers || {};

	for (var key in events)
	{
		var handler = allHandlers[key];
		var value = events[key];

		if (typeof value === 'undefined')
		{
			domNode.removeEventListener(key, handler);
			allHandlers[key] = undefined;
		}
		else if (typeof handler === 'undefined')
		{
			var handler = makeEventHandler(eventNode, value);
			domNode.addEventListener(key, handler);
			allHandlers[key] = handler;
		}
		else
		{
			handler.info = value;
		}
	}

	domNode.elm_handlers = allHandlers;
}

function makeEventHandler(eventNode, info)
{
	function eventHandler(event)
	{
		var info = eventHandler.info;

		var value = A2(_elm_lang$core$Native_Json.run, info.decoder, event);

		if (value.ctor === 'Ok')
		{
			var options = info.options;
			if (options.stopPropagation)
			{
				event.stopPropagation();
			}
			if (options.preventDefault)
			{
				event.preventDefault();
			}

			var message = value._0;

			var currentEventNode = eventNode;
			while (currentEventNode)
			{
				var tagger = currentEventNode.tagger;
				if (typeof tagger === 'function')
				{
					message = tagger(message);
				}
				else
				{
					for (var i = tagger.length; i--; )
					{
						message = tagger[i](message);
					}
				}
				currentEventNode = currentEventNode.parent;
			}
		}
	};

	eventHandler.info = info;

	return eventHandler;
}

function applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		if (typeof value === 'undefined')
		{
			domNode.removeAttribute(key);
		}
		else
		{
			domNode.setAttribute(key, value);
		}
	}
}

function applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.namespace;
		var value = pair.value;

		if (typeof value === 'undefined')
		{
			domNode.removeAttributeNS(namespace, key);
		}
		else
		{
			domNode.setAttributeNS(namespace, key, value);
		}
	}
}



////////////  DIFF  ////////////


function diff(a, b)
{
	var patches = [];
	diffHelp(a, b, patches, 0);
	return patches;
}


function makePatch(type, index, data)
{
	return {
		index: index,
		type: type,
		data: data,
		domNode: undefined,
		eventNode: undefined
	};
}


function diffHelp(a, b, patches, index)
{
	if (a === b)
	{
		return;
	}

	var aType = a.type;
	var bType = b.type;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (aType !== bType)
	{
		patches.push(makePatch('p-redraw', index, b));
		return;
	}

	// Now we know that both nodes are the same type.
	switch (bType)
	{
		case 'thunk':
			var aArgs = a.args;
			var bArgs = b.args;
			var i = aArgs.length;
			var same = a.func === b.func && i === bArgs.length;
			while (same && i--)
			{
				same = aArgs[i] === bArgs[i];
			}
			if (same)
			{
				b.node = a.node;
				return;
			}
			b.node = b.thunk();
			var subPatches = [];
			diffHelp(a.node, b.node, subPatches, 0);
			if (subPatches.length > 0)
			{
				patches.push(makePatch('p-thunk', index, subPatches));
			}
			return;

		case 'tagger':
			// gather nested taggers
			var aTaggers = a.tagger;
			var bTaggers = b.tagger;
			var nesting = false;

			var aSubNode = a.node;
			while (aSubNode.type === 'tagger')
			{
				nesting = true;

				typeof aTaggers !== 'object'
					? aTaggers = [aTaggers, aSubNode.tagger]
					: aTaggers.push(aSubNode.tagger);

				aSubNode = aSubNode.node;
			}

			var bSubNode = b.node;
			while (bSubNode.type === 'tagger')
			{
				nesting = true;

				typeof bTaggers !== 'object'
					? bTaggers = [bTaggers, bSubNode.tagger]
					: bTaggers.push(bSubNode.tagger);

				bSubNode = bSubNode.node;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && aTaggers.length !== bTaggers.length)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !pairwiseRefEqual(aTaggers, bTaggers) : aTaggers !== bTaggers)
			{
				patches.push(makePatch('p-tagger', index, bTaggers));
			}

			// diff everything below the taggers
			diffHelp(aSubNode, bSubNode, patches, index + 1);
			return;

		case 'text':
			if (a.text !== b.text)
			{
				patches.push(makePatch('p-text', index, b.text));
				return;
			}

			return;

		case 'node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffChildren(a, b, patches, index);
			return;

		case 'keyed-node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffKeyedChildren(a, b, patches, index);
			return;

		case 'custom':
			if (a.impl !== b.impl)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);
			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			var patch = b.impl.diff(a,b);
			if (patch)
			{
				patches.push(makePatch('p-custom', index, patch));
				return;
			}

			return;
	}
}


// assumes the incoming arrays are the same length
function pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function diffFacts(a, b, category)
{
	var diff;

	// look for changes and removals
	for (var aKey in a)
	{
		if (aKey === STYLE_KEY || aKey === EVENT_KEY || aKey === ATTR_KEY || aKey === ATTR_NS_KEY)
		{
			var subDiff = diffFacts(a[aKey], b[aKey] || {}, aKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[aKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(aKey in b))
		{
			diff = diff || {};
			diff[aKey] =
				(typeof category === 'undefined')
					? (typeof a[aKey] === 'string' ? '' : null)
					:
				(category === STYLE_KEY)
					? ''
					:
				(category === EVENT_KEY || category === ATTR_KEY)
					? undefined
					:
				{ namespace: a[aKey].namespace, value: undefined };

			continue;
		}

		var aValue = a[aKey];
		var bValue = b[aKey];

		// reference equal, so don't worry about it
		if (aValue === bValue && aKey !== 'value'
			|| category === EVENT_KEY && equalEvents(aValue, bValue))
		{
			continue;
		}

		diff = diff || {};
		diff[aKey] = bValue;
	}

	// add new stuff
	for (var bKey in b)
	{
		if (!(bKey in a))
		{
			diff = diff || {};
			diff[bKey] = b[bKey];
		}
	}

	return diff;
}


function diffChildren(aParent, bParent, patches, rootIndex)
{
	var aChildren = aParent.children;
	var bChildren = bParent.children;

	var aLen = aChildren.length;
	var bLen = bChildren.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (aLen > bLen)
	{
		patches.push(makePatch('p-remove-last', rootIndex, aLen - bLen));
	}
	else if (aLen < bLen)
	{
		patches.push(makePatch('p-append', rootIndex, bChildren.slice(aLen)));
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	var index = rootIndex;
	var minLen = aLen < bLen ? aLen : bLen;
	for (var i = 0; i < minLen; i++)
	{
		index++;
		var aChild = aChildren[i];
		diffHelp(aChild, bChildren[i], patches, index);
		index += aChild.descendantsCount || 0;
	}
}



////////////  KEYED DIFF  ////////////


function diffKeyedChildren(aParent, bParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var aChildren = aParent.children;
	var bChildren = bParent.children;
	var aLen = aChildren.length;
	var bLen = bChildren.length;
	var aIndex = 0;
	var bIndex = 0;

	var index = rootIndex;

	while (aIndex < aLen && bIndex < bLen)
	{
		var a = aChildren[aIndex];
		var b = bChildren[bIndex];

		var aKey = a._0;
		var bKey = b._0;
		var aNode = a._1;
		var bNode = b._1;

		// check if keys match

		if (aKey === bKey)
		{
			index++;
			diffHelp(aNode, bNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex++;
			bIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var aLookAhead = aIndex + 1 < aLen;
		var bLookAhead = bIndex + 1 < bLen;

		if (aLookAhead)
		{
			var aNext = aChildren[aIndex + 1];
			var aNextKey = aNext._0;
			var aNextNode = aNext._1;
			var oldMatch = bKey === aNextKey;
		}

		if (bLookAhead)
		{
			var bNext = bChildren[bIndex + 1];
			var bNextKey = bNext._0;
			var bNextNode = bNext._1;
			var newMatch = aKey === bNextKey;
		}


		// swap a and b
		if (aLookAhead && bLookAhead && newMatch && oldMatch)
		{
			index++;
			diffHelp(aNode, bNextNode, localPatches, index);
			insertNode(changes, localPatches, aKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			removeNode(changes, localPatches, aKey, aNextNode, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		// insert b
		if (bLookAhead && newMatch)
		{
			index++;
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			diffHelp(aNode, bNextNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex += 1;
			bIndex += 2;
			continue;
		}

		// remove a
		if (aLookAhead && oldMatch)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 1;
			continue;
		}

		// remove a, insert b
		if (aLookAhead && bLookAhead && aNextKey === bNextKey)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNextNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (aIndex < aLen)
	{
		index++;
		var a = aChildren[aIndex];
		var aNode = a._1;
		removeNode(changes, localPatches, a._0, aNode, index);
		index += aNode.descendantsCount || 0;
		aIndex++;
	}

	var endInserts;
	while (bIndex < bLen)
	{
		endInserts = endInserts || [];
		var b = bChildren[bIndex];
		insertNode(changes, localPatches, b._0, b._1, undefined, endInserts);
		bIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || typeof endInserts !== 'undefined')
	{
		patches.push(makePatch('p-reorder', rootIndex, {
			patches: localPatches,
			inserts: inserts,
			endInserts: endInserts
		}));
	}
}



////////////  CHANGES FROM KEYED DIFF  ////////////


var POSTFIX = '_elmW6BL';


function insertNode(changes, localPatches, key, vnode, bIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		entry = {
			tag: 'insert',
			vnode: vnode,
			index: bIndex,
			data: undefined
		};

		inserts.push({ index: bIndex, entry: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.tag === 'remove')
	{
		inserts.push({ index: bIndex, entry: entry });

		entry.tag = 'move';
		var subPatches = [];
		diffHelp(entry.vnode, vnode, subPatches, entry.index);
		entry.index = bIndex;
		entry.data.data = {
			patches: subPatches,
			entry: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	insertNode(changes, localPatches, key + POSTFIX, vnode, bIndex, inserts);
}


function removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		var patch = makePatch('p-remove', index, undefined);
		localPatches.push(patch);

		changes[key] = {
			tag: 'remove',
			vnode: vnode,
			index: index,
			data: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.tag === 'insert')
	{
		entry.tag = 'move';
		var subPatches = [];
		diffHelp(vnode, entry.vnode, subPatches, index);

		var patch = makePatch('p-remove', index, {
			patches: subPatches,
			entry: entry
		});
		localPatches.push(patch);

		return;
	}

	// this key has already been removed or moved, a duplicate!
	removeNode(changes, localPatches, key + POSTFIX, vnode, index);
}



////////////  ADD DOM NODES  ////////////
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function addDomNodes(domNode, vNode, patches, eventNode)
{
	addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.descendantsCount, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.index;

	while (index === low)
	{
		var patchType = patch.type;

		if (patchType === 'p-thunk')
		{
			addDomNodes(domNode, vNode.node, patch.data, eventNode);
		}
		else if (patchType === 'p-reorder')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var subPatches = patch.data.patches;
			if (subPatches.length > 0)
			{
				addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 'p-remove')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var data = patch.data;
			if (typeof data !== 'undefined')
			{
				data.entry.data = domNode;
				var subPatches = data.patches;
				if (subPatches.length > 0)
				{
					addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.index) > high)
		{
			return i;
		}
	}

	switch (vNode.type)
	{
		case 'tagger':
			var subNode = vNode.node;

			while (subNode.type === "tagger")
			{
				subNode = subNode.node;
			}

			return addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);

		case 'node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j];
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'keyed-node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j]._1;
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'text':
		case 'thunk':
			throw new Error('should never traverse `text` or `thunk` nodes like this');
	}
}



////////////  APPLY PATCHES  ////////////


function applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return applyPatchesHelp(rootDomNode, patches);
}

function applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.domNode
		var newNode = applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function applyPatch(domNode, patch)
{
	switch (patch.type)
	{
		case 'p-redraw':
			return applyPatchRedraw(domNode, patch.data, patch.eventNode);

		case 'p-facts':
			applyFacts(domNode, patch.eventNode, patch.data);
			return domNode;

		case 'p-text':
			domNode.replaceData(0, domNode.length, patch.data);
			return domNode;

		case 'p-thunk':
			return applyPatchesHelp(domNode, patch.data);

		case 'p-tagger':
			if (typeof domNode.elm_event_node_ref !== 'undefined')
			{
				domNode.elm_event_node_ref.tagger = patch.data;
			}
			else
			{
				domNode.elm_event_node_ref = { tagger: patch.data, parent: patch.eventNode };
			}
			return domNode;

		case 'p-remove-last':
			var i = patch.data;
			while (i--)
			{
				domNode.removeChild(domNode.lastChild);
			}
			return domNode;

		case 'p-append':
			var newNodes = patch.data;
			for (var i = 0; i < newNodes.length; i++)
			{
				domNode.appendChild(render(newNodes[i], patch.eventNode));
			}
			return domNode;

		case 'p-remove':
			var data = patch.data;
			if (typeof data === 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.entry;
			if (typeof entry.index !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.data = applyPatchesHelp(domNode, data.patches);
			return domNode;

		case 'p-reorder':
			return applyPatchReorder(domNode, patch);

		case 'p-custom':
			var impl = patch.data;
			return impl.applyPatch(domNode, impl.data);

		default:
			throw new Error('Ran into an unknown patch!');
	}
}


function applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = render(vNode, eventNode);

	if (typeof newNode.elm_event_node_ref === 'undefined')
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function applyPatchReorder(domNode, patch)
{
	var data = patch.data;

	// remove end inserts
	var frag = applyPatchReorderEndInsertsHelp(data.endInserts, patch);

	// removals
	domNode = applyPatchesHelp(domNode, data.patches);

	// inserts
	var inserts = data.inserts;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.entry;
		var node = entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode);
		domNode.insertBefore(node, domNode.childNodes[insert.index]);
	}

	// add end inserts
	if (typeof frag !== 'undefined')
	{
		domNode.appendChild(frag);
	}

	return domNode;
}


function applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (typeof endInserts === 'undefined')
	{
		return;
	}

	var frag = localDoc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.entry;
		frag.appendChild(entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode)
		);
	}
	return frag;
}


// PROGRAMS

var program = makeProgram(checkNoFlags);
var programWithFlags = makeProgram(checkYesFlags);

function makeProgram(flagChecker)
{
	return F2(function(debugWrap, impl)
	{
		return function(flagDecoder)
		{
			return function(object, moduleName, debugMetadata)
			{
				var checker = flagChecker(flagDecoder, moduleName);
				if (typeof debugMetadata === 'undefined')
				{
					normalSetup(impl, object, moduleName, checker);
				}
				else
				{
					debugSetup(A2(debugWrap, debugMetadata, impl), object, moduleName, checker);
				}
			};
		};
	});
}

function staticProgram(vNode)
{
	var nothing = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		_elm_lang$core$Platform_Cmd$none
	);
	return A2(program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, {
		init: nothing,
		view: function() { return vNode; },
		update: F2(function() { return nothing; }),
		subscriptions: function() { return _elm_lang$core$Platform_Sub$none; }
	})();
}


// FLAG CHECKERS

function checkNoFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flags === 'undefined')
		{
			return init;
		}

		var errorMessage =
			'The `' + moduleName + '` module does not need flags.\n'
			+ 'Initialize it with no arguments and you should be all set!';

		crash(errorMessage, domNode);
	};
}

function checkYesFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flagDecoder === 'undefined')
		{
			var errorMessage =
				'Are you trying to sneak a Never value into Elm? Trickster!\n'
				+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
				+ 'Use `program` instead if you do not want flags.'

			crash(errorMessage, domNode);
		}

		var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
		if (result.ctor === 'Ok')
		{
			return init(result._0);
		}

		var errorMessage =
			'Trying to initialize the `' + moduleName + '` module with an unexpected flag.\n'
			+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
			+ result._0;

		crash(errorMessage, domNode);
	};
}

function crash(errorMessage, domNode)
{
	if (domNode)
	{
		domNode.innerHTML =
			'<div style="padding-left:1em;">'
			+ '<h2 style="font-weight:normal;"><b>Oops!</b> Something went wrong when starting your Elm program.</h2>'
			+ '<pre style="padding-left:1em;">' + errorMessage + '</pre>'
			+ '</div>';
	}

	throw new Error(errorMessage);
}


//  NORMAL SETUP

function normalSetup(impl, object, moduleName, flagChecker)
{
	object['embed'] = function embed(node, flags)
	{
		while (node.lastChild)
		{
			node.removeChild(node.lastChild);
		}

		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update,
			impl.subscriptions,
			normalRenderer(node, impl.view)
		);
	};

	object['fullscreen'] = function fullscreen(flags)
	{
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update,
			impl.subscriptions,
			normalRenderer(document.body, impl.view)
		);
	};
}

function normalRenderer(parentNode, view)
{
	return function(tagger, initialModel)
	{
		var eventNode = { tagger: tagger, parent: undefined };
		var initialVirtualNode = view(initialModel);
		var domNode = render(initialVirtualNode, eventNode);
		parentNode.appendChild(domNode);
		return makeStepper(domNode, view, initialVirtualNode, eventNode);
	};
}


// STEPPER

var rAF =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { setTimeout(callback, 1000 / 60); };

function makeStepper(domNode, view, initialVirtualNode, eventNode)
{
	var state = 'NO_REQUEST';
	var currNode = initialVirtualNode;
	var nextModel;

	function updateIfNeeded()
	{
		switch (state)
		{
			case 'NO_REQUEST':
				throw new Error(
					'Unexpected draw callback.\n' +
					'Please report this to <https://github.com/elm-lang/virtual-dom/issues>.'
				);

			case 'PENDING_REQUEST':
				rAF(updateIfNeeded);
				state = 'EXTRA_REQUEST';

				var nextNode = view(nextModel);
				var patches = diff(currNode, nextNode);
				domNode = applyPatches(domNode, currNode, patches, eventNode);
				currNode = nextNode;

				return;

			case 'EXTRA_REQUEST':
				state = 'NO_REQUEST';
				return;
		}
	}

	return function stepper(model)
	{
		if (state === 'NO_REQUEST')
		{
			rAF(updateIfNeeded);
		}
		state = 'PENDING_REQUEST';
		nextModel = model;
	};
}


// DEBUG SETUP

function debugSetup(impl, object, moduleName, flagChecker)
{
	object['fullscreen'] = function fullscreen(flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, document.body, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};

	object['embed'] = function fullscreen(node, flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, node, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};
}

function scrollTask(popoutRef)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var doc = popoutRef.doc;
		if (doc)
		{
			var msgs = doc.getElementsByClassName('debugger-sidebar-messages')[0];
			if (msgs)
			{
				msgs.scrollTop = msgs.scrollHeight;
			}
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}


function debugRenderer(moduleName, parentNode, popoutRef, view, viewIn, viewOut)
{
	return function(tagger, initialModel)
	{
		var appEventNode = { tagger: tagger, parent: undefined };
		var eventNode = { tagger: tagger, parent: undefined };

		// make normal stepper
		var appVirtualNode = view(initialModel);
		var appNode = render(appVirtualNode, appEventNode);
		parentNode.appendChild(appNode);
		var appStepper = makeStepper(appNode, view, appVirtualNode, appEventNode);

		// make overlay stepper
		var overVirtualNode = viewIn(initialModel)._1;
		var overNode = render(overVirtualNode, eventNode);
		parentNode.appendChild(overNode);
		var wrappedViewIn = wrapViewIn(appEventNode, overNode, viewIn);
		var overStepper = makeStepper(overNode, wrappedViewIn, overVirtualNode, eventNode);

		// make debugger stepper
		var debugStepper = makeDebugStepper(initialModel, viewOut, eventNode, parentNode, moduleName, popoutRef);

		return function stepper(model)
		{
			appStepper(model);
			overStepper(model);
			debugStepper(model);
		}
	};
}

function makeDebugStepper(initialModel, view, eventNode, parentNode, moduleName, popoutRef)
{
	var curr;
	var domNode;

	return function stepper(model)
	{
		if (!model.isDebuggerOpen)
		{
			return;
		}

		if (!popoutRef.doc)
		{
			curr = view(model);
			domNode = openDebugWindow(moduleName, popoutRef, curr, eventNode);
			return;
		}

		// switch to document of popout
		localDoc = popoutRef.doc;

		var next = view(model);
		var patches = diff(curr, next);
		domNode = applyPatches(domNode, curr, patches, eventNode);
		curr = next;

		// switch back to normal document
		localDoc = document;
	};
}

function openDebugWindow(moduleName, popoutRef, virtualNode, eventNode)
{
	var w = 900;
	var h = 360;
	var x = screen.width - w;
	var y = screen.height - h;
	var debugWindow = window.open('', '', 'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y);

	// switch to window document
	localDoc = debugWindow.document;

	popoutRef.doc = localDoc;
	localDoc.title = 'Debugger - ' + moduleName;
	localDoc.body.style.margin = '0';
	localDoc.body.style.padding = '0';
	var domNode = render(virtualNode, eventNode);
	localDoc.body.appendChild(domNode);

	localDoc.addEventListener('keydown', function(event) {
		if (event.metaKey && event.which === 82)
		{
			window.location.reload();
		}
		if (event.which === 38)
		{
			eventNode.tagger({ ctor: 'Up' });
			event.preventDefault();
		}
		if (event.which === 40)
		{
			eventNode.tagger({ ctor: 'Down' });
			event.preventDefault();
		}
	});

	function close()
	{
		popoutRef.doc = undefined;
		debugWindow.close();
	}
	window.addEventListener('unload', close);
	debugWindow.addEventListener('unload', function() {
		popoutRef.doc = undefined;
		window.removeEventListener('unload', close);
		eventNode.tagger({ ctor: 'Close' });
	});

	// switch back to the normal document
	localDoc = document;

	return domNode;
}


// BLOCK EVENTS

function wrapViewIn(appEventNode, overlayNode, viewIn)
{
	var ignorer = makeIgnorer(overlayNode);
	var blocking = 'Normal';
	var overflow;

	var normalTagger = appEventNode.tagger;
	var blockTagger = function() {};

	return function(model)
	{
		var tuple = viewIn(model);
		var newBlocking = tuple._0.ctor;
		appEventNode.tagger = newBlocking === 'Normal' ? normalTagger : blockTagger;
		if (blocking !== newBlocking)
		{
			traverse('removeEventListener', ignorer, blocking);
			traverse('addEventListener', ignorer, newBlocking);

			if (blocking === 'Normal')
			{
				overflow = document.body.style.overflow;
				document.body.style.overflow = 'hidden';
			}

			if (newBlocking === 'Normal')
			{
				document.body.style.overflow = overflow;
			}

			blocking = newBlocking;
		}
		return tuple._1;
	}
}

function traverse(verbEventListener, ignorer, blocking)
{
	switch(blocking)
	{
		case 'Normal':
			return;

		case 'Pause':
			return traverseHelp(verbEventListener, ignorer, mostEvents);

		case 'Message':
			return traverseHelp(verbEventListener, ignorer, allEvents);
	}
}

function traverseHelp(verbEventListener, handler, eventNames)
{
	for (var i = 0; i < eventNames.length; i++)
	{
		document.body[verbEventListener](eventNames[i], handler, true);
	}
}

function makeIgnorer(overlayNode)
{
	return function(event)
	{
		if (event.type === 'keydown' && event.metaKey && event.which === 82)
		{
			return;
		}

		var isScroll = event.type === 'scroll' || event.type === 'wheel';

		var node = event.target;
		while (node !== null)
		{
			if (node.className === 'elm-overlay-message-details' && isScroll)
			{
				return;
			}

			if (node === overlayNode && !isScroll)
			{
				return;
			}
			node = node.parentNode;
		}

		event.stopPropagation();
		event.preventDefault();
	}
}

var mostEvents = [
	'click', 'dblclick', 'mousemove',
	'mouseup', 'mousedown', 'mouseenter', 'mouseleave',
	'touchstart', 'touchend', 'touchcancel', 'touchmove',
	'pointerdown', 'pointerup', 'pointerover', 'pointerout',
	'pointerenter', 'pointerleave', 'pointermove', 'pointercancel',
	'dragstart', 'drag', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop',
	'keyup', 'keydown', 'keypress',
	'input', 'change',
	'focus', 'blur'
];

var allEvents = mostEvents.concat('wheel', 'scroll');


return {
	node: node,
	text: text,
	custom: custom,
	map: F2(map),

	on: F3(on),
	style: style,
	property: F2(property),
	attribute: F2(attribute),
	attributeNS: F3(attributeNS),
	mapProperty: F2(mapProperty),

	lazy: F2(lazy),
	lazy2: F3(lazy2),
	lazy3: F4(lazy3),
	keyedNode: F3(keyedNode),

	program: program,
	programWithFlags: programWithFlags,
	staticProgram: staticProgram
};

}();

var _elm_lang$virtual_dom$VirtualDom$programWithFlags = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.programWithFlags, _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags, impl);
};
var _elm_lang$virtual_dom$VirtualDom$program = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, impl);
};
var _elm_lang$virtual_dom$VirtualDom$keyedNode = _elm_lang$virtual_dom$Native_VirtualDom.keyedNode;
var _elm_lang$virtual_dom$VirtualDom$lazy3 = _elm_lang$virtual_dom$Native_VirtualDom.lazy3;
var _elm_lang$virtual_dom$VirtualDom$lazy2 = _elm_lang$virtual_dom$Native_VirtualDom.lazy2;
var _elm_lang$virtual_dom$VirtualDom$lazy = _elm_lang$virtual_dom$Native_VirtualDom.lazy;
var _elm_lang$virtual_dom$VirtualDom$defaultOptions = {stopPropagation: false, preventDefault: false};
var _elm_lang$virtual_dom$VirtualDom$onWithOptions = _elm_lang$virtual_dom$Native_VirtualDom.on;
var _elm_lang$virtual_dom$VirtualDom$on = F2(
	function (eventName, decoder) {
		return A3(_elm_lang$virtual_dom$VirtualDom$onWithOptions, eventName, _elm_lang$virtual_dom$VirtualDom$defaultOptions, decoder);
	});
var _elm_lang$virtual_dom$VirtualDom$style = _elm_lang$virtual_dom$Native_VirtualDom.style;
var _elm_lang$virtual_dom$VirtualDom$mapProperty = _elm_lang$virtual_dom$Native_VirtualDom.mapProperty;
var _elm_lang$virtual_dom$VirtualDom$attributeNS = _elm_lang$virtual_dom$Native_VirtualDom.attributeNS;
var _elm_lang$virtual_dom$VirtualDom$attribute = _elm_lang$virtual_dom$Native_VirtualDom.attribute;
var _elm_lang$virtual_dom$VirtualDom$property = _elm_lang$virtual_dom$Native_VirtualDom.property;
var _elm_lang$virtual_dom$VirtualDom$map = _elm_lang$virtual_dom$Native_VirtualDom.map;
var _elm_lang$virtual_dom$VirtualDom$text = _elm_lang$virtual_dom$Native_VirtualDom.text;
var _elm_lang$virtual_dom$VirtualDom$node = _elm_lang$virtual_dom$Native_VirtualDom.node;
var _elm_lang$virtual_dom$VirtualDom$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});
var _elm_lang$virtual_dom$VirtualDom$Node = {ctor: 'Node'};
var _elm_lang$virtual_dom$VirtualDom$Property = {ctor: 'Property'};

var _elm_lang$html$Html$programWithFlags = _elm_lang$virtual_dom$VirtualDom$programWithFlags;
var _elm_lang$html$Html$program = _elm_lang$virtual_dom$VirtualDom$program;
var _elm_lang$html$Html$beginnerProgram = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$html$Html$program(
		{
			init: A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_p1.model,
				{ctor: '[]'}),
			update: F2(
				function (msg, model) {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						A2(_p1.update, msg, model),
						{ctor: '[]'});
				}),
			view: _p1.view,
			subscriptions: function (_p2) {
				return _elm_lang$core$Platform_Sub$none;
			}
		});
};
var _elm_lang$html$Html$map = _elm_lang$virtual_dom$VirtualDom$map;
var _elm_lang$html$Html$text = _elm_lang$virtual_dom$VirtualDom$text;
var _elm_lang$html$Html$node = _elm_lang$virtual_dom$VirtualDom$node;
var _elm_lang$html$Html$body = _elm_lang$html$Html$node('body');
var _elm_lang$html$Html$section = _elm_lang$html$Html$node('section');
var _elm_lang$html$Html$nav = _elm_lang$html$Html$node('nav');
var _elm_lang$html$Html$article = _elm_lang$html$Html$node('article');
var _elm_lang$html$Html$aside = _elm_lang$html$Html$node('aside');
var _elm_lang$html$Html$h1 = _elm_lang$html$Html$node('h1');
var _elm_lang$html$Html$h2 = _elm_lang$html$Html$node('h2');
var _elm_lang$html$Html$h3 = _elm_lang$html$Html$node('h3');
var _elm_lang$html$Html$h4 = _elm_lang$html$Html$node('h4');
var _elm_lang$html$Html$h5 = _elm_lang$html$Html$node('h5');
var _elm_lang$html$Html$h6 = _elm_lang$html$Html$node('h6');
var _elm_lang$html$Html$header = _elm_lang$html$Html$node('header');
var _elm_lang$html$Html$footer = _elm_lang$html$Html$node('footer');
var _elm_lang$html$Html$address = _elm_lang$html$Html$node('address');
var _elm_lang$html$Html$main_ = _elm_lang$html$Html$node('main');
var _elm_lang$html$Html$p = _elm_lang$html$Html$node('p');
var _elm_lang$html$Html$hr = _elm_lang$html$Html$node('hr');
var _elm_lang$html$Html$pre = _elm_lang$html$Html$node('pre');
var _elm_lang$html$Html$blockquote = _elm_lang$html$Html$node('blockquote');
var _elm_lang$html$Html$ol = _elm_lang$html$Html$node('ol');
var _elm_lang$html$Html$ul = _elm_lang$html$Html$node('ul');
var _elm_lang$html$Html$li = _elm_lang$html$Html$node('li');
var _elm_lang$html$Html$dl = _elm_lang$html$Html$node('dl');
var _elm_lang$html$Html$dt = _elm_lang$html$Html$node('dt');
var _elm_lang$html$Html$dd = _elm_lang$html$Html$node('dd');
var _elm_lang$html$Html$figure = _elm_lang$html$Html$node('figure');
var _elm_lang$html$Html$figcaption = _elm_lang$html$Html$node('figcaption');
var _elm_lang$html$Html$div = _elm_lang$html$Html$node('div');
var _elm_lang$html$Html$a = _elm_lang$html$Html$node('a');
var _elm_lang$html$Html$em = _elm_lang$html$Html$node('em');
var _elm_lang$html$Html$strong = _elm_lang$html$Html$node('strong');
var _elm_lang$html$Html$small = _elm_lang$html$Html$node('small');
var _elm_lang$html$Html$s = _elm_lang$html$Html$node('s');
var _elm_lang$html$Html$cite = _elm_lang$html$Html$node('cite');
var _elm_lang$html$Html$q = _elm_lang$html$Html$node('q');
var _elm_lang$html$Html$dfn = _elm_lang$html$Html$node('dfn');
var _elm_lang$html$Html$abbr = _elm_lang$html$Html$node('abbr');
var _elm_lang$html$Html$time = _elm_lang$html$Html$node('time');
var _elm_lang$html$Html$code = _elm_lang$html$Html$node('code');
var _elm_lang$html$Html$var = _elm_lang$html$Html$node('var');
var _elm_lang$html$Html$samp = _elm_lang$html$Html$node('samp');
var _elm_lang$html$Html$kbd = _elm_lang$html$Html$node('kbd');
var _elm_lang$html$Html$sub = _elm_lang$html$Html$node('sub');
var _elm_lang$html$Html$sup = _elm_lang$html$Html$node('sup');
var _elm_lang$html$Html$i = _elm_lang$html$Html$node('i');
var _elm_lang$html$Html$b = _elm_lang$html$Html$node('b');
var _elm_lang$html$Html$u = _elm_lang$html$Html$node('u');
var _elm_lang$html$Html$mark = _elm_lang$html$Html$node('mark');
var _elm_lang$html$Html$ruby = _elm_lang$html$Html$node('ruby');
var _elm_lang$html$Html$rt = _elm_lang$html$Html$node('rt');
var _elm_lang$html$Html$rp = _elm_lang$html$Html$node('rp');
var _elm_lang$html$Html$bdi = _elm_lang$html$Html$node('bdi');
var _elm_lang$html$Html$bdo = _elm_lang$html$Html$node('bdo');
var _elm_lang$html$Html$span = _elm_lang$html$Html$node('span');
var _elm_lang$html$Html$br = _elm_lang$html$Html$node('br');
var _elm_lang$html$Html$wbr = _elm_lang$html$Html$node('wbr');
var _elm_lang$html$Html$ins = _elm_lang$html$Html$node('ins');
var _elm_lang$html$Html$del = _elm_lang$html$Html$node('del');
var _elm_lang$html$Html$img = _elm_lang$html$Html$node('img');
var _elm_lang$html$Html$iframe = _elm_lang$html$Html$node('iframe');
var _elm_lang$html$Html$embed = _elm_lang$html$Html$node('embed');
var _elm_lang$html$Html$object = _elm_lang$html$Html$node('object');
var _elm_lang$html$Html$param = _elm_lang$html$Html$node('param');
var _elm_lang$html$Html$video = _elm_lang$html$Html$node('video');
var _elm_lang$html$Html$audio = _elm_lang$html$Html$node('audio');
var _elm_lang$html$Html$source = _elm_lang$html$Html$node('source');
var _elm_lang$html$Html$track = _elm_lang$html$Html$node('track');
var _elm_lang$html$Html$canvas = _elm_lang$html$Html$node('canvas');
var _elm_lang$html$Html$math = _elm_lang$html$Html$node('math');
var _elm_lang$html$Html$table = _elm_lang$html$Html$node('table');
var _elm_lang$html$Html$caption = _elm_lang$html$Html$node('caption');
var _elm_lang$html$Html$colgroup = _elm_lang$html$Html$node('colgroup');
var _elm_lang$html$Html$col = _elm_lang$html$Html$node('col');
var _elm_lang$html$Html$tbody = _elm_lang$html$Html$node('tbody');
var _elm_lang$html$Html$thead = _elm_lang$html$Html$node('thead');
var _elm_lang$html$Html$tfoot = _elm_lang$html$Html$node('tfoot');
var _elm_lang$html$Html$tr = _elm_lang$html$Html$node('tr');
var _elm_lang$html$Html$td = _elm_lang$html$Html$node('td');
var _elm_lang$html$Html$th = _elm_lang$html$Html$node('th');
var _elm_lang$html$Html$form = _elm_lang$html$Html$node('form');
var _elm_lang$html$Html$fieldset = _elm_lang$html$Html$node('fieldset');
var _elm_lang$html$Html$legend = _elm_lang$html$Html$node('legend');
var _elm_lang$html$Html$label = _elm_lang$html$Html$node('label');
var _elm_lang$html$Html$input = _elm_lang$html$Html$node('input');
var _elm_lang$html$Html$button = _elm_lang$html$Html$node('button');
var _elm_lang$html$Html$select = _elm_lang$html$Html$node('select');
var _elm_lang$html$Html$datalist = _elm_lang$html$Html$node('datalist');
var _elm_lang$html$Html$optgroup = _elm_lang$html$Html$node('optgroup');
var _elm_lang$html$Html$option = _elm_lang$html$Html$node('option');
var _elm_lang$html$Html$textarea = _elm_lang$html$Html$node('textarea');
var _elm_lang$html$Html$keygen = _elm_lang$html$Html$node('keygen');
var _elm_lang$html$Html$output = _elm_lang$html$Html$node('output');
var _elm_lang$html$Html$progress = _elm_lang$html$Html$node('progress');
var _elm_lang$html$Html$meter = _elm_lang$html$Html$node('meter');
var _elm_lang$html$Html$details = _elm_lang$html$Html$node('details');
var _elm_lang$html$Html$summary = _elm_lang$html$Html$node('summary');
var _elm_lang$html$Html$menuitem = _elm_lang$html$Html$node('menuitem');
var _elm_lang$html$Html$menu = _elm_lang$html$Html$node('menu');

var _elm_lang$dom$Native_Dom = function() {

var fakeNode = {
	addEventListener: function() {},
	removeEventListener: function() {}
};

var onDocument = on(typeof document !== 'undefined' ? document : fakeNode);
var onWindow = on(typeof window !== 'undefined' ? window : fakeNode);

function on(node)
{
	return function(eventName, decoder, toTask)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {

			function performTask(event)
			{
				var result = A2(_elm_lang$core$Json_Decode$decodeValue, decoder, event);
				if (result.ctor === 'Ok')
				{
					_elm_lang$core$Native_Scheduler.rawSpawn(toTask(result._0));
				}
			}

			node.addEventListener(eventName, performTask);

			return function()
			{
				node.removeEventListener(eventName, performTask);
			};
		});
	};
}

var rAF = typeof requestAnimationFrame !== 'undefined'
	? requestAnimationFrame
	: function(callback) { callback(); };

function withNode(id, doStuff)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		rAF(function()
		{
			var node = document.getElementById(id);
			if (node === null)
			{
				callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'NotFound', _0: id }));
				return;
			}
			callback(_elm_lang$core$Native_Scheduler.succeed(doStuff(node)));
		});
	});
}


// FOCUS

function focus(id)
{
	return withNode(id, function(node) {
		node.focus();
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function blur(id)
{
	return withNode(id, function(node) {
		node.blur();
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}


// SCROLLING

function getScrollTop(id)
{
	return withNode(id, function(node) {
		return node.scrollTop;
	});
}

function setScrollTop(id, desiredScrollTop)
{
	return withNode(id, function(node) {
		node.scrollTop = desiredScrollTop;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function toBottom(id)
{
	return withNode(id, function(node) {
		node.scrollTop = node.scrollHeight;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function getScrollLeft(id)
{
	return withNode(id, function(node) {
		return node.scrollLeft;
	});
}

function setScrollLeft(id, desiredScrollLeft)
{
	return withNode(id, function(node) {
		node.scrollLeft = desiredScrollLeft;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function toRight(id)
{
	return withNode(id, function(node) {
		node.scrollLeft = node.scrollWidth;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}


// SIZE

function width(options, id)
{
	return withNode(id, function(node) {
		switch (options.ctor)
		{
			case 'Content':
				return node.scrollWidth;
			case 'VisibleContent':
				return node.clientWidth;
			case 'VisibleContentWithBorders':
				return node.offsetWidth;
			case 'VisibleContentWithBordersAndMargins':
				var rect = node.getBoundingClientRect();
				return rect.right - rect.left;
		}
	});
}

function height(options, id)
{
	return withNode(id, function(node) {
		switch (options.ctor)
		{
			case 'Content':
				return node.scrollHeight;
			case 'VisibleContent':
				return node.clientHeight;
			case 'VisibleContentWithBorders':
				return node.offsetHeight;
			case 'VisibleContentWithBordersAndMargins':
				var rect = node.getBoundingClientRect();
				return rect.bottom - rect.top;
		}
	});
}

return {
	onDocument: F3(onDocument),
	onWindow: F3(onWindow),

	focus: focus,
	blur: blur,

	getScrollTop: getScrollTop,
	setScrollTop: F2(setScrollTop),
	getScrollLeft: getScrollLeft,
	setScrollLeft: F2(setScrollLeft),
	toBottom: toBottom,
	toRight: toRight,

	height: F2(height),
	width: F2(width)
};

}();

var _elm_lang$dom$Dom_LowLevel$onWindow = _elm_lang$dom$Native_Dom.onWindow;
var _elm_lang$dom$Dom_LowLevel$onDocument = _elm_lang$dom$Native_Dom.onDocument;

var _concourse$atc$Native_Scroll = function() {
  function toBottom(id) {
    return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
      var ele = document.getElementById(id);
      ele.scrollTop = ele.scrollHeight - ele.clientHeight;
      callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
    });
  }

  function toWindowTop() {
    return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
      window.scrollTo(0, 0);
      callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
    });
  }

  function toWindowBottom() {
    return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
      window.scrollTo(0, document.body.scrollHeight);
      callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
    });
  }

  function scrollElement(id, delta) {
    return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
      document.getElementById(id).scrollLeft -= delta;
      callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
    });
  }

  function scrollIntoView(selector) {
    return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
      document.querySelector(selector).scrollIntoView();
      callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
    });
  }

  function scrollUp() {
    return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
      window.scrollBy(0, -60);
      callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
    });
  }

  function scrollDown() {
    return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
      window.scrollBy(0, 60);
      callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
    });
  }

  return {
    toBottom: toBottom,
    toWindowTop: toWindowTop,
    toWindowBottom: toWindowBottom,
    scrollElement: F2(scrollElement),
    scrollIntoView: scrollIntoView,
    scrollUp: scrollUp,
    scrollDown: scrollDown
  };
}();

var _concourse$atc$Scroll$customDecoder = F2(
	function (decoder, toResult) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			function (a) {
				var _p0 = toResult(a);
				if (_p0.ctor === 'Ok') {
					return _elm_lang$core$Json_Decode$succeed(_p0._0);
				} else {
					return _elm_lang$core$Json_Decode$fail(_p0._0);
				}
			},
			decoder);
	});
var _concourse$atc$Scroll$onSelfMsg = F3(
	function (router, fb, state) {
		var _p1 = state;
		if (_p1.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
		} else {
			var send = function (_p2) {
				var _p3 = _p2;
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					_p3._0(fb));
			};
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p4) {
					return _elm_lang$core$Task$succeed(state);
				},
				_elm_lang$core$Task$sequence(
					A2(_elm_lang$core$List$map, send, _p1._0.subs)));
		}
	});
var _concourse$atc$Scroll$init = _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
var _concourse$atc$Scroll$scrollDown = _concourse$atc$Native_Scroll.scrollDown(
	{ctor: '_Tuple0'});
var _concourse$atc$Scroll$scrollUp = _concourse$atc$Native_Scroll.scrollUp(
	{ctor: '_Tuple0'});
var _concourse$atc$Scroll$scrollIntoView = _concourse$atc$Native_Scroll.scrollIntoView;
var _concourse$atc$Scroll$scroll = _concourse$atc$Native_Scroll.scrollElement;
var _concourse$atc$Scroll$toWindowBottom = _concourse$atc$Native_Scroll.toWindowBottom(
	{ctor: '_Tuple0'});
var _concourse$atc$Scroll$toWindowTop = _concourse$atc$Native_Scroll.toWindowTop(
	{ctor: '_Tuple0'});
var _concourse$atc$Scroll$toBottom = _concourse$atc$Native_Scroll.toBottom;
var _concourse$atc$Scroll$decodeComparators = A4(
	_elm_lang$core$Json_Decode$map3,
	F3(
		function (v0, v1, v2) {
			return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
		}),
	A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'currentTarget',
			_1: {
				ctor: '::',
				_0: 'pageYOffset',
				_1: {ctor: '[]'}
			}
		},
		_elm_lang$core$Json_Decode$int),
	A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'target',
			_1: {
				ctor: '::',
				_0: 'documentElement',
				_1: {
					ctor: '::',
					_0: 'clientHeight',
					_1: {ctor: '[]'}
				}
			}
		},
		_elm_lang$core$Json_Decode$int),
	A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'target',
			_1: {
				ctor: '::',
				_0: 'documentElement',
				_1: {
					ctor: '::',
					_0: 'scrollHeight',
					_1: {ctor: '[]'}
				}
			}
		},
		_elm_lang$core$Json_Decode$int));
var _concourse$atc$Scroll$decodeFromBottom = A2(
	_concourse$atc$Scroll$customDecoder,
	_concourse$atc$Scroll$decodeComparators,
	function (_p5) {
		var _p6 = _p5;
		var scrolledHeight = _p6._0 + _p6._1;
		return _elm_lang$core$Result$Ok(_p6._2 - scrolledHeight);
	});
var _concourse$atc$Scroll$onEffects = F3(
	function (router, newSubs, state) {
		var _p7 = {ctor: '_Tuple2', _0: state, _1: newSubs};
		if (_p7._0.ctor === 'Nothing') {
			if (_p7._1.ctor === '[]') {
				return _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
			} else {
				return A2(
					_elm_lang$core$Task$andThen,
					function (watcher) {
						return _elm_lang$core$Task$succeed(
							_elm_lang$core$Maybe$Just(
								{subs: newSubs, watcher: watcher}));
					},
					_elm_lang$core$Process$spawn(
						A3(
							_elm_lang$dom$Dom_LowLevel$onWindow,
							'scroll',
							_concourse$atc$Scroll$decodeFromBottom,
							_elm_lang$core$Platform$sendToSelf(router))));
			}
		} else {
			if (_p7._1.ctor === '[]') {
				return A2(
					_elm_lang$core$Task$andThen,
					function (_p8) {
						return _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
					},
					_elm_lang$core$Process$kill(_p7._0._0.watcher));
			} else {
				return _elm_lang$core$Task$succeed(
					_elm_lang$core$Maybe$Just(
						_elm_lang$core$Native_Utils.update(
							_p7._0._0,
							{subs: newSubs})));
			}
		}
	});
var _concourse$atc$Scroll$subscription = _elm_lang$core$Native_Platform.leaf('Scroll');
var _concourse$atc$Scroll$MySub = function (a) {
	return {ctor: 'MySub', _0: a};
};
var _concourse$atc$Scroll$fromWindowBottom = function (tagger) {
	return _concourse$atc$Scroll$subscription(
		_concourse$atc$Scroll$MySub(tagger));
};
var _concourse$atc$Scroll$subMap = F2(
	function (func, _p9) {
		var _p10 = _p9;
		return _concourse$atc$Scroll$MySub(
			function (_p11) {
				return func(
					_p10._0(_p11));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Scroll'] = {pkg: 'concourse/atc', init: _concourse$atc$Scroll$init, onEffects: _concourse$atc$Scroll$onEffects, onSelfMsg: _concourse$atc$Scroll$onSelfMsg, tag: 'sub', subMap: _concourse$atc$Scroll$subMap};

var _concourse$atc$UpdateMsg$NotFound = {ctor: 'NotFound'};

var _concourse$atc$Autoscroll$Model = F2(
	function (a, b) {
		return {subModel: a, scrollBehaviorFunc: b};
	});
var _concourse$atc$Autoscroll$NoScroll = {ctor: 'NoScroll'};
var _concourse$atc$Autoscroll$ScrollWindow = {ctor: 'ScrollWindow'};
var _concourse$atc$Autoscroll$ScrollElement = function (a) {
	return {ctor: 'ScrollElement', _0: a};
};
var _concourse$atc$Autoscroll$ScrolledDown = {ctor: 'ScrolledDown'};
var _concourse$atc$Autoscroll$scrollToBottom = function (ele) {
	return A2(
		_elm_lang$core$Task$perform,
		_elm_lang$core$Basics$always(_concourse$atc$Autoscroll$ScrolledDown),
		_concourse$atc$Scroll$toBottom(ele));
};
var _concourse$atc$Autoscroll$scrollToWindowBottom = A2(
	_elm_lang$core$Task$perform,
	_elm_lang$core$Basics$always(_concourse$atc$Autoscroll$ScrolledDown),
	_concourse$atc$Scroll$toWindowBottom);
var _concourse$atc$Autoscroll$ScrollDown = {ctor: 'ScrollDown'};
var _concourse$atc$Autoscroll$SubMsg = function (a) {
	return {ctor: 'SubMsg', _0: a};
};
var _concourse$atc$Autoscroll$init = F2(
	function (toScrollMsg, _p0) {
		var _p1 = _p0;
		return {
			ctor: '_Tuple2',
			_0: A2(_concourse$atc$Autoscroll$Model, _p1._0, toScrollMsg),
			_1: A2(_elm_lang$core$Platform_Cmd$map, _concourse$atc$Autoscroll$SubMsg, _p1._1)
		};
	});
var _concourse$atc$Autoscroll$update = F3(
	function (subUpdate, action, model) {
		var _p2 = action;
		switch (_p2.ctor) {
			case 'SubMsg':
				var _p3 = A2(subUpdate, _p2._0, model.subModel);
				var subModel = _p3._0;
				var subCmd = _p3._1;
				var subUpdateMsg = _p3._2;
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{subModel: subModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _concourse$atc$Autoscroll$SubMsg, subCmd),
					_2: subUpdateMsg
				};
			case 'ScrollDown':
				return {
					ctor: '_Tuple3',
					_0: model,
					_1: function () {
						var _p4 = model.scrollBehaviorFunc(model.subModel);
						switch (_p4.ctor) {
							case 'ScrollElement':
								return _concourse$atc$Autoscroll$scrollToBottom(_p4._0);
							case 'ScrollWindow':
								return _concourse$atc$Autoscroll$scrollToWindowBottom;
							default:
								return _elm_lang$core$Platform_Cmd$none;
						}
					}(),
					_2: _elm_lang$core$Maybe$Nothing
				};
			default:
				return {ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _elm_lang$core$Maybe$Nothing};
		}
	});
var _concourse$atc$Autoscroll$urlUpdate = F3(
	function (subUrlUpdate, pageResult, model) {
		var _p5 = A2(subUrlUpdate, pageResult, model.subModel);
		var newSubModel = _p5._0;
		var subMsg = _p5._1;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{subModel: newSubModel}),
			_1: A2(_elm_lang$core$Platform_Cmd$map, _concourse$atc$Autoscroll$SubMsg, subMsg)
		};
	});
var _concourse$atc$Autoscroll$view = F2(
	function (subView, model) {
		return A2(
			_elm_lang$html$Html$map,
			_concourse$atc$Autoscroll$SubMsg,
			subView(model.subModel));
	});
var _concourse$atc$Autoscroll$subscriptions = F2(
	function (subSubscriptions, model) {
		var subSubs = A2(
			_elm_lang$core$Platform_Sub$map,
			_concourse$atc$Autoscroll$SubMsg,
			subSubscriptions(model.subModel));
		return (!_elm_lang$core$Native_Utils.eq(
			model.scrollBehaviorFunc(model.subModel),
			_concourse$atc$Autoscroll$NoScroll)) ? _elm_lang$core$Platform_Sub$batch(
			{
				ctor: '::',
				_0: _elm_lang$animation_frame$AnimationFrame$times(
					_elm_lang$core$Basics$always(_concourse$atc$Autoscroll$ScrollDown)),
				_1: {
					ctor: '::',
					_0: subSubs,
					_1: {ctor: '[]'}
				}
			}) : subSubs;
	});

//import Result //

var _elm_lang$core$Native_Date = function() {

function fromString(str)
{
	var date = new Date(str);
	return isNaN(date.getTime())
		? _elm_lang$core$Result$Err('Unable to parse \'' + str + '\' as a date. Dates must be in the ISO 8601 format.')
		: _elm_lang$core$Result$Ok(date);
}

var dayTable = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
var monthTable =
	['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
	 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];


return {
	fromString: fromString,
	year: function(d) { return d.getFullYear(); },
	month: function(d) { return { ctor: monthTable[d.getMonth()] }; },
	day: function(d) { return d.getDate(); },
	hour: function(d) { return d.getHours(); },
	minute: function(d) { return d.getMinutes(); },
	second: function(d) { return d.getSeconds(); },
	millisecond: function(d) { return d.getMilliseconds(); },
	toTime: function(d) { return d.getTime(); },
	fromTime: function(t) { return new Date(t); },
	dayOfWeek: function(d) { return { ctor: dayTable[d.getDay()] }; }
};

}();
var _elm_lang$core$Date$millisecond = _elm_lang$core$Native_Date.millisecond;
var _elm_lang$core$Date$second = _elm_lang$core$Native_Date.second;
var _elm_lang$core$Date$minute = _elm_lang$core$Native_Date.minute;
var _elm_lang$core$Date$hour = _elm_lang$core$Native_Date.hour;
var _elm_lang$core$Date$dayOfWeek = _elm_lang$core$Native_Date.dayOfWeek;
var _elm_lang$core$Date$day = _elm_lang$core$Native_Date.day;
var _elm_lang$core$Date$month = _elm_lang$core$Native_Date.month;
var _elm_lang$core$Date$year = _elm_lang$core$Native_Date.year;
var _elm_lang$core$Date$fromTime = _elm_lang$core$Native_Date.fromTime;
var _elm_lang$core$Date$toTime = _elm_lang$core$Native_Date.toTime;
var _elm_lang$core$Date$fromString = _elm_lang$core$Native_Date.fromString;
var _elm_lang$core$Date$now = A2(_elm_lang$core$Task$map, _elm_lang$core$Date$fromTime, _elm_lang$core$Time$now);
var _elm_lang$core$Date$Date = {ctor: 'Date'};
var _elm_lang$core$Date$Sun = {ctor: 'Sun'};
var _elm_lang$core$Date$Sat = {ctor: 'Sat'};
var _elm_lang$core$Date$Fri = {ctor: 'Fri'};
var _elm_lang$core$Date$Thu = {ctor: 'Thu'};
var _elm_lang$core$Date$Wed = {ctor: 'Wed'};
var _elm_lang$core$Date$Tue = {ctor: 'Tue'};
var _elm_lang$core$Date$Mon = {ctor: 'Mon'};
var _elm_lang$core$Date$Dec = {ctor: 'Dec'};
var _elm_lang$core$Date$Nov = {ctor: 'Nov'};
var _elm_lang$core$Date$Oct = {ctor: 'Oct'};
var _elm_lang$core$Date$Sep = {ctor: 'Sep'};
var _elm_lang$core$Date$Aug = {ctor: 'Aug'};
var _elm_lang$core$Date$Jul = {ctor: 'Jul'};
var _elm_lang$core$Date$Jun = {ctor: 'Jun'};
var _elm_lang$core$Date$May = {ctor: 'May'};
var _elm_lang$core$Date$Apr = {ctor: 'Apr'};
var _elm_lang$core$Date$Mar = {ctor: 'Mar'};
var _elm_lang$core$Date$Feb = {ctor: 'Feb'};
var _elm_lang$core$Date$Jan = {ctor: 'Jan'};

var _mgold$elm_date_format$Date_Local$french = {
	date: {
		months: {jan: 'Janvier', feb: 'Février', mar: 'Mars', apr: 'Avril', may: 'Mai', jun: 'Juin', jul: 'Juillet', aug: 'Août', sep: 'Septembre', oct: 'Octobre', nov: 'Novembre', dec: 'Décembre'},
		monthsAbbrev: {jan: 'Jan', feb: 'Fév', mar: 'Mar', apr: 'Avr', may: 'Mai', jun: 'Jui', jul: 'Jul', aug: 'Aoû', sep: 'Sep', oct: 'Oct', nov: 'Nov', dec: 'Déc'},
		wdays: {mon: 'Lundi', tue: 'Mardi', wed: 'Mercredi', thu: 'Jeudi', fri: 'Vendredi', sat: 'Samedi', sun: 'Dimanche'},
		wdaysAbbrev: {mon: 'Lun', tue: 'Mar', wed: 'Mer', thu: 'Jeu', fri: 'Ven', sat: 'Sam', sun: 'Dim'},
		defaultFormat: _elm_lang$core$Maybe$Nothing
	},
	time: {am: 'am', pm: 'pm', defaultFormat: _elm_lang$core$Maybe$Nothing},
	timeZones: _elm_lang$core$Maybe$Nothing,
	defaultFormat: _elm_lang$core$Maybe$Nothing
};
var _mgold$elm_date_format$Date_Local$international = {
	date: {
		months: {jan: 'January', feb: 'February', mar: 'March', apr: 'April', may: 'May', jun: 'June', jul: 'July', aug: 'August', sep: 'September', oct: 'October', nov: 'November', dec: 'December'},
		monthsAbbrev: {jan: 'Jan', feb: 'Feb', mar: 'Mar', apr: 'Apr', may: 'May', jun: 'Jun', jul: 'Jul', aug: 'Aug', sep: 'Sep', oct: 'Oct', nov: 'Nov', dec: 'Dec'},
		wdays: {mon: 'Monday', tue: 'Tuesday', wed: 'Wednesday', thu: 'Thursday', fri: 'Friday', sat: 'Saturday', sun: 'Sunday'},
		wdaysAbbrev: {mon: 'Mon', tue: 'Tue', wed: 'Wed', thu: 'Thu', fri: 'Fri', sat: 'Sat', sun: 'Sun'},
		defaultFormat: _elm_lang$core$Maybe$Nothing
	},
	time: {am: 'am', pm: 'pm', defaultFormat: _elm_lang$core$Maybe$Nothing},
	timeZones: _elm_lang$core$Maybe$Nothing,
	defaultFormat: _elm_lang$core$Maybe$Nothing
};
var _mgold$elm_date_format$Date_Local$Local = F4(
	function (a, b, c, d) {
		return {date: a, time: b, timeZones: c, defaultFormat: d};
	});
var _mgold$elm_date_format$Date_Local$Months = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return {jan: a, feb: b, mar: c, apr: d, may: e, jun: f, jul: g, aug: h, sep: i, oct: j, nov: k, dec: l};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _mgold$elm_date_format$Date_Local$WeekDays = F7(
	function (a, b, c, d, e, f, g) {
		return {mon: a, tue: b, wed: c, thu: d, fri: e, sat: f, sun: g};
	});

var _mgold$elm_date_format$Date_Format$padWith = function (padding) {
	var padder = function () {
		var _p0 = padding;
		switch (_p0.ctor) {
			case 'NoPadding':
				return _elm_lang$core$Basics$identity;
			case 'Zero':
				return A2(
					_elm_lang$core$String$padLeft,
					2,
					_elm_lang$core$Native_Utils.chr('0'));
			case 'ZeroThreeDigits':
				return A2(
					_elm_lang$core$String$padLeft,
					3,
					_elm_lang$core$Native_Utils.chr('0'));
			default:
				return A2(
					_elm_lang$core$String$padLeft,
					2,
					_elm_lang$core$Native_Utils.chr(' '));
		}
	}();
	return function (_p1) {
		return padder(
			_elm_lang$core$Basics$toString(_p1));
	};
};
var _mgold$elm_date_format$Date_Format$zero2twelve = function (n) {
	return _elm_lang$core$Native_Utils.eq(n, 0) ? 12 : n;
};
var _mgold$elm_date_format$Date_Format$mod12 = function (h) {
	return A2(_elm_lang$core$Basics_ops['%'], h, 12);
};
var _mgold$elm_date_format$Date_Format$dayOfWeekToWord = F2(
	function (loc, dow) {
		var _p2 = dow;
		switch (_p2.ctor) {
			case 'Mon':
				return loc.mon;
			case 'Tue':
				return loc.tue;
			case 'Wed':
				return loc.wed;
			case 'Thu':
				return loc.thu;
			case 'Fri':
				return loc.fri;
			case 'Sat':
				return loc.sat;
			default:
				return loc.sun;
		}
	});
var _mgold$elm_date_format$Date_Format$monthToWord = F2(
	function (loc, m) {
		var _p3 = m;
		switch (_p3.ctor) {
			case 'Jan':
				return loc.jan;
			case 'Feb':
				return loc.feb;
			case 'Mar':
				return loc.mar;
			case 'Apr':
				return loc.apr;
			case 'May':
				return loc.may;
			case 'Jun':
				return loc.jun;
			case 'Jul':
				return loc.jul;
			case 'Aug':
				return loc.aug;
			case 'Sep':
				return loc.sep;
			case 'Oct':
				return loc.oct;
			case 'Nov':
				return loc.nov;
			default:
				return loc.dec;
		}
	});
var _mgold$elm_date_format$Date_Format$monthToInt = function (m) {
	var _p4 = m;
	switch (_p4.ctor) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var _mgold$elm_date_format$Date_Format$re = _elm_lang$core$Regex$regex('%(_|-|0)?(%|Y|y|m|B|b|d|e|a|A|H|k|I|l|L|p|P|M|S)');
var _mgold$elm_date_format$Date_Format$ZeroThreeDigits = {ctor: 'ZeroThreeDigits'};
var _mgold$elm_date_format$Date_Format$Zero = {ctor: 'Zero'};
var _mgold$elm_date_format$Date_Format$Space = {ctor: 'Space'};
var _mgold$elm_date_format$Date_Format$NoPadding = {ctor: 'NoPadding'};
var _mgold$elm_date_format$Date_Format$formatToken = F3(
	function (loc, d, m) {
		var _p5 = function () {
			var _p6 = m.submatches;
			_v4_4:
			do {
				if (_p6.ctor === '::') {
					if (_p6._0.ctor === 'Just') {
						if (((_p6._1.ctor === '::') && (_p6._1._0.ctor === 'Just')) && (_p6._1._1.ctor === '[]')) {
							switch (_p6._0._0) {
								case '-':
									return {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Maybe$Just(_mgold$elm_date_format$Date_Format$NoPadding),
										_1: _p6._1._0._0
									};
								case '_':
									return {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Maybe$Just(_mgold$elm_date_format$Date_Format$Space),
										_1: _p6._1._0._0
									};
								case '0':
									return {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Maybe$Just(_mgold$elm_date_format$Date_Format$Zero),
										_1: _p6._1._0._0
									};
								default:
									break _v4_4;
							}
						} else {
							break _v4_4;
						}
					} else {
						if (((_p6._1.ctor === '::') && (_p6._1._0.ctor === 'Just')) && (_p6._1._1.ctor === '[]')) {
							return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _p6._1._0._0};
						} else {
							break _v4_4;
						}
					}
				} else {
					break _v4_4;
				}
			} while(false);
			return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: ' '};
		}();
		var padding = _p5._0;
		var symbol = _p5._1;
		var _p7 = symbol;
		switch (_p7) {
			case '%':
				return '%';
			case 'Y':
				return _elm_lang$core$Basics$toString(
					_elm_lang$core$Date$year(d));
			case 'y':
				return A2(
					_elm_lang$core$String$right,
					2,
					_elm_lang$core$Basics$toString(
						_elm_lang$core$Date$year(d)));
			case 'm':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					A2(_elm_lang$core$Maybe$withDefault, _mgold$elm_date_format$Date_Format$Zero, padding),
					_mgold$elm_date_format$Date_Format$monthToInt(
						_elm_lang$core$Date$month(d)));
			case 'B':
				return A2(
					_mgold$elm_date_format$Date_Format$monthToWord,
					loc.date.months,
					_elm_lang$core$Date$month(d));
			case 'b':
				return A2(
					_mgold$elm_date_format$Date_Format$monthToWord,
					loc.date.monthsAbbrev,
					_elm_lang$core$Date$month(d));
			case 'd':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					A2(_elm_lang$core$Maybe$withDefault, _mgold$elm_date_format$Date_Format$Zero, padding),
					_elm_lang$core$Date$day(d));
			case 'e':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					A2(_elm_lang$core$Maybe$withDefault, _mgold$elm_date_format$Date_Format$Space, padding),
					_elm_lang$core$Date$day(d));
			case 'a':
				return A2(
					_mgold$elm_date_format$Date_Format$dayOfWeekToWord,
					loc.date.wdaysAbbrev,
					_elm_lang$core$Date$dayOfWeek(d));
			case 'A':
				return A2(
					_mgold$elm_date_format$Date_Format$dayOfWeekToWord,
					loc.date.wdays,
					_elm_lang$core$Date$dayOfWeek(d));
			case 'H':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					A2(_elm_lang$core$Maybe$withDefault, _mgold$elm_date_format$Date_Format$Zero, padding),
					_elm_lang$core$Date$hour(d));
			case 'k':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					A2(_elm_lang$core$Maybe$withDefault, _mgold$elm_date_format$Date_Format$Space, padding),
					_elm_lang$core$Date$hour(d));
			case 'I':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					A2(_elm_lang$core$Maybe$withDefault, _mgold$elm_date_format$Date_Format$Zero, padding),
					_mgold$elm_date_format$Date_Format$zero2twelve(
						_mgold$elm_date_format$Date_Format$mod12(
							_elm_lang$core$Date$hour(d))));
			case 'l':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					A2(_elm_lang$core$Maybe$withDefault, _mgold$elm_date_format$Date_Format$Space, padding),
					_mgold$elm_date_format$Date_Format$zero2twelve(
						_mgold$elm_date_format$Date_Format$mod12(
							_elm_lang$core$Date$hour(d))));
			case 'p':
				return (_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$Date$hour(d),
					12) < 0) ? _elm_lang$core$String$toUpper(loc.time.am) : _elm_lang$core$String$toUpper(loc.time.pm);
			case 'P':
				return (_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$Date$hour(d),
					12) < 0) ? loc.time.am : loc.time.pm;
			case 'M':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					A2(_elm_lang$core$Maybe$withDefault, _mgold$elm_date_format$Date_Format$Zero, padding),
					_elm_lang$core$Date$minute(d));
			case 'S':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					A2(_elm_lang$core$Maybe$withDefault, _mgold$elm_date_format$Date_Format$Zero, padding),
					_elm_lang$core$Date$second(d));
			case 'L':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					A2(_elm_lang$core$Maybe$withDefault, _mgold$elm_date_format$Date_Format$ZeroThreeDigits, padding),
					_elm_lang$core$Date$millisecond(d));
			default:
				return '';
		}
	});
var _mgold$elm_date_format$Date_Format$localFormat = F3(
	function (loc, s, d) {
		return A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_mgold$elm_date_format$Date_Format$re,
			A2(_mgold$elm_date_format$Date_Format$formatToken, loc, d),
			s);
	});
var _mgold$elm_date_format$Date_Format$format = F2(
	function (s, d) {
		return A3(_mgold$elm_date_format$Date_Format$localFormat, _mgold$elm_date_format$Date_Local$international, s, d);
	});
var _mgold$elm_date_format$Date_Format$formatISO8601 = _mgold$elm_date_format$Date_Format$format('%Y-%m-%dT%H:%M:%SZ');

var _concourse$atc$Duration$format = function (duration) {
	var seconds = _elm_lang$core$Basics$truncate(duration / 1000);
	var remainingSeconds = A2(_elm_lang$core$Basics$rem, seconds, 60);
	var minutes = (seconds / 60) | 0;
	var remainingMinutes = A2(_elm_lang$core$Basics$rem, minutes, 60);
	var hours = (minutes / 60) | 0;
	var remainingHours = A2(_elm_lang$core$Basics$rem, hours, 24);
	var days = (hours / 24) | 0;
	var _p0 = {ctor: '_Tuple4', _0: days, _1: remainingHours, _2: remainingMinutes, _3: remainingSeconds};
	if (_p0._0 === 0) {
		if (_p0._1 === 0) {
			if (_p0._2 === 0) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p0._3),
					's');
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p0._2),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'm ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p0._3),
							's')));
			}
		} else {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(_p0._1),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'h ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p0._2),
						'm')));
		}
	} else {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(_p0._0),
			A2(
				_elm_lang$core$Basics_ops['++'],
				'd ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p0._1),
					'h')));
	}
};
var _concourse$atc$Duration$between = F2(
	function (a, b) {
		return b - a;
	});

var _elm_lang$html$Html_Attributes$map = _elm_lang$virtual_dom$VirtualDom$mapProperty;
var _elm_lang$html$Html_Attributes$attribute = _elm_lang$virtual_dom$VirtualDom$attribute;
var _elm_lang$html$Html_Attributes$contextmenu = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'contextmenu', value);
};
var _elm_lang$html$Html_Attributes$draggable = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'draggable', value);
};
var _elm_lang$html$Html_Attributes$itemprop = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'itemprop', value);
};
var _elm_lang$html$Html_Attributes$tabindex = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'tabIndex',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$charset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'charset', value);
};
var _elm_lang$html$Html_Attributes$height = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'height',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$width = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'width',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$formaction = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'formAction', value);
};
var _elm_lang$html$Html_Attributes$list = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'list', value);
};
var _elm_lang$html$Html_Attributes$minlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'minLength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$maxlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'maxlength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$size = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'size',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$form = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'form', value);
};
var _elm_lang$html$Html_Attributes$cols = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'cols',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$rows = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'rows',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$challenge = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'challenge', value);
};
var _elm_lang$html$Html_Attributes$media = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'media', value);
};
var _elm_lang$html$Html_Attributes$rel = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'rel', value);
};
var _elm_lang$html$Html_Attributes$datetime = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'datetime', value);
};
var _elm_lang$html$Html_Attributes$pubdate = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'pubdate', value);
};
var _elm_lang$html$Html_Attributes$colspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'colspan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$rowspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'rowspan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$manifest = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'manifest', value);
};
var _elm_lang$html$Html_Attributes$property = _elm_lang$virtual_dom$VirtualDom$property;
var _elm_lang$html$Html_Attributes$stringProperty = F2(
	function (name, string) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$string(string));
	});
var _elm_lang$html$Html_Attributes$class = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'className', name);
};
var _elm_lang$html$Html_Attributes$id = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'id', name);
};
var _elm_lang$html$Html_Attributes$title = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'title', name);
};
var _elm_lang$html$Html_Attributes$accesskey = function ($char) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'accessKey',
		_elm_lang$core$String$fromChar($char));
};
var _elm_lang$html$Html_Attributes$dir = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dir', value);
};
var _elm_lang$html$Html_Attributes$dropzone = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dropzone', value);
};
var _elm_lang$html$Html_Attributes$lang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'lang', value);
};
var _elm_lang$html$Html_Attributes$content = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'content', value);
};
var _elm_lang$html$Html_Attributes$httpEquiv = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'httpEquiv', value);
};
var _elm_lang$html$Html_Attributes$language = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'language', value);
};
var _elm_lang$html$Html_Attributes$src = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'src', value);
};
var _elm_lang$html$Html_Attributes$alt = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'alt', value);
};
var _elm_lang$html$Html_Attributes$preload = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'preload', value);
};
var _elm_lang$html$Html_Attributes$poster = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'poster', value);
};
var _elm_lang$html$Html_Attributes$kind = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'kind', value);
};
var _elm_lang$html$Html_Attributes$srclang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srclang', value);
};
var _elm_lang$html$Html_Attributes$sandbox = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'sandbox', value);
};
var _elm_lang$html$Html_Attributes$srcdoc = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srcdoc', value);
};
var _elm_lang$html$Html_Attributes$type_ = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'type', value);
};
var _elm_lang$html$Html_Attributes$value = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'value', value);
};
var _elm_lang$html$Html_Attributes$defaultValue = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'defaultValue', value);
};
var _elm_lang$html$Html_Attributes$placeholder = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'placeholder', value);
};
var _elm_lang$html$Html_Attributes$accept = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'accept', value);
};
var _elm_lang$html$Html_Attributes$acceptCharset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'acceptCharset', value);
};
var _elm_lang$html$Html_Attributes$action = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'action', value);
};
var _elm_lang$html$Html_Attributes$autocomplete = function (bool) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'autocomplete',
		bool ? 'on' : 'off');
};
var _elm_lang$html$Html_Attributes$enctype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'enctype', value);
};
var _elm_lang$html$Html_Attributes$method = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'method', value);
};
var _elm_lang$html$Html_Attributes$name = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'name', value);
};
var _elm_lang$html$Html_Attributes$pattern = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'pattern', value);
};
var _elm_lang$html$Html_Attributes$for = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'htmlFor', value);
};
var _elm_lang$html$Html_Attributes$max = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'max', value);
};
var _elm_lang$html$Html_Attributes$min = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'min', value);
};
var _elm_lang$html$Html_Attributes$step = function (n) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'step', n);
};
var _elm_lang$html$Html_Attributes$wrap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'wrap', value);
};
var _elm_lang$html$Html_Attributes$usemap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'useMap', value);
};
var _elm_lang$html$Html_Attributes$shape = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'shape', value);
};
var _elm_lang$html$Html_Attributes$coords = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'coords', value);
};
var _elm_lang$html$Html_Attributes$keytype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'keytype', value);
};
var _elm_lang$html$Html_Attributes$align = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'align', value);
};
var _elm_lang$html$Html_Attributes$cite = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'cite', value);
};
var _elm_lang$html$Html_Attributes$href = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'href', value);
};
var _elm_lang$html$Html_Attributes$target = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'target', value);
};
var _elm_lang$html$Html_Attributes$downloadAs = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'download', value);
};
var _elm_lang$html$Html_Attributes$hreflang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'hreflang', value);
};
var _elm_lang$html$Html_Attributes$ping = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'ping', value);
};
var _elm_lang$html$Html_Attributes$start = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'start',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$headers = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'headers', value);
};
var _elm_lang$html$Html_Attributes$scope = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'scope', value);
};
var _elm_lang$html$Html_Attributes$boolProperty = F2(
	function (name, bool) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$bool(bool));
	});
var _elm_lang$html$Html_Attributes$hidden = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'hidden', bool);
};
var _elm_lang$html$Html_Attributes$contenteditable = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'contentEditable', bool);
};
var _elm_lang$html$Html_Attributes$spellcheck = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'spellcheck', bool);
};
var _elm_lang$html$Html_Attributes$async = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'async', bool);
};
var _elm_lang$html$Html_Attributes$defer = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'defer', bool);
};
var _elm_lang$html$Html_Attributes$scoped = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'scoped', bool);
};
var _elm_lang$html$Html_Attributes$autoplay = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autoplay', bool);
};
var _elm_lang$html$Html_Attributes$controls = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'controls', bool);
};
var _elm_lang$html$Html_Attributes$loop = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'loop', bool);
};
var _elm_lang$html$Html_Attributes$default = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'default', bool);
};
var _elm_lang$html$Html_Attributes$seamless = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'seamless', bool);
};
var _elm_lang$html$Html_Attributes$checked = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'checked', bool);
};
var _elm_lang$html$Html_Attributes$selected = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'selected', bool);
};
var _elm_lang$html$Html_Attributes$autofocus = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autofocus', bool);
};
var _elm_lang$html$Html_Attributes$disabled = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'disabled', bool);
};
var _elm_lang$html$Html_Attributes$multiple = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'multiple', bool);
};
var _elm_lang$html$Html_Attributes$novalidate = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'noValidate', bool);
};
var _elm_lang$html$Html_Attributes$readonly = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'readOnly', bool);
};
var _elm_lang$html$Html_Attributes$required = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'required', bool);
};
var _elm_lang$html$Html_Attributes$ismap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'isMap', value);
};
var _elm_lang$html$Html_Attributes$download = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'download', bool);
};
var _elm_lang$html$Html_Attributes$reversed = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'reversed', bool);
};
var _elm_lang$html$Html_Attributes$classList = function (list) {
	return _elm_lang$html$Html_Attributes$class(
		A2(
			_elm_lang$core$String$join,
			' ',
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$first,
				A2(_elm_lang$core$List$filter, _elm_lang$core$Tuple$second, list))));
};
var _elm_lang$html$Html_Attributes$style = _elm_lang$virtual_dom$VirtualDom$style;

var _elm_lang$core$Set$foldr = F3(
	function (f, b, _p0) {
		var _p1 = _p0;
		return A3(
			_elm_lang$core$Dict$foldr,
			F3(
				function (k, _p2, b) {
					return A2(f, k, b);
				}),
			b,
			_p1._0);
	});
var _elm_lang$core$Set$foldl = F3(
	function (f, b, _p3) {
		var _p4 = _p3;
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, _p5, b) {
					return A2(f, k, b);
				}),
			b,
			_p4._0);
	});
var _elm_lang$core$Set$toList = function (_p6) {
	var _p7 = _p6;
	return _elm_lang$core$Dict$keys(_p7._0);
};
var _elm_lang$core$Set$size = function (_p8) {
	var _p9 = _p8;
	return _elm_lang$core$Dict$size(_p9._0);
};
var _elm_lang$core$Set$member = F2(
	function (k, _p10) {
		var _p11 = _p10;
		return A2(_elm_lang$core$Dict$member, k, _p11._0);
	});
var _elm_lang$core$Set$isEmpty = function (_p12) {
	var _p13 = _p12;
	return _elm_lang$core$Dict$isEmpty(_p13._0);
};
var _elm_lang$core$Set$Set_elm_builtin = function (a) {
	return {ctor: 'Set_elm_builtin', _0: a};
};
var _elm_lang$core$Set$empty = _elm_lang$core$Set$Set_elm_builtin(_elm_lang$core$Dict$empty);
var _elm_lang$core$Set$singleton = function (k) {
	return _elm_lang$core$Set$Set_elm_builtin(
		A2(
			_elm_lang$core$Dict$singleton,
			k,
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Set$insert = F2(
	function (k, _p14) {
		var _p15 = _p14;
		return _elm_lang$core$Set$Set_elm_builtin(
			A3(
				_elm_lang$core$Dict$insert,
				k,
				{ctor: '_Tuple0'},
				_p15._0));
	});
var _elm_lang$core$Set$fromList = function (xs) {
	return A3(_elm_lang$core$List$foldl, _elm_lang$core$Set$insert, _elm_lang$core$Set$empty, xs);
};
var _elm_lang$core$Set$map = F2(
	function (f, s) {
		return _elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$List$map,
				f,
				_elm_lang$core$Set$toList(s)));
	});
var _elm_lang$core$Set$remove = F2(
	function (k, _p16) {
		var _p17 = _p16;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$remove, k, _p17._0));
	});
var _elm_lang$core$Set$union = F2(
	function (_p19, _p18) {
		var _p20 = _p19;
		var _p21 = _p18;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$union, _p20._0, _p21._0));
	});
var _elm_lang$core$Set$intersect = F2(
	function (_p23, _p22) {
		var _p24 = _p23;
		var _p25 = _p22;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$intersect, _p24._0, _p25._0));
	});
var _elm_lang$core$Set$diff = F2(
	function (_p27, _p26) {
		var _p28 = _p27;
		var _p29 = _p26;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$diff, _p28._0, _p29._0));
	});
var _elm_lang$core$Set$filter = F2(
	function (p, _p30) {
		var _p31 = _p30;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(
				_elm_lang$core$Dict$filter,
				F2(
					function (k, _p32) {
						return p(k);
					}),
				_p31._0));
	});
var _elm_lang$core$Set$partition = F2(
	function (p, _p33) {
		var _p34 = _p33;
		var _p35 = A2(
			_elm_lang$core$Dict$partition,
			F2(
				function (k, _p36) {
					return p(k);
				}),
			_p34._0);
		var p1 = _p35._0;
		var p2 = _p35._1;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Set$Set_elm_builtin(p1),
			_1: _elm_lang$core$Set$Set_elm_builtin(p2)
		};
	});

var _elm_community$json_extra$Json_Decode_Extra$combine = A2(
	_elm_lang$core$List$foldr,
	_elm_lang$core$Json_Decode$map2(
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			})),
	_elm_lang$core$Json_Decode$succeed(
		{ctor: '[]'}));
var _elm_community$json_extra$Json_Decode_Extra$collection = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function (length) {
			return _elm_community$json_extra$Json_Decode_Extra$combine(
				A2(
					_elm_lang$core$List$map,
					function (index) {
						return A2(
							_elm_lang$core$Json_Decode$field,
							_elm_lang$core$Basics$toString(index),
							decoder);
					},
					A2(_elm_lang$core$List$range, 0, length - 1)));
		},
		A2(_elm_lang$core$Json_Decode$field, 'length', _elm_lang$core$Json_Decode$int));
};
var _elm_community$json_extra$Json_Decode_Extra$fromResult = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Ok') {
		return _elm_lang$core$Json_Decode$succeed(_p0._0);
	} else {
		return _elm_lang$core$Json_Decode$fail(_p0._0);
	}
};
var _elm_community$json_extra$Json_Decode_Extra$parseInt = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (_p1) {
		return _elm_community$json_extra$Json_Decode_Extra$fromResult(
			_elm_lang$core$String$toInt(_p1));
	},
	_elm_lang$core$Json_Decode$string);
var _elm_community$json_extra$Json_Decode_Extra$parseFloat = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (_p2) {
		return _elm_community$json_extra$Json_Decode_Extra$fromResult(
			_elm_lang$core$String$toFloat(_p2));
	},
	_elm_lang$core$Json_Decode$string);
var _elm_community$json_extra$Json_Decode_Extra$doubleEncoded = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function (_p3) {
			return _elm_community$json_extra$Json_Decode_Extra$fromResult(
				A2(_elm_lang$core$Json_Decode$decodeString, decoder, _p3));
		},
		_elm_lang$core$Json_Decode$string);
};
var _elm_community$json_extra$Json_Decode_Extra$keys = A2(
	_elm_lang$core$Json_Decode$map,
	A2(
		_elm_lang$core$List$foldl,
		F2(
			function (_p4, acc) {
				var _p5 = _p4;
				return {ctor: '::', _0: _p5._0, _1: acc};
			}),
		{ctor: '[]'}),
	_elm_lang$core$Json_Decode$keyValuePairs(
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '_Tuple0'})));
var _elm_community$json_extra$Json_Decode_Extra$sequenceHelp = F2(
	function (decoders, jsonValues) {
		return (!_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$List$length(jsonValues),
			_elm_lang$core$List$length(decoders))) ? _elm_lang$core$Json_Decode$fail('Number of decoders does not match number of values') : _elm_community$json_extra$Json_Decode_Extra$fromResult(
			A3(
				_elm_lang$core$List$foldr,
				_elm_lang$core$Result$map2(
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						})),
				_elm_lang$core$Result$Ok(
					{ctor: '[]'}),
				A3(_elm_lang$core$List$map2, _elm_lang$core$Json_Decode$decodeValue, decoders, jsonValues)));
	});
var _elm_community$json_extra$Json_Decode_Extra$sequence = function (decoders) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		_elm_community$json_extra$Json_Decode_Extra$sequenceHelp(decoders),
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$value));
};
var _elm_community$json_extra$Json_Decode_Extra$indexedList = function (indexedDecoder) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function (values) {
			return _elm_community$json_extra$Json_Decode_Extra$sequence(
				A2(
					_elm_lang$core$List$map,
					indexedDecoder,
					A2(
						_elm_lang$core$List$range,
						0,
						_elm_lang$core$List$length(values) - 1)));
		},
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$value));
};
var _elm_community$json_extra$Json_Decode_Extra$optionalField = F2(
	function (fieldName, decoder) {
		var finishDecoding = function (json) {
			var _p6 = A2(
				_elm_lang$core$Json_Decode$decodeValue,
				A2(_elm_lang$core$Json_Decode$field, fieldName, _elm_lang$core$Json_Decode$value),
				json);
			if (_p6.ctor === 'Ok') {
				return A2(
					_elm_lang$core$Json_Decode$map,
					_elm_lang$core$Maybe$Just,
					A2(_elm_lang$core$Json_Decode$field, fieldName, decoder));
			} else {
				return _elm_lang$core$Json_Decode$succeed(_elm_lang$core$Maybe$Nothing);
			}
		};
		return A2(_elm_lang$core$Json_Decode$andThen, finishDecoding, _elm_lang$core$Json_Decode$value);
	});
var _elm_community$json_extra$Json_Decode_Extra$withDefault = F2(
	function (fallback, decoder) {
		return A2(
			_elm_lang$core$Json_Decode$map,
			_elm_lang$core$Maybe$withDefault(fallback),
			_elm_lang$core$Json_Decode$maybe(decoder));
	});
var _elm_community$json_extra$Json_Decode_Extra$decodeDictFromTuples = F2(
	function (keyDecoder, tuples) {
		var _p7 = tuples;
		if (_p7.ctor === '[]') {
			return _elm_lang$core$Json_Decode$succeed(_elm_lang$core$Dict$empty);
		} else {
			var _p8 = A2(_elm_lang$core$Json_Decode$decodeString, keyDecoder, _p7._0._0);
			if (_p8.ctor === 'Ok') {
				return A2(
					_elm_lang$core$Json_Decode$andThen,
					function (_p9) {
						return _elm_lang$core$Json_Decode$succeed(
							A3(_elm_lang$core$Dict$insert, _p8._0, _p7._0._1, _p9));
					},
					A2(_elm_community$json_extra$Json_Decode_Extra$decodeDictFromTuples, keyDecoder, _p7._1));
			} else {
				return _elm_lang$core$Json_Decode$fail(_p8._0);
			}
		}
	});
var _elm_community$json_extra$Json_Decode_Extra$dict2 = F2(
	function (keyDecoder, valueDecoder) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			_elm_community$json_extra$Json_Decode_Extra$decodeDictFromTuples(keyDecoder),
			_elm_lang$core$Json_Decode$keyValuePairs(valueDecoder));
	});
var _elm_community$json_extra$Json_Decode_Extra$set = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Set$fromList,
		_elm_lang$core$Json_Decode$list(decoder));
};
var _elm_community$json_extra$Json_Decode_Extra$date = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (_p10) {
		return _elm_community$json_extra$Json_Decode_Extra$fromResult(
			_elm_lang$core$Date$fromString(_p10));
	},
	_elm_lang$core$Json_Decode$string);
var _elm_community$json_extra$Json_Decode_Extra$andMap = _elm_lang$core$Json_Decode$map2(
	F2(
		function (x, y) {
			return y(x);
		}));
var _elm_community$json_extra$Json_Decode_Extra_ops = _elm_community$json_extra$Json_Decode_Extra_ops || {};
_elm_community$json_extra$Json_Decode_Extra_ops['|:'] = _elm_lang$core$Basics$flip(_elm_community$json_extra$Json_Decode_Extra$andMap);

var _concourse$atc$Concourse$customDecoder = F2(
	function (decoder, toResult) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			function (a) {
				var _p0 = toResult(a);
				if (_p0.ctor === 'Ok') {
					return _elm_lang$core$Json_Decode$succeed(_p0._0);
				} else {
					return _elm_lang$core$Json_Decode$fail(_p0._0);
				}
			},
			decoder);
	});
var _concourse$atc$Concourse$defaultTo = function ($default) {
	return function (_p1) {
		return A2(
			_elm_lang$core$Json_Decode$map,
			_elm_lang$core$Maybe$withDefault($default),
			_elm_lang$core$Json_Decode$maybe(_p1));
	};
};
var _concourse$atc$Concourse$lazy = function (thunk) {
	return A2(
		_concourse$atc$Concourse$customDecoder,
		_elm_lang$core$Json_Decode$value,
		function (js) {
			return A2(
				_elm_lang$core$Json_Decode$decodeValue,
				thunk(
					{ctor: '_Tuple0'}),
				js);
		});
};
var _concourse$atc$Concourse$dateFromSeconds = function (_p2) {
	return _elm_lang$core$Date$fromTime(
		A2(
			F2(
				function (x, y) {
					return x * y;
				}),
			1000,
			_p2));
};
var _concourse$atc$Concourse$decodeVersion = _elm_lang$core$Json_Decode$dict(_elm_lang$core$Json_Decode$string);
var _concourse$atc$Concourse$fstToLower = function (_p3) {
	var _p4 = _p3;
	return {
		ctor: '_Tuple2',
		_0: _elm_lang$core$String$toLower(_p4._0),
		_1: _p4._1
	};
};
var _concourse$atc$Concourse$keysToLower = function (_p5) {
	return _elm_lang$core$Dict$fromList(
		A2(
			_elm_lang$core$List$map,
			_concourse$atc$Concourse$fstToLower,
			_elm_lang$core$Dict$toList(_p5)));
};
var _concourse$atc$Concourse$csrfTokenHeaderName = 'X-Csrf-Token';
var _concourse$atc$Concourse$retrieveCSRFToken = function (headers) {
	return A2(
		_elm_lang$core$Result$fromMaybe,
		'error CSRFToken not found',
		A2(
			_elm_lang$core$Dict$get,
			_elm_lang$core$String$toLower(_concourse$atc$Concourse$csrfTokenHeaderName),
			_concourse$atc$Concourse$keysToLower(headers)));
};
var _concourse$atc$Concourse$authTokenFromTuple = function (_p6) {
	var _p7 = _p6;
	var _p8 = _p7._0;
	if (_p8 === 'Bearer') {
		return _elm_lang$core$Result$Ok(_p7._1);
	} else {
		return _elm_lang$core$Result$Err('unknown token type');
	}
};
var _concourse$atc$Concourse$decodeAuthToken = A2(
	_concourse$atc$Concourse$customDecoder,
	A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		A2(
			_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
			_elm_lang$core$Json_Decode$succeed(
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					})),
			A2(_elm_lang$core$Json_Decode$field, 'type', _elm_lang$core$Json_Decode$string)),
		A2(_elm_lang$core$Json_Decode$field, 'value', _elm_lang$core$Json_Decode$string)),
	_concourse$atc$Concourse$authTokenFromTuple);
var _concourse$atc$Concourse$OAuthAuthMethod = F2(
	function (a, b) {
		return {displayName: a, authUrl: b};
	});
var _concourse$atc$Concourse$AuthSession = F2(
	function (a, b) {
		return {authToken: a, csrfToken: b};
	});
var _concourse$atc$Concourse$JobBuildIdentifier = F4(
	function (a, b, c, d) {
		return {teamName: a, pipelineName: b, jobName: c, buildName: d};
	});
var _concourse$atc$Concourse$Build = F7(
	function (a, b, c, d, e, f, g) {
		return {id: a, url: b, name: c, job: d, status: e, duration: f, reapTime: g};
	});
var _concourse$atc$Concourse$BuildDuration = F2(
	function (a, b) {
		return {startedAt: a, finishedAt: b};
	});
var _concourse$atc$Concourse$BuildPrep = F6(
	function (a, b, c, d, e, f) {
		return {pausedPipeline: a, pausedJob: b, maxRunningBuilds: c, inputs: d, inputsSatisfied: e, missingInputReasons: f};
	});
var _concourse$atc$Concourse$BuildResources = F2(
	function (a, b) {
		return {inputs: a, outputs: b};
	});
var _concourse$atc$Concourse$BuildResourcesInput = F6(
	function (a, b, c, d, e, f) {
		return {name: a, resource: b, type_: c, version: d, metadata: e, firstOccurrence: f};
	});
var _concourse$atc$Concourse$BuildResourcesOutput = F2(
	function (a, b) {
		return {resource: a, version: b};
	});
var _concourse$atc$Concourse$decodeResourcesOutput = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$BuildResourcesOutput),
		A2(_elm_lang$core$Json_Decode$field, 'resource', _elm_lang$core$Json_Decode$string)),
	A2(
		_elm_lang$core$Json_Decode$field,
		'version',
		_elm_lang$core$Json_Decode$dict(_elm_lang$core$Json_Decode$string)));
var _concourse$atc$Concourse$BuildPlan = F2(
	function (a, b) {
		return {id: a, step: b};
	});
var _concourse$atc$Concourse$HookedPlan = F2(
	function (a, b) {
		return {step: a, hook: b};
	});
var _concourse$atc$Concourse$Info = function (a) {
	return {version: a};
};
var _concourse$atc$Concourse$decodeInfo = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$Info),
	A2(_elm_lang$core$Json_Decode$field, 'version', _elm_lang$core$Json_Decode$string));
var _concourse$atc$Concourse$JobIdentifier = F3(
	function (a, b, c) {
		return {teamName: a, pipelineName: b, jobName: c};
	});
var _concourse$atc$Concourse$Job = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {pipeline: a, name: b, url: c, nextBuild: d, finishedBuild: e, transitionBuild: f, paused: g, disableManualTrigger: h, inputs: i, outputs: j, groups: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _concourse$atc$Concourse$JobInput = F4(
	function (a, b, c, d) {
		return {name: a, resource: b, passed: c, trigger: d};
	});
var _concourse$atc$Concourse$decodeJobInput = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		A2(
			_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
			A2(
				_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
				_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$JobInput),
				A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string)),
			A2(_elm_lang$core$Json_Decode$field, 'resource', _elm_lang$core$Json_Decode$string)),
		A2(
			_concourse$atc$Concourse$defaultTo,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Json_Decode$field,
				'passed',
				_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)))),
	A2(
		_concourse$atc$Concourse$defaultTo,
		false,
		A2(_elm_lang$core$Json_Decode$field, 'trigger', _elm_lang$core$Json_Decode$bool)));
var _concourse$atc$Concourse$JobOutput = F2(
	function (a, b) {
		return {name: a, resource: b};
	});
var _concourse$atc$Concourse$decodeJobOutput = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$JobOutput),
		A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string)),
	A2(_elm_lang$core$Json_Decode$field, 'resource', _elm_lang$core$Json_Decode$string));
var _concourse$atc$Concourse$PipelineIdentifier = F2(
	function (a, b) {
		return {teamName: a, pipelineName: b};
	});
var _concourse$atc$Concourse$Pipeline = F7(
	function (a, b, c, d, e, f, g) {
		return {id: a, name: b, url: c, paused: d, $public: e, teamName: f, groups: g};
	});
var _concourse$atc$Concourse$PipelineGroup = F3(
	function (a, b, c) {
		return {name: a, jobs: b, resources: c};
	});
var _concourse$atc$Concourse$decodePipelineGroup = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		A2(
			_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
			_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$PipelineGroup),
			A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string)),
		A2(
			_concourse$atc$Concourse$defaultTo,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Json_Decode$field,
				'jobs',
				_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)))),
	A2(
		_concourse$atc$Concourse$defaultTo,
		{ctor: '[]'},
		A2(
			_elm_lang$core$Json_Decode$field,
			'resources',
			_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string))));
var _concourse$atc$Concourse$decodePipeline = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		A2(
			_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
			A2(
				_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
				A2(
					_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
					A2(
						_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
						A2(
							_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
							_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$Pipeline),
							A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int)),
						A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string)),
					A2(_elm_lang$core$Json_Decode$field, 'url', _elm_lang$core$Json_Decode$string)),
				A2(_elm_lang$core$Json_Decode$field, 'paused', _elm_lang$core$Json_Decode$bool)),
			A2(_elm_lang$core$Json_Decode$field, 'public', _elm_lang$core$Json_Decode$bool)),
		A2(_elm_lang$core$Json_Decode$field, 'team_name', _elm_lang$core$Json_Decode$string)),
	A2(
		_concourse$atc$Concourse$defaultTo,
		{ctor: '[]'},
		A2(
			_elm_lang$core$Json_Decode$field,
			'groups',
			_elm_lang$core$Json_Decode$list(_concourse$atc$Concourse$decodePipelineGroup))));
var _concourse$atc$Concourse$Resource = F5(
	function (a, b, c, d, e) {
		return {name: a, paused: b, failingToCheck: c, checkError: d, lastChecked: e};
	});
var _concourse$atc$Concourse$decodeResource = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		A2(
			_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
			A2(
				_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
				A2(
					_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
					_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$Resource),
					A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string)),
				A2(
					_concourse$atc$Concourse$defaultTo,
					false,
					A2(_elm_lang$core$Json_Decode$field, 'paused', _elm_lang$core$Json_Decode$bool))),
			A2(
				_concourse$atc$Concourse$defaultTo,
				false,
				A2(_elm_lang$core$Json_Decode$field, 'failing_to_check', _elm_lang$core$Json_Decode$bool))),
		A2(
			_concourse$atc$Concourse$defaultTo,
			'',
			A2(_elm_lang$core$Json_Decode$field, 'check_error', _elm_lang$core$Json_Decode$string))),
	_elm_lang$core$Json_Decode$maybe(
		A2(
			_elm_lang$core$Json_Decode$field,
			'last_checked',
			A2(_elm_lang$core$Json_Decode$map, _concourse$atc$Concourse$dateFromSeconds, _elm_lang$core$Json_Decode$float))));
var _concourse$atc$Concourse$ResourceIdentifier = F3(
	function (a, b, c) {
		return {teamName: a, pipelineName: b, resourceName: c};
	});
var _concourse$atc$Concourse$VersionedResource = F6(
	function (a, b, c, d, e, f) {
		return {id: a, version: b, enabled: c, metadata: d, resourceType: e, resourceName: f};
	});
var _concourse$atc$Concourse$VersionedResourceIdentifier = F4(
	function (a, b, c, d) {
		return {teamName: a, pipelineName: b, resourceName: c, versionID: d};
	});
var _concourse$atc$Concourse$MetadataField = F2(
	function (a, b) {
		return {name: a, value: b};
	});
var _concourse$atc$Concourse$decodeMetadataField = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$MetadataField),
		A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string)),
	A2(_elm_lang$core$Json_Decode$field, 'value', _elm_lang$core$Json_Decode$string));
var _concourse$atc$Concourse$decodeMetadata = _elm_lang$core$Json_Decode$list(_concourse$atc$Concourse$decodeMetadataField);
var _concourse$atc$Concourse$decodeResourcesInput = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		A2(
			_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
			A2(
				_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
				A2(
					_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
					A2(
						_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
						_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$BuildResourcesInput),
						A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string)),
					A2(_elm_lang$core$Json_Decode$field, 'resource', _elm_lang$core$Json_Decode$string)),
				A2(_elm_lang$core$Json_Decode$field, 'type', _elm_lang$core$Json_Decode$string)),
			A2(_elm_lang$core$Json_Decode$field, 'version', _concourse$atc$Concourse$decodeVersion)),
		A2(_elm_lang$core$Json_Decode$field, 'metadata', _concourse$atc$Concourse$decodeMetadata)),
	A2(_elm_lang$core$Json_Decode$field, 'first_occurrence', _elm_lang$core$Json_Decode$bool));
var _concourse$atc$Concourse$decodeBuildResources = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$BuildResources),
		A2(
			_elm_lang$core$Json_Decode$field,
			'inputs',
			_elm_lang$core$Json_Decode$list(_concourse$atc$Concourse$decodeResourcesInput))),
	A2(
		_elm_lang$core$Json_Decode$field,
		'outputs',
		_elm_lang$core$Json_Decode$list(_concourse$atc$Concourse$decodeResourcesOutput)));
var _concourse$atc$Concourse$decodeVersionedResource = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		A2(
			_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
			A2(
				_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
				A2(
					_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
					A2(
						_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
						_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$VersionedResource),
						A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int)),
					A2(_elm_lang$core$Json_Decode$field, 'version', _concourse$atc$Concourse$decodeVersion)),
				A2(_elm_lang$core$Json_Decode$field, 'enabled', _elm_lang$core$Json_Decode$bool)),
			A2(
				_concourse$atc$Concourse$defaultTo,
				{ctor: '[]'},
				A2(_elm_lang$core$Json_Decode$field, 'metadata', _concourse$atc$Concourse$decodeMetadata))),
		A2(_elm_lang$core$Json_Decode$field, 'type', _elm_lang$core$Json_Decode$string)),
	A2(_elm_lang$core$Json_Decode$field, 'resource', _elm_lang$core$Json_Decode$string));
var _concourse$atc$Concourse$Team = F2(
	function (a, b) {
		return {id: a, name: b};
	});
var _concourse$atc$Concourse$decodeTeam = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$Team),
		A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int)),
	A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string));
var _concourse$atc$Concourse$User = function (a) {
	return {team: a};
};
var _concourse$atc$Concourse$decodeUser = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$User),
	A2(_elm_lang$core$Json_Decode$field, 'team', _concourse$atc$Concourse$decodeTeam));
var _concourse$atc$Concourse$Cause = F2(
	function (a, b) {
		return {versionedResourceID: a, buildID: b};
	});
var _concourse$atc$Concourse$decodeCause = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$Cause),
		A2(_elm_lang$core$Json_Decode$field, 'versioned_resource_id', _elm_lang$core$Json_Decode$int)),
	A2(_elm_lang$core$Json_Decode$field, 'build_id', _elm_lang$core$Json_Decode$int));
var _concourse$atc$Concourse$AuthMethodOAuth = function (a) {
	return {ctor: 'AuthMethodOAuth', _0: a};
};
var _concourse$atc$Concourse$AuthMethodBasic = {ctor: 'AuthMethodBasic'};
var _concourse$atc$Concourse$authMethodFromTuple = function (tuple) {
	var _p9 = tuple;
	_v4_3:
	do {
		if (_p9.ctor === '_Tuple3') {
			switch (_p9._0) {
				case 'basic':
					return _elm_lang$core$Result$Ok(_concourse$atc$Concourse$AuthMethodBasic);
				case 'oauth':
					if ((_p9._1.ctor === 'Just') && (_p9._2.ctor === 'Just')) {
						return _elm_lang$core$Result$Ok(
							_concourse$atc$Concourse$AuthMethodOAuth(
								{displayName: _p9._1._0, authUrl: _p9._2._0}));
					} else {
						return _elm_lang$core$Result$Err('missing fields in oauth auth method');
					}
				default:
					break _v4_3;
			}
		} else {
			break _v4_3;
		}
	} while(false);
	return _elm_lang$core$Result$Err('unknown value for auth method type');
};
var _concourse$atc$Concourse$decodeAuthMethod = A2(
	_concourse$atc$Concourse$customDecoder,
	A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		A2(
			_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
			A2(
				_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
				_elm_lang$core$Json_Decode$succeed(
					F3(
						function (v0, v1, v2) {
							return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
						})),
				A2(_elm_lang$core$Json_Decode$field, 'type', _elm_lang$core$Json_Decode$string)),
			_elm_lang$core$Json_Decode$maybe(
				A2(_elm_lang$core$Json_Decode$field, 'display_name', _elm_lang$core$Json_Decode$string))),
		_elm_lang$core$Json_Decode$maybe(
			A2(_elm_lang$core$Json_Decode$field, 'auth_url', _elm_lang$core$Json_Decode$string))),
	_concourse$atc$Concourse$authMethodFromTuple);
var _concourse$atc$Concourse$BuildStatusAborted = {ctor: 'BuildStatusAborted'};
var _concourse$atc$Concourse$BuildStatusErrored = {ctor: 'BuildStatusErrored'};
var _concourse$atc$Concourse$BuildStatusFailed = {ctor: 'BuildStatusFailed'};
var _concourse$atc$Concourse$BuildStatusSucceeded = {ctor: 'BuildStatusSucceeded'};
var _concourse$atc$Concourse$BuildStatusStarted = {ctor: 'BuildStatusStarted'};
var _concourse$atc$Concourse$BuildStatusPending = {ctor: 'BuildStatusPending'};
var _concourse$atc$Concourse$decodeBuildStatus = A2(
	_concourse$atc$Concourse$customDecoder,
	_elm_lang$core$Json_Decode$string,
	function (status) {
		var _p10 = status;
		switch (_p10) {
			case 'pending':
				return _elm_lang$core$Result$Ok(_concourse$atc$Concourse$BuildStatusPending);
			case 'started':
				return _elm_lang$core$Result$Ok(_concourse$atc$Concourse$BuildStatusStarted);
			case 'succeeded':
				return _elm_lang$core$Result$Ok(_concourse$atc$Concourse$BuildStatusSucceeded);
			case 'failed':
				return _elm_lang$core$Result$Ok(_concourse$atc$Concourse$BuildStatusFailed);
			case 'errored':
				return _elm_lang$core$Result$Ok(_concourse$atc$Concourse$BuildStatusErrored);
			case 'aborted':
				return _elm_lang$core$Result$Ok(_concourse$atc$Concourse$BuildStatusAborted);
			default:
				return _elm_lang$core$Result$Err(
					A2(_elm_lang$core$Basics_ops['++'], 'unknown build status: ', _p10));
		}
	});
var _concourse$atc$Concourse$decodeBuild = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		A2(
			_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
			A2(
				_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
				A2(
					_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
					A2(
						_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
						A2(
							_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
							_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$Build),
							A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int)),
						A2(_elm_lang$core$Json_Decode$field, 'url', _elm_lang$core$Json_Decode$string)),
					A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string)),
				_elm_lang$core$Json_Decode$maybe(
					A2(
						_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
						A2(
							_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
							A2(
								_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
								_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$JobIdentifier),
								A2(_elm_lang$core$Json_Decode$field, 'team_name', _elm_lang$core$Json_Decode$string)),
							A2(_elm_lang$core$Json_Decode$field, 'pipeline_name', _elm_lang$core$Json_Decode$string)),
						A2(_elm_lang$core$Json_Decode$field, 'job_name', _elm_lang$core$Json_Decode$string)))),
			A2(_elm_lang$core$Json_Decode$field, 'status', _concourse$atc$Concourse$decodeBuildStatus)),
		A2(
			_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
			A2(
				_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
				_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$BuildDuration),
				_elm_lang$core$Json_Decode$maybe(
					A2(
						_elm_lang$core$Json_Decode$field,
						'start_time',
						A2(_elm_lang$core$Json_Decode$map, _concourse$atc$Concourse$dateFromSeconds, _elm_lang$core$Json_Decode$float)))),
			_elm_lang$core$Json_Decode$maybe(
				A2(
					_elm_lang$core$Json_Decode$field,
					'end_time',
					A2(_elm_lang$core$Json_Decode$map, _concourse$atc$Concourse$dateFromSeconds, _elm_lang$core$Json_Decode$float))))),
	_elm_lang$core$Json_Decode$maybe(
		A2(
			_elm_lang$core$Json_Decode$field,
			'reap_time',
			A2(_elm_lang$core$Json_Decode$map, _concourse$atc$Concourse$dateFromSeconds, _elm_lang$core$Json_Decode$float))));
var _concourse$atc$Concourse$decodeJob = function (pi) {
	return A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		A2(
			_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
			A2(
				_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
				A2(
					_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
					A2(
						_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
						A2(
							_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
							A2(
								_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
								A2(
									_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
									A2(
										_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
										A2(
											_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
											_elm_lang$core$Json_Decode$succeed(
												_concourse$atc$Concourse$Job(pi)),
											A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string)),
										A2(_elm_lang$core$Json_Decode$field, 'url', _elm_lang$core$Json_Decode$string)),
									_elm_lang$core$Json_Decode$maybe(
										A2(_elm_lang$core$Json_Decode$field, 'next_build', _concourse$atc$Concourse$decodeBuild))),
								_elm_lang$core$Json_Decode$maybe(
									A2(_elm_lang$core$Json_Decode$field, 'finished_build', _concourse$atc$Concourse$decodeBuild))),
							_elm_lang$core$Json_Decode$maybe(
								A2(_elm_lang$core$Json_Decode$field, 'transition_build', _concourse$atc$Concourse$decodeBuild))),
						A2(
							_concourse$atc$Concourse$defaultTo,
							false,
							A2(_elm_lang$core$Json_Decode$field, 'paused', _elm_lang$core$Json_Decode$bool))),
					A2(
						_concourse$atc$Concourse$defaultTo,
						false,
						A2(_elm_lang$core$Json_Decode$field, 'disable_manual_trigger', _elm_lang$core$Json_Decode$bool))),
				A2(
					_concourse$atc$Concourse$defaultTo,
					{ctor: '[]'},
					A2(
						_elm_lang$core$Json_Decode$field,
						'inputs',
						_elm_lang$core$Json_Decode$list(_concourse$atc$Concourse$decodeJobInput)))),
			A2(
				_concourse$atc$Concourse$defaultTo,
				{ctor: '[]'},
				A2(
					_elm_lang$core$Json_Decode$field,
					'outputs',
					_elm_lang$core$Json_Decode$list(_concourse$atc$Concourse$decodeJobOutput)))),
		A2(
			_concourse$atc$Concourse$defaultTo,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Json_Decode$field,
				'groups',
				_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string))));
};
var _concourse$atc$Concourse$BuildPrepStatusNotBlocking = {ctor: 'BuildPrepStatusNotBlocking'};
var _concourse$atc$Concourse$BuildPrepStatusBlocking = {ctor: 'BuildPrepStatusBlocking'};
var _concourse$atc$Concourse$BuildPrepStatusUnknown = {ctor: 'BuildPrepStatusUnknown'};
var _concourse$atc$Concourse$decodeBuildPrepStatus = A2(
	_concourse$atc$Concourse$customDecoder,
	_elm_lang$core$Json_Decode$string,
	function (status) {
		var _p11 = status;
		switch (_p11) {
			case 'unknown':
				return _elm_lang$core$Result$Ok(_concourse$atc$Concourse$BuildPrepStatusUnknown);
			case 'blocking':
				return _elm_lang$core$Result$Ok(_concourse$atc$Concourse$BuildPrepStatusBlocking);
			case 'not_blocking':
				return _elm_lang$core$Result$Ok(_concourse$atc$Concourse$BuildPrepStatusNotBlocking);
			default:
				return _elm_lang$core$Result$Err(
					A2(_elm_lang$core$Basics_ops['++'], 'unknown build preparation status: ', _p11));
		}
	});
var _concourse$atc$Concourse$decodeBuildPrep = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		A2(
			_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
			A2(
				_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
				A2(
					_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
					A2(
						_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
						_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$BuildPrep),
						A2(_elm_lang$core$Json_Decode$field, 'paused_pipeline', _concourse$atc$Concourse$decodeBuildPrepStatus)),
					A2(_elm_lang$core$Json_Decode$field, 'paused_job', _concourse$atc$Concourse$decodeBuildPrepStatus)),
				A2(_elm_lang$core$Json_Decode$field, 'max_running_builds', _concourse$atc$Concourse$decodeBuildPrepStatus)),
			A2(
				_elm_lang$core$Json_Decode$field,
				'inputs',
				_elm_lang$core$Json_Decode$dict(_concourse$atc$Concourse$decodeBuildPrepStatus))),
		A2(_elm_lang$core$Json_Decode$field, 'inputs_satisfied', _concourse$atc$Concourse$decodeBuildPrepStatus)),
	A2(
		_concourse$atc$Concourse$defaultTo,
		_elm_lang$core$Dict$empty,
		A2(
			_elm_lang$core$Json_Decode$field,
			'missing_input_reasons',
			_elm_lang$core$Json_Decode$dict(_elm_lang$core$Json_Decode$string))));
var _concourse$atc$Concourse$BuildStepTimeout = function (a) {
	return {ctor: 'BuildStepTimeout', _0: a};
};
var _concourse$atc$Concourse$BuildStepRetry = function (a) {
	return {ctor: 'BuildStepRetry', _0: a};
};
var _concourse$atc$Concourse$BuildStepTry = function (a) {
	return {ctor: 'BuildStepTry', _0: a};
};
var _concourse$atc$Concourse$BuildStepEnsure = function (a) {
	return {ctor: 'BuildStepEnsure', _0: a};
};
var _concourse$atc$Concourse$BuildStepOnAbort = function (a) {
	return {ctor: 'BuildStepOnAbort', _0: a};
};
var _concourse$atc$Concourse$BuildStepOnFailure = function (a) {
	return {ctor: 'BuildStepOnFailure', _0: a};
};
var _concourse$atc$Concourse$BuildStepOnSuccess = function (a) {
	return {ctor: 'BuildStepOnSuccess', _0: a};
};
var _concourse$atc$Concourse$BuildStepDo = function (a) {
	return {ctor: 'BuildStepDo', _0: a};
};
var _concourse$atc$Concourse$BuildStepAggregate = function (a) {
	return {ctor: 'BuildStepAggregate', _0: a};
};
var _concourse$atc$Concourse$BuildStepDependentGet = function (a) {
	return {ctor: 'BuildStepDependentGet', _0: a};
};
var _concourse$atc$Concourse$decodeBuildStepDependentGet = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$BuildStepDependentGet),
	A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string));
var _concourse$atc$Concourse$BuildStepPut = function (a) {
	return {ctor: 'BuildStepPut', _0: a};
};
var _concourse$atc$Concourse$decodeBuildStepPut = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$BuildStepPut),
	A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string));
var _concourse$atc$Concourse$BuildStepGet = F2(
	function (a, b) {
		return {ctor: 'BuildStepGet', _0: a, _1: b};
	});
var _concourse$atc$Concourse$decodeBuildStepGet = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$BuildStepGet),
		A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string)),
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode$field, 'version', _concourse$atc$Concourse$decodeVersion)));
var _concourse$atc$Concourse$BuildStepTask = function (a) {
	return {ctor: 'BuildStepTask', _0: a};
};
var _concourse$atc$Concourse$decodeBuildStepTask = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$BuildStepTask),
	A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string));
var _concourse$atc$Concourse$decodeBuildPlan_ = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$BuildPlan),
		A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$string)),
	_elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: A2(
				_elm_lang$core$Json_Decode$field,
				'task',
				_concourse$atc$Concourse$lazy(
					function (_p12) {
						return _concourse$atc$Concourse$decodeBuildStepTask;
					})),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Json_Decode$field,
					'get',
					_concourse$atc$Concourse$lazy(
						function (_p13) {
							return _concourse$atc$Concourse$decodeBuildStepGet;
						})),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$core$Json_Decode$field,
						'put',
						_concourse$atc$Concourse$lazy(
							function (_p14) {
								return _concourse$atc$Concourse$decodeBuildStepPut;
							})),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Json_Decode$field,
							'dependent_get',
							_concourse$atc$Concourse$lazy(
								function (_p15) {
									return _concourse$atc$Concourse$decodeBuildStepDependentGet;
								})),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$core$Json_Decode$field,
								'aggregate',
								_concourse$atc$Concourse$lazy(
									function (_p16) {
										return _concourse$atc$Concourse$decodeBuildStepAggregate;
									})),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$core$Json_Decode$field,
									'do',
									_concourse$atc$Concourse$lazy(
										function (_p17) {
											return _concourse$atc$Concourse$decodeBuildStepDo;
										})),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$core$Json_Decode$field,
										'on_success',
										_concourse$atc$Concourse$lazy(
											function (_p18) {
												return _concourse$atc$Concourse$decodeBuildStepOnSuccess;
											})),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$core$Json_Decode$field,
											'on_failure',
											_concourse$atc$Concourse$lazy(
												function (_p19) {
													return _concourse$atc$Concourse$decodeBuildStepOnFailure;
												})),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$core$Json_Decode$field,
												'on_abort',
												_concourse$atc$Concourse$lazy(
													function (_p20) {
														return _concourse$atc$Concourse$decodeBuildStepOnAbort;
													})),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$core$Json_Decode$field,
													'ensure',
													_concourse$atc$Concourse$lazy(
														function (_p21) {
															return _concourse$atc$Concourse$decodeBuildStepEnsure;
														})),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$core$Json_Decode$field,
														'try',
														_concourse$atc$Concourse$lazy(
															function (_p22) {
																return _concourse$atc$Concourse$decodeBuildStepTry;
															})),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$core$Json_Decode$field,
															'retry',
															_concourse$atc$Concourse$lazy(
																function (_p23) {
																	return _concourse$atc$Concourse$decodeBuildStepRetry;
																})),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$core$Json_Decode$field,
																'timeout',
																_concourse$atc$Concourse$lazy(
																	function (_p24) {
																		return _concourse$atc$Concourse$decodeBuildStepTimeout;
																	})),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}));
var _concourse$atc$Concourse$decodeBuildStepAggregate = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$BuildStepAggregate),
	_elm_lang$core$Json_Decode$array(
		_concourse$atc$Concourse$lazy(
			function (_p25) {
				return _concourse$atc$Concourse$decodeBuildPlan_;
			})));
var _concourse$atc$Concourse$decodeBuildStepDo = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$BuildStepDo),
	_elm_lang$core$Json_Decode$array(
		_concourse$atc$Concourse$lazy(
			function (_p26) {
				return _concourse$atc$Concourse$decodeBuildPlan_;
			})));
var _concourse$atc$Concourse$decodeBuildStepEnsure = A2(
	_elm_lang$core$Json_Decode$map,
	_concourse$atc$Concourse$BuildStepEnsure,
	A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		A2(
			_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
			_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$HookedPlan),
			A2(
				_elm_lang$core$Json_Decode$field,
				'step',
				_concourse$atc$Concourse$lazy(
					function (_p27) {
						return _concourse$atc$Concourse$decodeBuildPlan_;
					}))),
		A2(
			_elm_lang$core$Json_Decode$field,
			'ensure',
			_concourse$atc$Concourse$lazy(
				function (_p28) {
					return _concourse$atc$Concourse$decodeBuildPlan_;
				}))));
var _concourse$atc$Concourse$decodeBuildStepOnAbort = A2(
	_elm_lang$core$Json_Decode$map,
	_concourse$atc$Concourse$BuildStepOnAbort,
	A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		A2(
			_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
			_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$HookedPlan),
			A2(
				_elm_lang$core$Json_Decode$field,
				'step',
				_concourse$atc$Concourse$lazy(
					function (_p29) {
						return _concourse$atc$Concourse$decodeBuildPlan_;
					}))),
		A2(
			_elm_lang$core$Json_Decode$field,
			'on_abort',
			_concourse$atc$Concourse$lazy(
				function (_p30) {
					return _concourse$atc$Concourse$decodeBuildPlan_;
				}))));
var _concourse$atc$Concourse$decodeBuildStepOnFailure = A2(
	_elm_lang$core$Json_Decode$map,
	_concourse$atc$Concourse$BuildStepOnFailure,
	A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		A2(
			_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
			_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$HookedPlan),
			A2(
				_elm_lang$core$Json_Decode$field,
				'step',
				_concourse$atc$Concourse$lazy(
					function (_p31) {
						return _concourse$atc$Concourse$decodeBuildPlan_;
					}))),
		A2(
			_elm_lang$core$Json_Decode$field,
			'on_failure',
			_concourse$atc$Concourse$lazy(
				function (_p32) {
					return _concourse$atc$Concourse$decodeBuildPlan_;
				}))));
var _concourse$atc$Concourse$decodeBuildStepOnSuccess = A2(
	_elm_lang$core$Json_Decode$map,
	_concourse$atc$Concourse$BuildStepOnSuccess,
	A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		A2(
			_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
			_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$HookedPlan),
			A2(
				_elm_lang$core$Json_Decode$field,
				'step',
				_concourse$atc$Concourse$lazy(
					function (_p33) {
						return _concourse$atc$Concourse$decodeBuildPlan_;
					}))),
		A2(
			_elm_lang$core$Json_Decode$field,
			'on_success',
			_concourse$atc$Concourse$lazy(
				function (_p34) {
					return _concourse$atc$Concourse$decodeBuildPlan_;
				}))));
var _concourse$atc$Concourse$decodeBuildStepRetry = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$BuildStepRetry),
	_elm_lang$core$Json_Decode$array(
		_concourse$atc$Concourse$lazy(
			function (_p35) {
				return _concourse$atc$Concourse$decodeBuildPlan_;
			})));
var _concourse$atc$Concourse$decodeBuildStepTimeout = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$BuildStepTimeout),
	A2(
		_elm_lang$core$Json_Decode$field,
		'step',
		_concourse$atc$Concourse$lazy(
			function (_p36) {
				return _concourse$atc$Concourse$decodeBuildPlan_;
			})));
var _concourse$atc$Concourse$decodeBuildStepTry = A2(
	_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
	_elm_lang$core$Json_Decode$succeed(_concourse$atc$Concourse$BuildStepTry),
	A2(
		_elm_lang$core$Json_Decode$field,
		'step',
		_concourse$atc$Concourse$lazy(
			function (_p37) {
				return _concourse$atc$Concourse$decodeBuildPlan_;
			})));
var _concourse$atc$Concourse$decodeBuildPlan = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'plan',
		_1: {ctor: '[]'}
	},
	_concourse$atc$Concourse$decodeBuildPlan_);
var _concourse$atc$Concourse$PipelineStatusSucceeded = {ctor: 'PipelineStatusSucceeded'};
var _concourse$atc$Concourse$PipelineStatusRunning = {ctor: 'PipelineStatusRunning'};
var _concourse$atc$Concourse$PipelineStatusPending = {ctor: 'PipelineStatusPending'};
var _concourse$atc$Concourse$PipelineStatusPaused = {ctor: 'PipelineStatusPaused'};
var _concourse$atc$Concourse$PipelineStatusFailed = {ctor: 'PipelineStatusFailed'};
var _concourse$atc$Concourse$PipelineStatusErrored = {ctor: 'PipelineStatusErrored'};
var _concourse$atc$Concourse$PipelineStatusAborted = {ctor: 'PipelineStatusAborted'};

var _concourse$atc$BuildDuration$pendingLabel = function (label) {
	return A2(
		_elm_lang$html$Html$tr,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$td,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('dict-key'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(label),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('dict-value'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		});
};
var _concourse$atc$BuildDuration$labeledDuration = F2(
	function (label, duration) {
		return A2(
			_elm_lang$html$Html$tr,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('dict-key'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(label),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('dict-value'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_concourse$atc$Duration$format(duration)),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _concourse$atc$BuildDuration$labeledRelativeDate = F3(
	function (label, now, date) {
		var ago = A2(
			_concourse$atc$Duration$between,
			_elm_lang$core$Date$toTime(date),
			now);
		return A2(
			_elm_lang$html$Html$tr,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('dict-key'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(label),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$title(
								A2(_mgold$elm_date_format$Date_Format$format, '%b %d %Y %I:%M:%S %p', date)),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('dict-value'),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(
											_elm_lang$core$Basics_ops['++'],
											_concourse$atc$Duration$format(ago),
											' ago')),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _concourse$atc$BuildDuration$show = F2(
	function (duration, now) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('build-duration'),
				_1: {ctor: '[]'}
			},
			function () {
				var _p0 = duration.startedAt;
				if (_p0.ctor === 'Nothing') {
					return {ctor: '[]'};
				} else {
					var elapsed = A2(
						_concourse$atc$Duration$between,
						_elm_lang$core$Date$toTime(_p0._0),
						now);
					return {
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_concourse$atc$Duration$format(elapsed)),
						_1: {ctor: '[]'}
					};
				}
			}());
	});
var _concourse$atc$BuildDuration$view = F2(
	function (duration, now) {
		return A2(
			_elm_lang$html$Html$table,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('dictionary build-duration'),
				_1: {ctor: '[]'}
			},
			function () {
				var _p1 = {ctor: '_Tuple2', _0: duration.startedAt, _1: duration.finishedAt};
				if (_p1._0.ctor === 'Nothing') {
					if (_p1._1.ctor === 'Nothing') {
						return {
							ctor: '::',
							_0: _concourse$atc$BuildDuration$pendingLabel('pending'),
							_1: {ctor: '[]'}
						};
					} else {
						return {
							ctor: '::',
							_0: A3(_concourse$atc$BuildDuration$labeledRelativeDate, 'finished', now, _p1._1._0),
							_1: {ctor: '[]'}
						};
					}
				} else {
					if (_p1._1.ctor === 'Nothing') {
						return {
							ctor: '::',
							_0: A3(_concourse$atc$BuildDuration$labeledRelativeDate, 'started', now, _p1._0._0),
							_1: {ctor: '[]'}
						};
					} else {
						var _p3 = _p1._0._0;
						var _p2 = _p1._1._0;
						var durationElmIssue = A2(
							_concourse$atc$Duration$between,
							_elm_lang$core$Date$toTime(_p3),
							_elm_lang$core$Date$toTime(_p2));
						return {
							ctor: '::',
							_0: A3(_concourse$atc$BuildDuration$labeledRelativeDate, 'started', now, _p3),
							_1: {
								ctor: '::',
								_0: A3(_concourse$atc$BuildDuration$labeledRelativeDate, 'finished', now, _p2),
								_1: {
									ctor: '::',
									_0: A2(_concourse$atc$BuildDuration$labeledDuration, 'duration', durationElmIssue),
									_1: {ctor: '[]'}
								}
							}
						};
					}
				}
			}());
	});

var _elm_lang$html$Html_Lazy$lazy3 = _elm_lang$virtual_dom$VirtualDom$lazy3;
var _elm_lang$html$Html_Lazy$lazy2 = _elm_lang$virtual_dom$VirtualDom$lazy2;
var _elm_lang$html$Html_Lazy$lazy = _elm_lang$virtual_dom$VirtualDom$lazy;

var _vito$elm_ansi$Ansi$encodeCode = function (code) {
	var _p0 = code;
	if (_p0.ctor === 'Nothing') {
		return '';
	} else {
		return _elm_lang$core$Basics$toString(_p0._0);
	}
};
var _vito$elm_ansi$Ansi$encodeCodes = function (codes) {
	return A2(
		_elm_lang$core$String$join,
		';',
		A2(_elm_lang$core$List$map, _vito$elm_ansi$Ansi$encodeCode, codes));
};
var _vito$elm_ansi$Ansi$RestoreCursorPosition = {ctor: 'RestoreCursorPosition'};
var _vito$elm_ansi$Ansi$SaveCursorPosition = {ctor: 'SaveCursorPosition'};
var _vito$elm_ansi$Ansi$EraseLine = function (a) {
	return {ctor: 'EraseLine', _0: a};
};
var _vito$elm_ansi$Ansi$EraseDisplay = function (a) {
	return {ctor: 'EraseDisplay', _0: a};
};
var _vito$elm_ansi$Ansi$CursorColumn = function (a) {
	return {ctor: 'CursorColumn', _0: a};
};
var _vito$elm_ansi$Ansi$CursorPosition = F2(
	function (a, b) {
		return {ctor: 'CursorPosition', _0: a, _1: b};
	});
var _vito$elm_ansi$Ansi$cursorPosition = function (codes) {
	var _p1 = codes;
	_v1_5:
	do {
		if (_p1.ctor === '::') {
			if (_p1._0.ctor === 'Nothing') {
				if (_p1._1.ctor === '[]') {
					return {
						ctor: '::',
						_0: A2(_vito$elm_ansi$Ansi$CursorPosition, 1, 1),
						_1: {ctor: '[]'}
					};
				} else {
					if (_p1._1._0.ctor === 'Nothing') {
						if (_p1._1._1.ctor === '[]') {
							return {
								ctor: '::',
								_0: A2(_vito$elm_ansi$Ansi$CursorPosition, 1, 1),
								_1: {ctor: '[]'}
							};
						} else {
							break _v1_5;
						}
					} else {
						if (_p1._1._1.ctor === '[]') {
							return {
								ctor: '::',
								_0: A2(_vito$elm_ansi$Ansi$CursorPosition, 1, _p1._1._0._0),
								_1: {ctor: '[]'}
							};
						} else {
							break _v1_5;
						}
					}
				}
			} else {
				if (_p1._1.ctor === '::') {
					if (_p1._1._0.ctor === 'Nothing') {
						if (_p1._1._1.ctor === '[]') {
							return {
								ctor: '::',
								_0: A2(_vito$elm_ansi$Ansi$CursorPosition, _p1._0._0, 1),
								_1: {ctor: '[]'}
							};
						} else {
							break _v1_5;
						}
					} else {
						if (_p1._1._1.ctor === '[]') {
							return {
								ctor: '::',
								_0: A2(_vito$elm_ansi$Ansi$CursorPosition, _p1._0._0, _p1._1._0._0),
								_1: {ctor: '[]'}
							};
						} else {
							break _v1_5;
						}
					}
				} else {
					break _v1_5;
				}
			}
		} else {
			break _v1_5;
		}
	} while(false);
	return {ctor: '[]'};
};
var _vito$elm_ansi$Ansi$CursorBack = function (a) {
	return {ctor: 'CursorBack', _0: a};
};
var _vito$elm_ansi$Ansi$CursorForward = function (a) {
	return {ctor: 'CursorForward', _0: a};
};
var _vito$elm_ansi$Ansi$CursorDown = function (a) {
	return {ctor: 'CursorDown', _0: a};
};
var _vito$elm_ansi$Ansi$CursorUp = function (a) {
	return {ctor: 'CursorUp', _0: a};
};
var _vito$elm_ansi$Ansi$CarriageReturn = {ctor: 'CarriageReturn'};
var _vito$elm_ansi$Ansi$Linebreak = {ctor: 'Linebreak'};
var _vito$elm_ansi$Ansi$SetInverted = function (a) {
	return {ctor: 'SetInverted', _0: a};
};
var _vito$elm_ansi$Ansi$SetBlink = function (a) {
	return {ctor: 'SetBlink', _0: a};
};
var _vito$elm_ansi$Ansi$SetUnderline = function (a) {
	return {ctor: 'SetUnderline', _0: a};
};
var _vito$elm_ansi$Ansi$SetItalic = function (a) {
	return {ctor: 'SetItalic', _0: a};
};
var _vito$elm_ansi$Ansi$SetFaint = function (a) {
	return {ctor: 'SetFaint', _0: a};
};
var _vito$elm_ansi$Ansi$SetBold = function (a) {
	return {ctor: 'SetBold', _0: a};
};
var _vito$elm_ansi$Ansi$SetBackground = function (a) {
	return {ctor: 'SetBackground', _0: a};
};
var _vito$elm_ansi$Ansi$SetForeground = function (a) {
	return {ctor: 'SetForeground', _0: a};
};
var _vito$elm_ansi$Ansi$reset = {
	ctor: '::',
	_0: _vito$elm_ansi$Ansi$SetForeground(_elm_lang$core$Maybe$Nothing),
	_1: {
		ctor: '::',
		_0: _vito$elm_ansi$Ansi$SetBackground(_elm_lang$core$Maybe$Nothing),
		_1: {
			ctor: '::',
			_0: _vito$elm_ansi$Ansi$SetBold(false),
			_1: {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetFaint(false),
				_1: {
					ctor: '::',
					_0: _vito$elm_ansi$Ansi$SetItalic(false),
					_1: {
						ctor: '::',
						_0: _vito$elm_ansi$Ansi$SetUnderline(false),
						_1: {
							ctor: '::',
							_0: _vito$elm_ansi$Ansi$SetBlink(false),
							_1: {
								ctor: '::',
								_0: _vito$elm_ansi$Ansi$SetInverted(false),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	}
};
var _vito$elm_ansi$Ansi$Remainder = function (a) {
	return {ctor: 'Remainder', _0: a};
};
var _vito$elm_ansi$Ansi$Print = function (a) {
	return {ctor: 'Print', _0: a};
};
var _vito$elm_ansi$Ansi$completeParsing = function (parser) {
	var _p2 = parser;
	switch (_p2._0.ctor) {
		case 'Escaped':
			return A2(
				_p2._2,
				_vito$elm_ansi$Ansi$Remainder(''),
				_p2._1);
		case 'CSI':
			return A2(
				_p2._2,
				_vito$elm_ansi$Ansi$Remainder(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'[',
						_vito$elm_ansi$Ansi$encodeCodes(
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p2._0._0,
								{
									ctor: '::',
									_0: _p2._0._1,
									_1: {ctor: '[]'}
								})))),
				_p2._1);
		default:
			if (_p2._0._0 === '') {
				return _p2._1;
			} else {
				return A2(
					_p2._2,
					_vito$elm_ansi$Ansi$Print(_p2._0._0),
					_p2._1);
			}
	}
};
var _vito$elm_ansi$Ansi$completeUnescaped = function (parser) {
	var _p3 = parser;
	if (_p3._0.ctor === 'Unescaped') {
		if (_p3._0._0 === '') {
			return _p3._1;
		} else {
			return A2(
				_p3._2,
				_vito$elm_ansi$Ansi$Print(_p3._0._0),
				_p3._1);
		}
	} else {
		return _p3._1;
	}
};
var _vito$elm_ansi$Ansi$BrightWhite = {ctor: 'BrightWhite'};
var _vito$elm_ansi$Ansi$BrightCyan = {ctor: 'BrightCyan'};
var _vito$elm_ansi$Ansi$BrightMagenta = {ctor: 'BrightMagenta'};
var _vito$elm_ansi$Ansi$BrightBlue = {ctor: 'BrightBlue'};
var _vito$elm_ansi$Ansi$BrightYellow = {ctor: 'BrightYellow'};
var _vito$elm_ansi$Ansi$BrightGreen = {ctor: 'BrightGreen'};
var _vito$elm_ansi$Ansi$BrightRed = {ctor: 'BrightRed'};
var _vito$elm_ansi$Ansi$BrightBlack = {ctor: 'BrightBlack'};
var _vito$elm_ansi$Ansi$White = {ctor: 'White'};
var _vito$elm_ansi$Ansi$Cyan = {ctor: 'Cyan'};
var _vito$elm_ansi$Ansi$Magenta = {ctor: 'Magenta'};
var _vito$elm_ansi$Ansi$Blue = {ctor: 'Blue'};
var _vito$elm_ansi$Ansi$Yellow = {ctor: 'Yellow'};
var _vito$elm_ansi$Ansi$Green = {ctor: 'Green'};
var _vito$elm_ansi$Ansi$Red = {ctor: 'Red'};
var _vito$elm_ansi$Ansi$Black = {ctor: 'Black'};
var _vito$elm_ansi$Ansi$codeActions = function (code) {
	var _p4 = code;
	switch (_p4) {
		case 0:
			return _vito$elm_ansi$Ansi$reset;
		case 1:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetBold(true),
				_1: {ctor: '[]'}
			};
		case 2:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetFaint(true),
				_1: {ctor: '[]'}
			};
		case 3:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetItalic(true),
				_1: {ctor: '[]'}
			};
		case 4:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetUnderline(true),
				_1: {ctor: '[]'}
			};
		case 5:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetBlink(true),
				_1: {ctor: '[]'}
			};
		case 7:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetInverted(true),
				_1: {ctor: '[]'}
			};
		case 30:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetForeground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$Black)),
				_1: {ctor: '[]'}
			};
		case 31:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetForeground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$Red)),
				_1: {ctor: '[]'}
			};
		case 32:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetForeground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$Green)),
				_1: {ctor: '[]'}
			};
		case 33:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetForeground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$Yellow)),
				_1: {ctor: '[]'}
			};
		case 34:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetForeground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$Blue)),
				_1: {ctor: '[]'}
			};
		case 35:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetForeground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$Magenta)),
				_1: {ctor: '[]'}
			};
		case 36:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetForeground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$Cyan)),
				_1: {ctor: '[]'}
			};
		case 37:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetForeground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$White)),
				_1: {ctor: '[]'}
			};
		case 39:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetForeground(_elm_lang$core$Maybe$Nothing),
				_1: {ctor: '[]'}
			};
		case 40:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetBackground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$Black)),
				_1: {ctor: '[]'}
			};
		case 41:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetBackground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$Red)),
				_1: {ctor: '[]'}
			};
		case 42:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetBackground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$Green)),
				_1: {ctor: '[]'}
			};
		case 43:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetBackground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$Yellow)),
				_1: {ctor: '[]'}
			};
		case 44:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetBackground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$Blue)),
				_1: {ctor: '[]'}
			};
		case 45:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetBackground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$Magenta)),
				_1: {ctor: '[]'}
			};
		case 46:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetBackground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$Cyan)),
				_1: {ctor: '[]'}
			};
		case 47:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetBackground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$White)),
				_1: {ctor: '[]'}
			};
		case 49:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetBackground(_elm_lang$core$Maybe$Nothing),
				_1: {ctor: '[]'}
			};
		case 90:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetForeground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$BrightBlack)),
				_1: {ctor: '[]'}
			};
		case 91:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetForeground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$BrightRed)),
				_1: {ctor: '[]'}
			};
		case 92:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetForeground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$BrightGreen)),
				_1: {ctor: '[]'}
			};
		case 93:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetForeground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$BrightYellow)),
				_1: {ctor: '[]'}
			};
		case 94:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetForeground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$BrightBlue)),
				_1: {ctor: '[]'}
			};
		case 95:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetForeground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$BrightMagenta)),
				_1: {ctor: '[]'}
			};
		case 96:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetForeground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$BrightCyan)),
				_1: {ctor: '[]'}
			};
		case 97:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetForeground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$BrightWhite)),
				_1: {ctor: '[]'}
			};
		case 100:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetBackground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$BrightBlack)),
				_1: {ctor: '[]'}
			};
		case 101:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetBackground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$BrightRed)),
				_1: {ctor: '[]'}
			};
		case 102:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetBackground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$BrightGreen)),
				_1: {ctor: '[]'}
			};
		case 103:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetBackground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$BrightYellow)),
				_1: {ctor: '[]'}
			};
		case 104:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetBackground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$BrightBlue)),
				_1: {ctor: '[]'}
			};
		case 105:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetBackground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$BrightMagenta)),
				_1: {ctor: '[]'}
			};
		case 106:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetBackground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$BrightCyan)),
				_1: {ctor: '[]'}
			};
		case 107:
			return {
				ctor: '::',
				_0: _vito$elm_ansi$Ansi$SetBackground(
					_elm_lang$core$Maybe$Just(_vito$elm_ansi$Ansi$BrightWhite)),
				_1: {ctor: '[]'}
			};
		default:
			return {ctor: '[]'};
	}
};
var _vito$elm_ansi$Ansi$EraseAll = {ctor: 'EraseAll'};
var _vito$elm_ansi$Ansi$EraseToEnd = {ctor: 'EraseToEnd'};
var _vito$elm_ansi$Ansi$EraseToBeginning = {ctor: 'EraseToBeginning'};
var _vito$elm_ansi$Ansi$eraseMode = function (code) {
	var _p5 = code;
	switch (_p5) {
		case 0:
			return _vito$elm_ansi$Ansi$EraseToEnd;
		case 1:
			return _vito$elm_ansi$Ansi$EraseToBeginning;
		default:
			return _vito$elm_ansi$Ansi$EraseAll;
	}
};
var _vito$elm_ansi$Ansi$Parser = F3(
	function (a, b, c) {
		return {ctor: 'Parser', _0: a, _1: b, _2: c};
	});
var _vito$elm_ansi$Ansi$Unescaped = function (a) {
	return {ctor: 'Unescaped', _0: a};
};
var _vito$elm_ansi$Ansi$emptyParser = _vito$elm_ansi$Ansi$Parser(
	_vito$elm_ansi$Ansi$Unescaped(''));
var _vito$elm_ansi$Ansi$completeBracketed = F2(
	function (_p6, actions) {
		var _p7 = _p6;
		var _p8 = _p7._2;
		return A3(
			_vito$elm_ansi$Ansi$Parser,
			_vito$elm_ansi$Ansi$Unescaped(''),
			A3(_elm_lang$core$List$foldl, _p8, _p7._1, actions),
			_p8);
	});
var _vito$elm_ansi$Ansi$CSI = F2(
	function (a, b) {
		return {ctor: 'CSI', _0: a, _1: b};
	});
var _vito$elm_ansi$Ansi$Escaped = {ctor: 'Escaped'};
var _vito$elm_ansi$Ansi$parseChar = F2(
	function ($char, parser) {
		var _p9 = parser;
		switch (_p9._0.ctor) {
			case 'Unescaped':
				var _p11 = _p9._2;
				var _p10 = $char;
				switch (_p10) {
					case '\r':
						return A3(
							_vito$elm_ansi$Ansi$Parser,
							_vito$elm_ansi$Ansi$Unescaped(''),
							A2(
								_p11,
								_vito$elm_ansi$Ansi$CarriageReturn,
								_vito$elm_ansi$Ansi$completeUnescaped(parser)),
							_p11);
					case '\n':
						return A3(
							_vito$elm_ansi$Ansi$Parser,
							_vito$elm_ansi$Ansi$Unescaped(''),
							A2(
								_p11,
								_vito$elm_ansi$Ansi$Linebreak,
								_vito$elm_ansi$Ansi$completeUnescaped(parser)),
							_p11);
					case '':
						return A3(
							_vito$elm_ansi$Ansi$Parser,
							_vito$elm_ansi$Ansi$Escaped,
							_vito$elm_ansi$Ansi$completeUnescaped(parser),
							_p11);
					default:
						return A3(
							_vito$elm_ansi$Ansi$Parser,
							_vito$elm_ansi$Ansi$Unescaped(
								A2(_elm_lang$core$Basics_ops['++'], _p9._0._0, $char)),
							_p9._1,
							_p11);
				}
			case 'Escaped':
				var _p14 = _p9._2;
				var _p13 = _p9._1;
				var _p12 = $char;
				if (_p12 === '[') {
					return A3(
						_vito$elm_ansi$Ansi$Parser,
						A2(
							_vito$elm_ansi$Ansi$CSI,
							{ctor: '[]'},
							_elm_lang$core$Maybe$Nothing),
						_p13,
						_p14);
				} else {
					return A3(
						_vito$elm_ansi$Ansi$Parser,
						_vito$elm_ansi$Ansi$Unescaped($char),
						_p13,
						_p14);
				}
			default:
				var _p21 = _p9._2;
				var _p20 = _p9._1;
				var _p19 = _p9._0._1;
				var _p18 = _p9._0._0;
				var _p15 = $char;
				switch (_p15) {
					case 'm':
						return A2(
							_vito$elm_ansi$Ansi$completeBracketed,
							parser,
							A2(
								_elm_lang$core$List$concatMap,
								function (_p16) {
									return _vito$elm_ansi$Ansi$codeActions(
										A2(_elm_lang$core$Maybe$withDefault, 0, _p16));
								},
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p18,
									{
										ctor: '::',
										_0: _p19,
										_1: {ctor: '[]'}
									})));
					case 'A':
						return A2(
							_vito$elm_ansi$Ansi$completeBracketed,
							parser,
							{
								ctor: '::',
								_0: _vito$elm_ansi$Ansi$CursorUp(
									A2(_elm_lang$core$Maybe$withDefault, 1, _p19)),
								_1: {ctor: '[]'}
							});
					case 'B':
						return A2(
							_vito$elm_ansi$Ansi$completeBracketed,
							parser,
							{
								ctor: '::',
								_0: _vito$elm_ansi$Ansi$CursorDown(
									A2(_elm_lang$core$Maybe$withDefault, 1, _p19)),
								_1: {ctor: '[]'}
							});
					case 'C':
						return A2(
							_vito$elm_ansi$Ansi$completeBracketed,
							parser,
							{
								ctor: '::',
								_0: _vito$elm_ansi$Ansi$CursorForward(
									A2(_elm_lang$core$Maybe$withDefault, 1, _p19)),
								_1: {ctor: '[]'}
							});
					case 'D':
						return A2(
							_vito$elm_ansi$Ansi$completeBracketed,
							parser,
							{
								ctor: '::',
								_0: _vito$elm_ansi$Ansi$CursorBack(
									A2(_elm_lang$core$Maybe$withDefault, 1, _p19)),
								_1: {ctor: '[]'}
							});
					case 'E':
						return A2(
							_vito$elm_ansi$Ansi$completeBracketed,
							parser,
							{
								ctor: '::',
								_0: _vito$elm_ansi$Ansi$CursorDown(
									A2(_elm_lang$core$Maybe$withDefault, 1, _p19)),
								_1: {
									ctor: '::',
									_0: _vito$elm_ansi$Ansi$CursorColumn(0),
									_1: {ctor: '[]'}
								}
							});
					case 'F':
						return A2(
							_vito$elm_ansi$Ansi$completeBracketed,
							parser,
							{
								ctor: '::',
								_0: _vito$elm_ansi$Ansi$CursorUp(
									A2(_elm_lang$core$Maybe$withDefault, 1, _p19)),
								_1: {
									ctor: '::',
									_0: _vito$elm_ansi$Ansi$CursorColumn(0),
									_1: {ctor: '[]'}
								}
							});
					case 'G':
						return A2(
							_vito$elm_ansi$Ansi$completeBracketed,
							parser,
							{
								ctor: '::',
								_0: _vito$elm_ansi$Ansi$CursorColumn(
									A2(_elm_lang$core$Maybe$withDefault, 0, _p19)),
								_1: {ctor: '[]'}
							});
					case 'H':
						return A2(
							_vito$elm_ansi$Ansi$completeBracketed,
							parser,
							_vito$elm_ansi$Ansi$cursorPosition(
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p18,
									{
										ctor: '::',
										_0: _p19,
										_1: {ctor: '[]'}
									})));
					case 'J':
						return A2(
							_vito$elm_ansi$Ansi$completeBracketed,
							parser,
							{
								ctor: '::',
								_0: _vito$elm_ansi$Ansi$EraseDisplay(
									_vito$elm_ansi$Ansi$eraseMode(
										A2(_elm_lang$core$Maybe$withDefault, 0, _p19))),
								_1: {ctor: '[]'}
							});
					case 'K':
						return A2(
							_vito$elm_ansi$Ansi$completeBracketed,
							parser,
							{
								ctor: '::',
								_0: _vito$elm_ansi$Ansi$EraseLine(
									_vito$elm_ansi$Ansi$eraseMode(
										A2(_elm_lang$core$Maybe$withDefault, 0, _p19))),
								_1: {ctor: '[]'}
							});
					case 'f':
						return A2(
							_vito$elm_ansi$Ansi$completeBracketed,
							parser,
							_vito$elm_ansi$Ansi$cursorPosition(
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p18,
									{
										ctor: '::',
										_0: _p19,
										_1: {ctor: '[]'}
									})));
					case 's':
						return A2(
							_vito$elm_ansi$Ansi$completeBracketed,
							parser,
							{
								ctor: '::',
								_0: _vito$elm_ansi$Ansi$SaveCursorPosition,
								_1: {ctor: '[]'}
							});
					case 'u':
						return A2(
							_vito$elm_ansi$Ansi$completeBracketed,
							parser,
							{
								ctor: '::',
								_0: _vito$elm_ansi$Ansi$RestoreCursorPosition,
								_1: {ctor: '[]'}
							});
					case ';':
						return A3(
							_vito$elm_ansi$Ansi$Parser,
							A2(
								_vito$elm_ansi$Ansi$CSI,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p18,
									{
										ctor: '::',
										_0: _p19,
										_1: {ctor: '[]'}
									}),
								_elm_lang$core$Maybe$Nothing),
							_p20,
							_p21);
					default:
						var _p17 = _elm_lang$core$String$toInt(_p15);
						if (_p17.ctor === 'Ok') {
							return A3(
								_vito$elm_ansi$Ansi$Parser,
								A2(
									_vito$elm_ansi$Ansi$CSI,
									_p18,
									_elm_lang$core$Maybe$Just(
										(A2(_elm_lang$core$Maybe$withDefault, 0, _p19) * 10) + _p17._0)),
								_p20,
								_p21);
						} else {
							return A2(
								_vito$elm_ansi$Ansi$completeBracketed,
								parser,
								{ctor: '[]'});
						}
				}
		}
	});
var _vito$elm_ansi$Ansi$parseInto = F3(
	function (model, update, ansi) {
		return _vito$elm_ansi$Ansi$completeParsing(
			A3(
				_elm_lang$core$List$foldl,
				_vito$elm_ansi$Ansi$parseChar,
				A2(_vito$elm_ansi$Ansi$emptyParser, model, update),
				A2(_elm_lang$core$String$split, '', ansi)));
	});
var _vito$elm_ansi$Ansi$parse = function (_p22) {
	return _elm_lang$core$List$reverse(
		A3(
			_vito$elm_ansi$Ansi$parseInto,
			{ctor: '[]'},
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			_p22));
};

var _vito$elm_ansi$Ansi_Log$colorClasses = F3(
	function (suffix, bold, mc) {
		var brightPrefix = 'ansi-bright-';
		var prefix = bold ? brightPrefix : 'ansi-';
		var _p0 = mc;
		if (_p0.ctor === 'Nothing') {
			return bold ? {
				ctor: '::',
				_0: 'ansi-bold',
				_1: {ctor: '[]'}
			} : {ctor: '[]'};
		} else {
			switch (_p0._0.ctor) {
				case 'Black':
					return {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Basics_ops['++'],
							prefix,
							A2(_elm_lang$core$Basics_ops['++'], 'black', suffix)),
						_1: {ctor: '[]'}
					};
				case 'Red':
					return {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Basics_ops['++'],
							prefix,
							A2(_elm_lang$core$Basics_ops['++'], 'red', suffix)),
						_1: {ctor: '[]'}
					};
				case 'Green':
					return {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Basics_ops['++'],
							prefix,
							A2(_elm_lang$core$Basics_ops['++'], 'green', suffix)),
						_1: {ctor: '[]'}
					};
				case 'Yellow':
					return {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Basics_ops['++'],
							prefix,
							A2(_elm_lang$core$Basics_ops['++'], 'yellow', suffix)),
						_1: {ctor: '[]'}
					};
				case 'Blue':
					return {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Basics_ops['++'],
							prefix,
							A2(_elm_lang$core$Basics_ops['++'], 'blue', suffix)),
						_1: {ctor: '[]'}
					};
				case 'Magenta':
					return {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Basics_ops['++'],
							prefix,
							A2(_elm_lang$core$Basics_ops['++'], 'magenta', suffix)),
						_1: {ctor: '[]'}
					};
				case 'Cyan':
					return {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Basics_ops['++'],
							prefix,
							A2(_elm_lang$core$Basics_ops['++'], 'cyan', suffix)),
						_1: {ctor: '[]'}
					};
				case 'White':
					return {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Basics_ops['++'],
							prefix,
							A2(_elm_lang$core$Basics_ops['++'], 'white', suffix)),
						_1: {ctor: '[]'}
					};
				case 'BrightBlack':
					return {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Basics_ops['++'],
							brightPrefix,
							A2(_elm_lang$core$Basics_ops['++'], 'black', suffix)),
						_1: {ctor: '[]'}
					};
				case 'BrightRed':
					return {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Basics_ops['++'],
							brightPrefix,
							A2(_elm_lang$core$Basics_ops['++'], 'red', suffix)),
						_1: {ctor: '[]'}
					};
				case 'BrightGreen':
					return {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Basics_ops['++'],
							brightPrefix,
							A2(_elm_lang$core$Basics_ops['++'], 'green', suffix)),
						_1: {ctor: '[]'}
					};
				case 'BrightYellow':
					return {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Basics_ops['++'],
							brightPrefix,
							A2(_elm_lang$core$Basics_ops['++'], 'yellow', suffix)),
						_1: {ctor: '[]'}
					};
				case 'BrightBlue':
					return {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Basics_ops['++'],
							brightPrefix,
							A2(_elm_lang$core$Basics_ops['++'], 'blue', suffix)),
						_1: {ctor: '[]'}
					};
				case 'BrightMagenta':
					return {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Basics_ops['++'],
							brightPrefix,
							A2(_elm_lang$core$Basics_ops['++'], 'magenta', suffix)),
						_1: {ctor: '[]'}
					};
				case 'BrightCyan':
					return {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Basics_ops['++'],
							brightPrefix,
							A2(_elm_lang$core$Basics_ops['++'], 'cyan', suffix)),
						_1: {ctor: '[]'}
					};
				default:
					return {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Basics_ops['++'],
							brightPrefix,
							A2(_elm_lang$core$Basics_ops['++'], 'white', suffix)),
						_1: {ctor: '[]'}
					};
			}
		}
	});
var _vito$elm_ansi$Ansi_Log$styleAttributes = function (style) {
	return {
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$style(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'font-weight',
					_1: style.bold ? 'bold' : 'normal'
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'text-decoration',
						_1: style.underline ? 'underline' : 'none'
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'font-style',
							_1: style.italic ? 'italic' : 'normal'
						},
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {
			ctor: '::',
			_0: function () {
				var ansiClasses = {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'ansi-blink', _1: style.blink},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'ansi-faint', _1: style.faint},
						_1: {ctor: '[]'}
					}
				};
				var bgClasses = A3(
					_vito$elm_ansi$Ansi_Log$colorClasses,
					'-bg',
					style.bold,
					(!style.inverted) ? style.background : style.foreground);
				var fgClasses = A3(
					_vito$elm_ansi$Ansi_Log$colorClasses,
					'-fg',
					style.bold,
					(!style.inverted) ? style.foreground : style.background);
				var fgbgClasses = A2(
					_elm_lang$core$List$map,
					A2(
						_elm_lang$core$Basics$flip,
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							}),
						true),
					A2(_elm_lang$core$Basics_ops['++'], fgClasses, bgClasses));
				return _elm_lang$html$Html_Attributes$classList(
					A2(_elm_lang$core$Basics_ops['++'], fgbgClasses, ansiClasses));
			}(),
			_1: {ctor: '[]'}
		}
	};
};
var _vito$elm_ansi$Ansi_Log$viewChunk = function (chunk) {
	return A2(
		_elm_lang$html$Html$span,
		_vito$elm_ansi$Ansi_Log$styleAttributes(chunk.style),
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(chunk.text),
			_1: {ctor: '[]'}
		});
};
var _vito$elm_ansi$Ansi_Log$viewLine = function (_p1) {
	var _p2 = _p1;
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		A3(
			_elm_lang$core$List$foldl,
			F2(
				function (c, l) {
					return {
						ctor: '::',
						_0: _vito$elm_ansi$Ansi_Log$viewChunk(c),
						_1: l
					};
				}),
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('\n'),
				_1: {ctor: '[]'}
			},
			_p2._0));
};
var _vito$elm_ansi$Ansi_Log$lazyLine = _elm_lang$html$Html_Lazy$lazy(_vito$elm_ansi$Ansi_Log$viewLine);
var _vito$elm_ansi$Ansi_Log$view = function (model) {
	return A2(
		_elm_lang$html$Html$pre,
		{ctor: '[]'},
		_elm_lang$core$Array$toList(
			A2(_elm_lang$core$Array$map, _vito$elm_ansi$Ansi_Log$lazyLine, model.lines)));
};
var _vito$elm_ansi$Ansi_Log$blankLine = {
	ctor: '_Tuple2',
	_0: {ctor: '[]'},
	_1: 0
};
var _vito$elm_ansi$Ansi_Log$spacing = F2(
	function (style, len) {
		return {
			style: style,
			text: A2(_elm_lang$core$String$repeat, len, ' ')
		};
	});
var _vito$elm_ansi$Ansi_Log$chunkLen = function (_p3) {
	return _elm_lang$core$String$length(
		function (_) {
			return _.text;
		}(_p3));
};
var _vito$elm_ansi$Ansi_Log$addChunk = F2(
	function (chunk, line) {
		var clen = _vito$elm_ansi$Ansi_Log$chunkLen(chunk);
		if (_elm_lang$core$Native_Utils.eq(clen, 0)) {
			return line;
		} else {
			var _p4 = line;
			if (_p4._0.ctor === '[]') {
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '::',
						_0: chunk,
						_1: {ctor: '[]'}
					},
					_1: clen
				};
			} else {
				var _p7 = _p4._1;
				var _p6 = _p4._0._1;
				var _p5 = _p4._0._0;
				return _elm_lang$core$Native_Utils.eq(_p5.style, chunk.style) ? {
					ctor: '_Tuple2',
					_0: {
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.update(
							_p5,
							{
								text: A2(_elm_lang$core$String$append, _p5.text, chunk.text)
							}),
						_1: _p6
					},
					_1: _p7 + clen
				} : {
					ctor: '_Tuple2',
					_0: {
						ctor: '::',
						_0: chunk,
						_1: {ctor: '::', _0: _p5, _1: _p6}
					},
					_1: _p7 + clen
				};
			}
		}
	});
var _vito$elm_ansi$Ansi_Log$dropRight = F2(
	function (n, line) {
		dropRight:
		while (true) {
			var _p8 = line;
			if (_p8._0.ctor === '[]') {
				return line;
			} else {
				var _p11 = _p8._1;
				var _p10 = _p8._0._1;
				var _p9 = _p8._0._0;
				var clen = _vito$elm_ansi$Ansi_Log$chunkLen(_p9);
				if (_elm_lang$core$Native_Utils.cmp(clen, n) < 1) {
					var _v4 = n - clen,
						_v5 = {ctor: '_Tuple2', _0: _p10, _1: _p11 - clen};
					n = _v4;
					line = _v5;
					continue dropRight;
				} else {
					return {
						ctor: '_Tuple2',
						_0: {
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.update(
								_p9,
								{
									text: A2(_elm_lang$core$String$dropRight, n, _p9.text)
								}),
							_1: _p10
						},
						_1: _p11 - n
					};
				}
			}
		}
	});
var _vito$elm_ansi$Ansi_Log$takeRight = F2(
	function (n, line) {
		var _p12 = line;
		if (_p12._0.ctor === '[]') {
			return line;
		} else {
			var _p13 = _p12._0._0;
			var clen = _vito$elm_ansi$Ansi_Log$chunkLen(_p13);
			return (_elm_lang$core$Native_Utils.cmp(clen, n) < 0) ? A2(
				_vito$elm_ansi$Ansi_Log$addChunk,
				_p13,
				A2(
					_vito$elm_ansi$Ansi_Log$takeRight,
					n - clen,
					{ctor: '_Tuple2', _0: _p12._0._1, _1: _p12._1 - clen})) : (_elm_lang$core$Native_Utils.eq(clen, n) ? {
				ctor: '_Tuple2',
				_0: {
					ctor: '::',
					_0: _p13,
					_1: {ctor: '[]'}
				},
				_1: clen
			} : {
				ctor: '_Tuple2',
				_0: {
					ctor: '::',
					_0: _elm_lang$core$Native_Utils.update(
						_p13,
						{
							text: A2(_elm_lang$core$String$right, n, _p13.text)
						}),
					_1: {ctor: '[]'}
				},
				_1: n
			});
		}
	});
var _vito$elm_ansi$Ansi_Log$lineLen = _elm_lang$core$Tuple$second;
var _vito$elm_ansi$Ansi_Log$writeChunk = F3(
	function (pos, chunk, line) {
		var len = _vito$elm_ansi$Ansi_Log$lineLen(line);
		var afterLen = len - (_vito$elm_ansi$Ansi_Log$chunkLen(chunk) + pos);
		var textChopped = len - pos;
		if (_elm_lang$core$Native_Utils.eq(len, pos)) {
			return A2(_vito$elm_ansi$Ansi_Log$addChunk, chunk, line);
		} else {
			if (_elm_lang$core$Native_Utils.cmp(pos, len) > 0) {
				return A2(
					_vito$elm_ansi$Ansi_Log$addChunk,
					chunk,
					A2(
						_vito$elm_ansi$Ansi_Log$addChunk,
						A2(_vito$elm_ansi$Ansi_Log$spacing, chunk.style, pos - len),
						line));
			} else {
				var appended = A2(
					_vito$elm_ansi$Ansi_Log$addChunk,
					chunk,
					A2(_vito$elm_ansi$Ansi_Log$dropRight, len - pos, line));
				return (_elm_lang$core$Native_Utils.cmp(afterLen, 0) > 0) ? A3(
					_elm_lang$core$List$foldl,
					_vito$elm_ansi$Ansi_Log$addChunk,
					appended,
					_elm_lang$core$Tuple$first(
						A2(_vito$elm_ansi$Ansi_Log$takeRight, afterLen, line))) : appended;
			}
		}
	});
var _vito$elm_ansi$Ansi_Log$takeLeft = F2(
	function (n, line) {
		return A2(
			_vito$elm_ansi$Ansi_Log$dropRight,
			_vito$elm_ansi$Ansi_Log$lineLen(line) - n,
			line);
	});
var _vito$elm_ansi$Ansi_Log$updateStyle = F2(
	function (action, style) {
		var _p14 = action;
		switch (_p14.ctor) {
			case 'SetForeground':
				return _elm_lang$core$Native_Utils.update(
					style,
					{foreground: _p14._0});
			case 'SetBackground':
				return _elm_lang$core$Native_Utils.update(
					style,
					{background: _p14._0});
			case 'SetInverted':
				return _elm_lang$core$Native_Utils.update(
					style,
					{inverted: _p14._0});
			case 'SetBold':
				return _elm_lang$core$Native_Utils.update(
					style,
					{bold: _p14._0});
			case 'SetFaint':
				return _elm_lang$core$Native_Utils.update(
					style,
					{faint: _p14._0});
			case 'SetItalic':
				return _elm_lang$core$Native_Utils.update(
					style,
					{italic: _p14._0});
			case 'SetUnderline':
				return _elm_lang$core$Native_Utils.update(
					style,
					{underline: _p14._0});
			case 'SetBlink':
				return _elm_lang$core$Native_Utils.update(
					style,
					{blink: _p14._0});
			default:
				return style;
		}
	});
var _vito$elm_ansi$Ansi_Log$appendLine = F3(
	function (after, line, lines) {
		appendLine:
		while (true) {
			if (_elm_lang$core$Native_Utils.eq(after, 0)) {
				return A2(_elm_lang$core$Array$push, line, lines);
			} else {
				var _v8 = after - 1,
					_v9 = line,
					_v10 = A2(_elm_lang$core$Array$push, _vito$elm_ansi$Ansi_Log$blankLine, lines);
				after = _v8;
				line = _v9;
				lines = _v10;
				continue appendLine;
			}
		}
	});
var _vito$elm_ansi$Ansi_Log$updateLine = F3(
	function (row, update, lines) {
		var line = update(
			A2(
				_elm_lang$core$Maybe$withDefault,
				_vito$elm_ansi$Ansi_Log$blankLine,
				A2(_elm_lang$core$Array$get, row, lines)));
		var currentLines = _elm_lang$core$Array$length(lines);
		return (_elm_lang$core$Native_Utils.cmp(row + 1, currentLines) > 0) ? A3(_vito$elm_ansi$Ansi_Log$appendLine, row - currentLines, line, lines) : A3(_elm_lang$core$Array$set, row, line, lines);
	});
var _vito$elm_ansi$Ansi_Log$moveCursor = F3(
	function (r, c, pos) {
		return _elm_lang$core$Native_Utils.update(
			pos,
			{row: pos.row + r, column: pos.column + c});
	});
var _vito$elm_ansi$Ansi_Log$init = function (ldisc) {
	return {
		lineDiscipline: ldisc,
		lines: _elm_lang$core$Array$empty,
		position: {row: 0, column: 0},
		savedPosition: _elm_lang$core$Maybe$Nothing,
		style: {foreground: _elm_lang$core$Maybe$Nothing, background: _elm_lang$core$Maybe$Nothing, bold: false, faint: false, italic: false, underline: false, blink: false, inverted: false},
		remainder: ''
	};
};
var _vito$elm_ansi$Ansi_Log$Model = F6(
	function (a, b, c, d, e, f) {
		return {lineDiscipline: a, lines: b, position: c, savedPosition: d, style: e, remainder: f};
	});
var _vito$elm_ansi$Ansi_Log$Chunk = F2(
	function (a, b) {
		return {text: a, style: b};
	});
var _vito$elm_ansi$Ansi_Log$Style = F8(
	function (a, b, c, d, e, f, g, h) {
		return {foreground: a, background: b, bold: c, faint: d, italic: e, underline: f, blink: g, inverted: h};
	});
var _vito$elm_ansi$Ansi_Log$CursorPosition = F2(
	function (a, b) {
		return {row: a, column: b};
	});
var _vito$elm_ansi$Ansi_Log$handleAction = F2(
	function (action, model) {
		handleAction:
		while (true) {
			var _p15 = action;
			switch (_p15.ctor) {
				case 'Print':
					var chunk = A2(_vito$elm_ansi$Ansi_Log$Chunk, _p15._0, model.style);
					var update = A2(_vito$elm_ansi$Ansi_Log$writeChunk, model.position.column, chunk);
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							lines: A3(_vito$elm_ansi$Ansi_Log$updateLine, model.position.row, update, model.lines),
							position: A3(
								_vito$elm_ansi$Ansi_Log$moveCursor,
								0,
								_vito$elm_ansi$Ansi_Log$chunkLen(chunk),
								model.position)
						});
				case 'CarriageReturn':
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							position: A2(_vito$elm_ansi$Ansi_Log$CursorPosition, model.position.row, 0)
						});
				case 'Linebreak':
					var _v13 = _vito$elm_ansi$Ansi$Print(''),
						_v14 = function () {
						var _p16 = model.lineDiscipline;
						if (_p16.ctor === 'Raw') {
							return _elm_lang$core$Native_Utils.update(
								model,
								{
									position: A3(_vito$elm_ansi$Ansi_Log$moveCursor, 1, 0, model.position)
								});
						} else {
							return _elm_lang$core$Native_Utils.update(
								model,
								{
									position: A2(_vito$elm_ansi$Ansi_Log$CursorPosition, model.position.row + 1, 0)
								});
						}
					}();
					action = _v13;
					model = _v14;
					continue handleAction;
				case 'Remainder':
					return _elm_lang$core$Native_Utils.update(
						model,
						{remainder: _p15._0});
				case 'CursorUp':
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							position: A3(_vito$elm_ansi$Ansi_Log$moveCursor, 0 - _p15._0, 0, model.position)
						});
				case 'CursorDown':
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							position: A3(_vito$elm_ansi$Ansi_Log$moveCursor, _p15._0, 0, model.position)
						});
				case 'CursorForward':
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							position: A3(_vito$elm_ansi$Ansi_Log$moveCursor, 0, _p15._0, model.position)
						});
				case 'CursorBack':
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							position: A3(_vito$elm_ansi$Ansi_Log$moveCursor, 0, 0 - _p15._0, model.position)
						});
				case 'CursorPosition':
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							position: A2(_vito$elm_ansi$Ansi_Log$CursorPosition, _p15._0 - 1, _p15._1 - 1)
						});
				case 'CursorColumn':
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							position: A2(_vito$elm_ansi$Ansi_Log$CursorPosition, model.position.row, _p15._0)
						});
				case 'SaveCursorPosition':
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							savedPosition: _elm_lang$core$Maybe$Just(model.position)
						});
				case 'RestoreCursorPosition':
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							position: A2(_elm_lang$core$Maybe$withDefault, model.position, model.savedPosition)
						});
				case 'EraseLine':
					var _p17 = _p15._0;
					switch (_p17.ctor) {
						case 'EraseToBeginning':
							var chunk = A2(
								_vito$elm_ansi$Ansi_Log$Chunk,
								A2(_elm_lang$core$String$repeat, model.position.column, ' '),
								model.style);
							var update = A2(_vito$elm_ansi$Ansi_Log$writeChunk, 0, chunk);
							return _elm_lang$core$Native_Utils.update(
								model,
								{
									lines: A3(_vito$elm_ansi$Ansi_Log$updateLine, model.position.row, update, model.lines)
								});
						case 'EraseToEnd':
							var update = _vito$elm_ansi$Ansi_Log$takeLeft(model.position.column);
							return _elm_lang$core$Native_Utils.update(
								model,
								{
									lines: A3(_vito$elm_ansi$Ansi_Log$updateLine, model.position.row, update, model.lines)
								});
						default:
							return _elm_lang$core$Native_Utils.update(
								model,
								{
									lines: A3(
										_vito$elm_ansi$Ansi_Log$updateLine,
										model.position.row,
										_elm_lang$core$Basics$always(_vito$elm_ansi$Ansi_Log$blankLine),
										model.lines)
								});
					}
				default:
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							style: A2(_vito$elm_ansi$Ansi_Log$updateStyle, action, model.style)
						});
			}
		}
	});
var _vito$elm_ansi$Ansi_Log$update = F2(
	function (str, model) {
		return A3(
			_vito$elm_ansi$Ansi$parseInto,
			_elm_lang$core$Native_Utils.update(
				model,
				{remainder: ''}),
			_vito$elm_ansi$Ansi_Log$handleAction,
			A2(_elm_lang$core$Basics_ops['++'], model.remainder, str));
	});
var _vito$elm_ansi$Ansi_Log$Cooked = {ctor: 'Cooked'};
var _vito$elm_ansi$Ansi_Log$Raw = {ctor: 'Raw'};

var _concourse$atc$Format$prependBeta = function (url) {
	return A2(_elm_lang$core$Basics_ops['++'], '/beta', url);
};

var _elm_community$maybe_extra$Maybe_Extra$foldrValues = F2(
	function (item, list) {
		var _p0 = item;
		if (_p0.ctor === 'Nothing') {
			return list;
		} else {
			return {ctor: '::', _0: _p0._0, _1: list};
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$values = A2(
	_elm_lang$core$List$foldr,
	_elm_community$maybe_extra$Maybe_Extra$foldrValues,
	{ctor: '[]'});
var _elm_community$maybe_extra$Maybe_Extra$filter = F2(
	function (f, m) {
		var _p1 = A2(_elm_lang$core$Maybe$map, f, m);
		if ((_p1.ctor === 'Just') && (_p1._0 === true)) {
			return m;
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$traverseArray = function (f) {
	var step = F2(
		function (e, acc) {
			var _p2 = f(e);
			if (_p2.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return A2(
					_elm_lang$core$Maybe$map,
					_elm_lang$core$Array$push(_p2._0),
					acc);
			}
		});
	return A2(
		_elm_lang$core$Array$foldl,
		step,
		_elm_lang$core$Maybe$Just(_elm_lang$core$Array$empty));
};
var _elm_community$maybe_extra$Maybe_Extra$combineArray = _elm_community$maybe_extra$Maybe_Extra$traverseArray(_elm_lang$core$Basics$identity);
var _elm_community$maybe_extra$Maybe_Extra$traverse = function (f) {
	var step = F2(
		function (e, acc) {
			var _p3 = f(e);
			if (_p3.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return A2(
					_elm_lang$core$Maybe$map,
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						})(_p3._0),
					acc);
			}
		});
	return A2(
		_elm_lang$core$List$foldr,
		step,
		_elm_lang$core$Maybe$Just(
			{ctor: '[]'}));
};
var _elm_community$maybe_extra$Maybe_Extra$combine = _elm_community$maybe_extra$Maybe_Extra$traverse(_elm_lang$core$Basics$identity);
var _elm_community$maybe_extra$Maybe_Extra$maybeToArray = function (m) {
	var _p4 = m;
	if (_p4.ctor === 'Nothing') {
		return _elm_lang$core$Array$empty;
	} else {
		return A2(_elm_lang$core$Array$repeat, 1, _p4._0);
	}
};
var _elm_community$maybe_extra$Maybe_Extra$maybeToList = function (m) {
	var _p5 = m;
	if (_p5.ctor === 'Nothing') {
		return {ctor: '[]'};
	} else {
		return {
			ctor: '::',
			_0: _p5._0,
			_1: {ctor: '[]'}
		};
	}
};
var _elm_community$maybe_extra$Maybe_Extra$orElse = F2(
	function (ma, mb) {
		var _p6 = mb;
		if (_p6.ctor === 'Nothing') {
			return ma;
		} else {
			return mb;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$orElseLazy = F2(
	function (fma, mb) {
		var _p7 = mb;
		if (_p7.ctor === 'Nothing') {
			return fma(
				{ctor: '_Tuple0'});
		} else {
			return mb;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$orLazy = F2(
	function (ma, fmb) {
		var _p8 = ma;
		if (_p8.ctor === 'Nothing') {
			return fmb(
				{ctor: '_Tuple0'});
		} else {
			return ma;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$or = F2(
	function (ma, mb) {
		var _p9 = ma;
		if (_p9.ctor === 'Nothing') {
			return mb;
		} else {
			return ma;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$prev = _elm_lang$core$Maybe$map2(_elm_lang$core$Basics$always);
var _elm_community$maybe_extra$Maybe_Extra$next = _elm_lang$core$Maybe$map2(
	_elm_lang$core$Basics$flip(_elm_lang$core$Basics$always));
var _elm_community$maybe_extra$Maybe_Extra$andMap = _elm_lang$core$Maybe$map2(
	F2(
		function (x, y) {
			return y(x);
		}));
var _elm_community$maybe_extra$Maybe_Extra$unpack = F3(
	function (d, f, m) {
		var _p10 = m;
		if (_p10.ctor === 'Nothing') {
			return d(
				{ctor: '_Tuple0'});
		} else {
			return f(_p10._0);
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$unwrap = F3(
	function (d, f, m) {
		var _p11 = m;
		if (_p11.ctor === 'Nothing') {
			return d;
		} else {
			return f(_p11._0);
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$isJust = function (m) {
	var _p12 = m;
	if (_p12.ctor === 'Nothing') {
		return false;
	} else {
		return true;
	}
};
var _elm_community$maybe_extra$Maybe_Extra$isNothing = function (m) {
	var _p13 = m;
	if (_p13.ctor === 'Nothing') {
		return true;
	} else {
		return false;
	}
};
var _elm_community$maybe_extra$Maybe_Extra$join = function (mx) {
	var _p14 = mx;
	if (_p14.ctor === 'Just') {
		return _p14._0;
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_community$maybe_extra$Maybe_Extra_ops = _elm_community$maybe_extra$Maybe_Extra_ops || {};
_elm_community$maybe_extra$Maybe_Extra_ops['?'] = F2(
	function (mx, x) {
		return A2(_elm_lang$core$Maybe$withDefault, x, mx);
	});

var _concourse$atc$Concourse_Pagination$parseNum = function (_p0) {
	return _elm_lang$core$Result$toMaybe(
		_elm_lang$core$String$toInt(_p0));
};
var _concourse$atc$Concourse_Pagination$toQuery = function (page) {
	var _p1 = page;
	if (_p1.ctor === 'Nothing') {
		return _elm_lang$core$Dict$empty;
	} else {
		var _p3 = _p1._0;
		var limitParam = {
			ctor: '_Tuple2',
			_0: 'limit',
			_1: _elm_lang$core$Basics$toString(_p3.limit)
		};
		var directionParam = function () {
			var _p2 = _p3.direction;
			switch (_p2.ctor) {
				case 'Since':
					return {
						ctor: '_Tuple2',
						_0: 'since',
						_1: _elm_lang$core$Basics$toString(_p2._0)
					};
				case 'Until':
					return {
						ctor: '_Tuple2',
						_0: 'until',
						_1: _elm_lang$core$Basics$toString(_p2._0)
					};
				case 'From':
					return {
						ctor: '_Tuple2',
						_0: 'from',
						_1: _elm_lang$core$Basics$toString(_p2._0)
					};
				default:
					return {
						ctor: '_Tuple2',
						_0: 'to',
						_1: _elm_lang$core$Basics$toString(_p2._0)
					};
			}
		}();
		return _elm_lang$core$Dict$fromList(
			{
				ctor: '::',
				_0: directionParam,
				_1: {
					ctor: '::',
					_0: limitParam,
					_1: {ctor: '[]'}
				}
			});
	}
};
var _concourse$atc$Concourse_Pagination$parseQuery = function (query) {
	var parseParam = function (p) {
		var _p4 = A2(_elm_lang$core$String$split, '=', p);
		if (_p4.ctor === '::') {
			return {
				ctor: '_Tuple2',
				_0: _p4._0,
				_1: A2(_elm_lang$core$String$join, '=', _p4._1)
			};
		} else {
			return {ctor: '_Tuple2', _0: '', _1: ''};
		}
	};
	return _elm_lang$core$Dict$fromList(
		A2(
			_elm_lang$core$List$map,
			parseParam,
			A2(_elm_lang$core$String$split, '&', query)));
};
var _concourse$atc$Concourse_Pagination$setQuery = F2(
	function (baseURL, query) {
		var params = A2(
			_elm_lang$core$String$join,
			'&',
			A2(
				_elm_lang$core$List$map,
				function (_p5) {
					var _p6 = _p5;
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_p6._0,
						A2(_elm_lang$core$Basics_ops['++'], '=', _p6._1));
				},
				_elm_lang$core$Dict$toList(query)));
		return _elm_lang$core$Native_Utils.eq(params, '') ? baseURL : A2(
			_elm_lang$core$Basics_ops['++'],
			baseURL,
			A2(_elm_lang$core$Basics_ops['++'], '?', params));
	});
var _concourse$atc$Concourse_Pagination$extractQuery = function (url) {
	var _p7 = A2(_elm_lang$core$String$split, '?', url);
	if ((_p7.ctor === '::') && (_p7._1.ctor === '::')) {
		return {
			ctor: '_Tuple2',
			_0: _p7._0,
			_1: _concourse$atc$Concourse_Pagination$parseQuery(_p7._1._0)
		};
	} else {
		return {ctor: '_Tuple2', _0: url, _1: _elm_lang$core$Dict$empty};
	}
};
var _concourse$atc$Concourse_Pagination$addParams = F2(
	function (url, page) {
		var _p8 = _concourse$atc$Concourse_Pagination$extractQuery(url);
		var baseURL = _p8._0;
		var query = _p8._1;
		return A2(
			_concourse$atc$Concourse_Pagination$setQuery,
			baseURL,
			A2(
				_elm_lang$core$Dict$union,
				query,
				_concourse$atc$Concourse_Pagination$toQuery(page)));
	});
var _concourse$atc$Concourse_Pagination$fstToLower = function (_p9) {
	var _p10 = _p9;
	return {
		ctor: '_Tuple2',
		_0: _elm_lang$core$String$toLower(_p10._0),
		_1: _p10._1
	};
};
var _concourse$atc$Concourse_Pagination$keysToLower = function (_p11) {
	return _elm_lang$core$Dict$fromList(
		A2(
			_elm_lang$core$List$map,
			_concourse$atc$Concourse_Pagination$fstToLower,
			_elm_lang$core$Dict$toList(_p11)));
};
var _concourse$atc$Concourse_Pagination$equal = F2(
	function (one, two) {
		var _p12 = one.direction;
		switch (_p12.ctor) {
			case 'Since':
				var _p13 = two.direction;
				if (_p13.ctor === 'Since') {
					return _elm_lang$core$Native_Utils.eq(_p12._0, _p13._0);
				} else {
					return false;
				}
			case 'Until':
				var _p14 = two.direction;
				if (_p14.ctor === 'Until') {
					return _elm_lang$core$Native_Utils.eq(_p12._0, _p14._0);
				} else {
					return false;
				}
			case 'From':
				var _p15 = two.direction;
				if (_p15.ctor === 'From') {
					return _elm_lang$core$Native_Utils.eq(_p12._0, _p15._0);
				} else {
					return false;
				}
			default:
				var _p16 = two.direction;
				if (_p16.ctor === 'To') {
					return _elm_lang$core$Native_Utils.eq(_p12._0, _p16._0);
				} else {
					return false;
				}
		}
	});
var _concourse$atc$Concourse_Pagination$nextRel = 'next';
var _concourse$atc$Concourse_Pagination$previousRel = 'previous';
var _concourse$atc$Concourse_Pagination$linkHeaderRegex = _elm_lang$core$Regex$regex(
	A2(
		_elm_lang$core$Basics_ops['++'],
		'<([^>]+)>; rel=\"(',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_concourse$atc$Concourse_Pagination$previousRel,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'|',
				A2(_elm_lang$core$Basics_ops['++'], _concourse$atc$Concourse_Pagination$nextRel, ')\"')))));
var _concourse$atc$Concourse_Pagination$parseLinkTuple = function (header) {
	var _p17 = A3(
		_elm_lang$core$Regex$find,
		_elm_lang$core$Regex$AtMost(1),
		_concourse$atc$Concourse_Pagination$linkHeaderRegex,
		header);
	if (_p17.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		var _p18 = _p17._0.submatches;
		if ((((_p18.ctor === '::') && (_p18._0.ctor === 'Just')) && (_p18._1.ctor === '::')) && (_p18._1._0.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				{ctor: '_Tuple2', _0: _p18._1._0._0, _1: _p18._0._0});
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	}
};
var _concourse$atc$Concourse_Pagination$Paginated = F2(
	function (a, b) {
		return {content: a, pagination: b};
	});
var _concourse$atc$Concourse_Pagination$Pagination = F2(
	function (a, b) {
		return {previousPage: a, nextPage: b};
	});
var _concourse$atc$Concourse_Pagination$Page = F2(
	function (a, b) {
		return {direction: a, limit: b};
	});
var _concourse$atc$Concourse_Pagination$To = function (a) {
	return {ctor: 'To', _0: a};
};
var _concourse$atc$Concourse_Pagination$From = function (a) {
	return {ctor: 'From', _0: a};
};
var _concourse$atc$Concourse_Pagination$Until = function (a) {
	return {ctor: 'Until', _0: a};
};
var _concourse$atc$Concourse_Pagination$Since = function (a) {
	return {ctor: 'Since', _0: a};
};
var _concourse$atc$Concourse_Pagination$fromQuery = function (query) {
	var to = A2(
		_elm_lang$core$Maybe$map,
		_concourse$atc$Concourse_Pagination$Since,
		A2(
			_elm_lang$core$Maybe$andThen,
			_concourse$atc$Concourse_Pagination$parseNum,
			A2(_elm_lang$core$Dict$get, 'to', query)));
	var from = A2(
		_elm_lang$core$Maybe$map,
		_concourse$atc$Concourse_Pagination$Since,
		A2(
			_elm_lang$core$Maybe$andThen,
			_concourse$atc$Concourse_Pagination$parseNum,
			A2(_elm_lang$core$Dict$get, 'from', query)));
	var since = A2(
		_elm_lang$core$Maybe$map,
		_concourse$atc$Concourse_Pagination$Since,
		A2(
			_elm_lang$core$Maybe$andThen,
			_concourse$atc$Concourse_Pagination$parseNum,
			A2(_elm_lang$core$Dict$get, 'since', query)));
	var until = A2(
		_elm_lang$core$Maybe$map,
		_concourse$atc$Concourse_Pagination$Until,
		A2(
			_elm_lang$core$Maybe$andThen,
			_concourse$atc$Concourse_Pagination$parseNum,
			A2(_elm_lang$core$Dict$get, 'until', query)));
	var limit = A2(
		_elm_lang$core$Maybe$withDefault,
		0,
		A2(
			_elm_lang$core$Maybe$andThen,
			_concourse$atc$Concourse_Pagination$parseNum,
			A2(_elm_lang$core$Dict$get, 'limit', query)));
	return A2(
		_elm_lang$core$Maybe$map,
		function (direction) {
			return {direction: direction, limit: limit};
		},
		A2(
			_elm_community$maybe_extra$Maybe_Extra$or,
			until,
			A2(
				_elm_community$maybe_extra$Maybe_Extra$or,
				since,
				A2(_elm_community$maybe_extra$Maybe_Extra$or, from, to))));
};
var _concourse$atc$Concourse_Pagination$parseParams = function (_p19) {
	return _concourse$atc$Concourse_Pagination$fromQuery(
		_elm_lang$core$Tuple$second(
			_concourse$atc$Concourse_Pagination$extractQuery(_p19)));
};
var _concourse$atc$Concourse_Pagination$parseLinks = function (response) {
	var _p20 = A2(
		_elm_lang$core$Dict$get,
		'link',
		_concourse$atc$Concourse_Pagination$keysToLower(response.headers));
	if (_p20.ctor === 'Nothing') {
		return A2(_concourse$atc$Concourse_Pagination$Pagination, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing);
	} else {
		var headers = A2(_elm_lang$core$String$split, ', ', _p20._0);
		var parsed = _elm_lang$core$Dict$fromList(
			A2(_elm_lang$core$List$filterMap, _concourse$atc$Concourse_Pagination$parseLinkTuple, headers));
		return A2(
			_concourse$atc$Concourse_Pagination$Pagination,
			A2(
				_elm_lang$core$Maybe$andThen,
				_concourse$atc$Concourse_Pagination$parseParams,
				A2(_elm_lang$core$Dict$get, _concourse$atc$Concourse_Pagination$previousRel, parsed)),
			A2(
				_elm_lang$core$Maybe$andThen,
				_concourse$atc$Concourse_Pagination$parseParams,
				A2(_elm_lang$core$Dict$get, _concourse$atc$Concourse_Pagination$nextRel, parsed)));
	}
};
var _concourse$atc$Concourse_Pagination$parsePagination = F2(
	function (decode, response) {
		var decoded = A2(
			_elm_lang$core$Json_Decode$decodeString,
			_elm_lang$core$Json_Decode$list(decode),
			response.body);
		var pagination = _concourse$atc$Concourse_Pagination$parseLinks(response);
		var _p21 = decoded;
		if (_p21.ctor === 'Err') {
			return _elm_lang$core$Result$Err(_p21._0);
		} else {
			return _elm_lang$core$Result$Ok(
				{content: _p21._0, pagination: pagination});
		}
	});
var _concourse$atc$Concourse_Pagination$fetch = F3(
	function (decode, url, page) {
		return _elm_lang$http$Http$toTask(
			_elm_lang$http$Http$request(
				{
					method: 'GET',
					headers: {ctor: '[]'},
					url: A2(_concourse$atc$Concourse_Pagination$addParams, url, page),
					body: _elm_lang$http$Http$emptyBody,
					expect: _elm_lang$http$Http$expectStringResponse(
						_concourse$atc$Concourse_Pagination$parsePagination(decode)),
					timeout: _elm_lang$core$Maybe$Nothing,
					withCredentials: false
				}));
	});

var _concourse$atc$Concourse_Build$url = function (build) {
	var _p0 = build.job;
	if (_p0.ctor === 'Nothing') {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'/builds/',
			_elm_lang$core$Basics$toString(build.id));
	} else {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'/teams/',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_p0._0.teamName,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'/pipelines/',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p0._0.pipelineName,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'/jobs/',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p0._0.jobName,
								A2(_elm_lang$core$Basics_ops['++'], '/builds/', build.name)))))));
	}
};
var _concourse$atc$Concourse_Build$fetchJobBuilds = F2(
	function (job, page) {
		var url = A2(
			_elm_lang$core$Basics_ops['++'],
			'/api/v1/teams/',
			A2(
				_elm_lang$core$Basics_ops['++'],
				job.teamName,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'/pipelines/',
					A2(
						_elm_lang$core$Basics_ops['++'],
						job.pipelineName,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'/jobs/',
							A2(_elm_lang$core$Basics_ops['++'], job.jobName, '/builds'))))));
		return A3(_concourse$atc$Concourse_Pagination$fetch, _concourse$atc$Concourse$decodeBuild, url, page);
	});
var _concourse$atc$Concourse_Build$abort = F2(
	function (buildId, csrfToken) {
		return _elm_lang$http$Http$toTask(
			_elm_lang$http$Http$request(
				{
					method: 'PUT',
					url: A2(
						_elm_lang$core$Basics_ops['++'],
						'/api/v1/builds/',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(buildId),
							'/abort')),
					headers: {
						ctor: '::',
						_0: A2(_elm_lang$http$Http$header, _concourse$atc$Concourse$csrfTokenHeaderName, csrfToken),
						_1: {ctor: '[]'}
					},
					body: _elm_lang$http$Http$emptyBody,
					expect: _elm_lang$http$Http$expectStringResponse(
						_elm_lang$core$Basics$always(
							_elm_lang$core$Result$Ok(
								{ctor: '_Tuple0'}))),
					timeout: _elm_lang$core$Maybe$Nothing,
					withCredentials: false
				}));
	});
var _concourse$atc$Concourse_Build$fetchJobBuild = function (jbi) {
	var url = A2(
		_elm_lang$core$Basics_ops['++'],
		'/api/v1/teams/',
		A2(
			_elm_lang$core$Basics_ops['++'],
			jbi.teamName,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'/pipelines/',
				A2(
					_elm_lang$core$Basics_ops['++'],
					jbi.pipelineName,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'/jobs/',
						A2(
							_elm_lang$core$Basics_ops['++'],
							jbi.jobName,
							A2(_elm_lang$core$Basics_ops['++'], '/builds/', jbi.buildName)))))));
	return _elm_lang$http$Http$toTask(
		A2(_elm_lang$http$Http$get, url, _concourse$atc$Concourse$decodeBuild));
};
var _concourse$atc$Concourse_Build$fetch = function (buildId) {
	return _elm_lang$http$Http$toTask(
		A2(
			_elm_lang$http$Http$get,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'/api/v1/builds/',
				_elm_lang$core$Basics$toString(buildId)),
			_concourse$atc$Concourse$decodeBuild));
};

var _concourse$atc$Concourse_BuildPlan$fetch = function (buildId) {
	return function (_p0) {
		return _elm_lang$http$Http$toTask(
			A3(_elm_lang$core$Basics$flip, _elm_lang$http$Http$get, _concourse$atc$Concourse$decodeBuildPlan, _p0));
	}(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'/api/v1/builds/',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(buildId),
				'/plan')));
};

var _concourse$atc$Native_EventSource = function() {
  function open(url, settings) {
    return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
      var source = new EventSource(url);

      function dispatchEvent(event) {
        var ev = {
          data: event.data
        }

        if (event.type !== undefined) {
          ev.name = _elm_lang$core$Maybe$Just(event.type);
        } else {
          ev.name = _elm_lang$core$Maybe$Nothing;
        }

        if (event.lastEventId !== undefined) {
          ev.lastEventId = _elm_lang$core$Maybe$Just(event.lastEventId);
        } else {
          ev.lastEventId = _elm_lang$core$Maybe$Nothing;
        }

        _elm_lang$core$Native_Scheduler.rawSpawn(settings.onEvent(ev));
      };

      source.onmessage = function(event) {
        dispatchEvent(event);
      };

      _elm_lang$core$Native_List.toArray(settings.events).forEach(function(eventType) {
        source.addEventListener(eventType, function(event) {
          dispatchEvent(event);
        });
      });

      source.onopen = function(event) {
        _elm_lang$core$Native_Scheduler.rawSpawn(settings.onOpen(source));
      };

      source.onerror = function(event) {
        _elm_lang$core$Native_Scheduler.rawSpawn(settings.onError(_elm_lang$core$Native_Utils.Tuple0));
      };
    });
  }

  function close(source) {
    return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
      source.close();
      callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
    });
  }

  return {
    open: F2(open),
    close: close
  };
}();

var _concourse$atc$EventSource_LowLevel$close = _concourse$atc$Native_EventSource.close;
var _concourse$atc$EventSource_LowLevel$open = _concourse$atc$Native_EventSource.open;
var _concourse$atc$EventSource_LowLevel$Event = F3(
	function (a, b, c) {
		return {lastEventId: a, name: b, data: c};
	});
var _concourse$atc$EventSource_LowLevel$Settings = F4(
	function (a, b, c, d) {
		return {events: a, onEvent: b, onOpen: c, onError: d};
	});
var _concourse$atc$EventSource_LowLevel$EventSource = {ctor: 'EventSource'};

var _concourse$atc$EventSource$broadcast = F3(
	function (router, msg, subs) {
		return A2(
			_elm_lang$core$Task$map,
			_elm_lang$core$Basics$always(
				{ctor: '_Tuple0'}),
			_elm_lang$core$Task$sequence(
				A2(
					_elm_lang$core$List$map,
					function (_p0) {
						var _p1 = _p0;
						return A2(
							_elm_lang$core$Platform$sendToApp,
							router,
							_p1._1(msg));
					},
					subs)));
	});
var _concourse$atc$EventSource$closeSource = F3(
	function (key, source, rest) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (state) {
				var _p2 = source.source;
				if (_p2.ctor === 'Nothing') {
					return _elm_lang$core$Task$succeed(
						A2(_elm_lang$core$Dict$remove, key, state));
				} else {
					return A2(
						_elm_lang$core$Task$andThen,
						function (_p3) {
							return _elm_lang$core$Task$succeed(
								A2(_elm_lang$core$Dict$remove, key, state));
						},
						_concourse$atc$EventSource_LowLevel$close(_p2._0));
				}
			},
			rest);
	});
var _concourse$atc$EventSource$updateSourceSubs = F4(
	function (key, subs, source, rest) {
		return A2(
			_elm_lang$core$Task$map,
			A2(
				_elm_lang$core$Dict$insert,
				key,
				_elm_lang$core$Native_Utils.update(
					source,
					{subs: subs})),
			rest);
	});
var _concourse$atc$EventSource$init = _elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty);
var _concourse$atc$EventSource$subscription = _elm_lang$core$Native_Platform.leaf('EventSource');
var _concourse$atc$EventSource$Source = F3(
	function (a, b, c) {
		return {subs: a, watcher: b, source: c};
	});
var _concourse$atc$EventSource$ESErrored = function (a) {
	return {ctor: 'ESErrored', _0: a};
};
var _concourse$atc$EventSource$ESOpened = F2(
	function (a, b) {
		return {ctor: 'ESOpened', _0: a, _1: b};
	});
var _concourse$atc$EventSource$ESEvent = F2(
	function (a, b) {
		return {ctor: 'ESEvent', _0: a, _1: b};
	});
var _concourse$atc$EventSource$open = F2(
	function (router, _p4) {
		var _p5 = _p4;
		var _p10 = _p5._0;
		var _p9 = _p5._1;
		return A2(
			_concourse$atc$EventSource_LowLevel$open,
			_p10,
			{
				events: _p9,
				onEvent: function (_p6) {
					return A2(
						_elm_lang$core$Platform$sendToSelf,
						router,
						A2(
							_concourse$atc$EventSource$ESEvent,
							{ctor: '_Tuple2', _0: _p10, _1: _p9},
							_p6));
				},
				onOpen: function (_p7) {
					return A2(
						_elm_lang$core$Platform$sendToSelf,
						router,
						A2(
							_concourse$atc$EventSource$ESOpened,
							{ctor: '_Tuple2', _0: _p10, _1: _p9},
							_p7));
				},
				onError: function (_p8) {
					return A2(
						_elm_lang$core$Platform$sendToSelf,
						router,
						A2(
							_elm_lang$core$Basics$always,
							_concourse$atc$EventSource$ESErrored(
								{ctor: '_Tuple2', _0: _p10, _1: _p9}),
							_p8));
				}
			});
	});
var _concourse$atc$EventSource$createSource = F4(
	function (router, key, subs, rest) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (state) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (processId) {
						return _elm_lang$core$Task$succeed(
							A3(
								_elm_lang$core$Dict$insert,
								key,
								{subs: subs, watcher: processId, source: _elm_lang$core$Maybe$Nothing},
								state));
					},
					_elm_lang$core$Process$spawn(
						A2(_concourse$atc$EventSource$open, router, key)));
			},
			rest);
	});
var _concourse$atc$EventSource$Errored = {ctor: 'Errored'};
var _concourse$atc$EventSource$Opened = {ctor: 'Opened'};
var _concourse$atc$EventSource$Event = function (a) {
	return {ctor: 'Event', _0: a};
};
var _concourse$atc$EventSource$onSelfMsg = F3(
	function (router, msg, state) {
		var _p11 = msg;
		switch (_p11.ctor) {
			case 'ESEvent':
				var _p12 = A2(_elm_lang$core$Dict$get, _p11._0, state);
				if (_p12.ctor === 'Nothing') {
					return _elm_lang$core$Task$succeed(state);
				} else {
					return A2(
						_elm_lang$core$Task$andThen,
						function (_p13) {
							return _elm_lang$core$Task$succeed(state);
						},
						A3(
							_concourse$atc$EventSource$broadcast,
							router,
							_concourse$atc$EventSource$Event(_p11._1),
							_p12._0.subs));
				}
			case 'ESOpened':
				var _p17 = _p11._0;
				var _p14 = A2(_elm_lang$core$Dict$get, _p17, state);
				if (_p14.ctor === 'Nothing') {
					return _elm_lang$core$Task$succeed(state);
				} else {
					var _p16 = _p14._0;
					return A2(
						_elm_lang$core$Task$andThen,
						function (_p15) {
							return _elm_lang$core$Task$succeed(
								A3(
									_elm_lang$core$Dict$insert,
									_p17,
									_elm_lang$core$Native_Utils.update(
										_p16,
										{
											source: _elm_lang$core$Maybe$Just(_p11._1)
										}),
									state));
						},
						A3(_concourse$atc$EventSource$broadcast, router, _concourse$atc$EventSource$Opened, _p16.subs));
				}
			default:
				var _p18 = A2(_elm_lang$core$Dict$get, _p11._0, state);
				if (_p18.ctor === 'Nothing') {
					return _elm_lang$core$Task$succeed(state);
				} else {
					return A2(
						_elm_lang$core$Task$andThen,
						function (_p19) {
							return _elm_lang$core$Task$succeed(state);
						},
						A3(_concourse$atc$EventSource$broadcast, router, _concourse$atc$EventSource$Errored, _p18._0.subs));
				}
		}
	});
var _concourse$atc$EventSource$MySub = F2(
	function (a, b) {
		return {ctor: 'MySub', _0: a, _1: b};
	});
var _concourse$atc$EventSource$listen = F2(
	function (key, tagger) {
		return _concourse$atc$EventSource$subscription(
			A2(_concourse$atc$EventSource$MySub, key, tagger));
	});
var _concourse$atc$EventSource$subMap = F2(
	function (func, _p20) {
		var _p21 = _p20;
		return A2(
			_concourse$atc$EventSource$MySub,
			_p21._0,
			function (_p22) {
				return func(
					_p21._1(_p22));
			});
	});
var _concourse$atc$EventSource$onEffects = F3(
	function (router, subs, state) {
		var addSub = F3(
			function (key, tagger, msubs) {
				return _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: A2(_concourse$atc$EventSource$MySub, key, tagger),
						_1: A2(
							_elm_lang$core$Maybe$withDefault,
							{ctor: '[]'},
							msubs)
					});
			});
		var insertSub = F2(
			function (_p23, state) {
				var _p24 = _p23;
				var _p25 = _p24._0;
				return A3(
					_elm_lang$core$Dict$update,
					_p25,
					A2(addSub, _p25, _p24._1),
					state);
			});
		var desiredSubs = A3(_elm_lang$core$List$foldl, insertSub, _elm_lang$core$Dict$empty, subs);
		return A6(
			_elm_lang$core$Dict$merge,
			_concourse$atc$EventSource$createSource(router),
			_concourse$atc$EventSource$updateSourceSubs,
			_concourse$atc$EventSource$closeSource,
			desiredSubs,
			state,
			_elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty));
	});
_elm_lang$core$Native_Platform.effectManagers['EventSource'] = {pkg: 'concourse/atc', init: _concourse$atc$EventSource$init, onEffects: _concourse$atc$EventSource$onEffects, onSelfMsg: _concourse$atc$EventSource$onSelfMsg, tag: 'sub', subMap: _concourse$atc$EventSource$subMap};

var _concourse$atc$Concourse_BuildEvents$customDecoder = F2(
	function (decoder, toResult) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			function (a) {
				var _p0 = toResult(a);
				if (_p0.ctor === 'Ok') {
					return _elm_lang$core$Json_Decode$succeed(_p0._0);
				} else {
					return _elm_lang$core$Json_Decode$fail(_p0._0);
				}
			},
			decoder);
	});
var _concourse$atc$Concourse_BuildEvents$dateFromSeconds = function (_p1) {
	return _elm_lang$core$Date$fromTime(
		A2(
			F2(
				function (x, y) {
					return x * y;
				}),
			1000,
			_p1));
};
var _concourse$atc$Concourse_BuildEvents$BuildEventEnvelope = F3(
	function (a, b, c) {
		return {event: a, version: b, value: c};
	});
var _concourse$atc$Concourse_BuildEvents$decodeEnvelope = A4(
	_elm_lang$core$Json_Decode$map3,
	_concourse$atc$Concourse_BuildEvents$BuildEventEnvelope,
	A2(_elm_lang$core$Json_Decode$field, 'event', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'version', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'data', _elm_lang$core$Json_Decode$value));
var _concourse$atc$Concourse_BuildEvents$Origin = F2(
	function (a, b) {
		return {source: a, id: b};
	});
var _concourse$atc$Concourse_BuildEvents$decodeOrigin = A3(
	_elm_lang$core$Json_Decode$map2,
	_concourse$atc$Concourse_BuildEvents$Origin,
	function (_p2) {
		return A2(
			_elm_lang$core$Json_Decode$map,
			_elm_lang$core$Maybe$withDefault(''),
			_elm_lang$core$Json_Decode$maybe(_p2));
	}(
		A2(_elm_lang$core$Json_Decode$field, 'source', _elm_lang$core$Json_Decode$string)),
	A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$string));
var _concourse$atc$Concourse_BuildEvents$decodeFinishResource = function (cons) {
	return A5(
		_elm_lang$core$Json_Decode$map4,
		cons,
		A2(_elm_lang$core$Json_Decode$field, 'origin', _concourse$atc$Concourse_BuildEvents$decodeOrigin),
		A2(_elm_lang$core$Json_Decode$field, 'exit_status', _elm_lang$core$Json_Decode$int),
		function (_p3) {
			return A2(
				_elm_lang$core$Json_Decode$map,
				_elm_lang$core$Maybe$withDefault(_elm_lang$core$Dict$empty),
				_elm_lang$core$Json_Decode$maybe(_p3));
		}(
			A2(_elm_lang$core$Json_Decode$field, 'version', _concourse$atc$Concourse$decodeVersion)),
		function (_p4) {
			return A2(
				_elm_lang$core$Json_Decode$map,
				_elm_lang$core$Maybe$withDefault(
					{ctor: '[]'}),
				_elm_lang$core$Json_Decode$maybe(_p4));
		}(
			A2(_elm_lang$core$Json_Decode$field, 'metadata', _concourse$atc$Concourse$decodeMetadata)));
};
var _concourse$atc$Concourse_BuildEvents$BuildError = function (a) {
	return {ctor: 'BuildError', _0: a};
};
var _concourse$atc$Concourse_BuildEvents$Error = F2(
	function (a, b) {
		return {ctor: 'Error', _0: a, _1: b};
	});
var _concourse$atc$Concourse_BuildEvents$decodeErrorEvent = _elm_lang$core$Json_Decode$oneOf(
	{
		ctor: '::',
		_0: A3(
			_elm_lang$core$Json_Decode$map2,
			_concourse$atc$Concourse_BuildEvents$Error,
			A2(_elm_lang$core$Json_Decode$field, 'origin', _concourse$atc$Concourse_BuildEvents$decodeOrigin),
			A2(_elm_lang$core$Json_Decode$field, 'message', _elm_lang$core$Json_Decode$string)),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$core$Json_Decode$map,
				_concourse$atc$Concourse_BuildEvents$BuildError,
				A2(_elm_lang$core$Json_Decode$field, 'message', _elm_lang$core$Json_Decode$string)),
			_1: {ctor: '[]'}
		}
	});
var _concourse$atc$Concourse_BuildEvents$Log = F3(
	function (a, b, c) {
		return {ctor: 'Log', _0: a, _1: b, _2: c};
	});
var _concourse$atc$Concourse_BuildEvents$FinishPut = F4(
	function (a, b, c, d) {
		return {ctor: 'FinishPut', _0: a, _1: b, _2: c, _3: d};
	});
var _concourse$atc$Concourse_BuildEvents$FinishGet = F4(
	function (a, b, c, d) {
		return {ctor: 'FinishGet', _0: a, _1: b, _2: c, _3: d};
	});
var _concourse$atc$Concourse_BuildEvents$FinishTask = F2(
	function (a, b) {
		return {ctor: 'FinishTask', _0: a, _1: b};
	});
var _concourse$atc$Concourse_BuildEvents$StartTask = function (a) {
	return {ctor: 'StartTask', _0: a};
};
var _concourse$atc$Concourse_BuildEvents$Initialize = function (a) {
	return {ctor: 'Initialize', _0: a};
};
var _concourse$atc$Concourse_BuildEvents$BuildStatus = F2(
	function (a, b) {
		return {ctor: 'BuildStatus', _0: a, _1: b};
	});
var _concourse$atc$Concourse_BuildEvents$decodeEvent = function (e) {
	var _p5 = e.event;
	switch (_p5) {
		case 'status':
			return A2(
				_elm_lang$core$Json_Decode$decodeValue,
				A3(
					_elm_lang$core$Json_Decode$map2,
					_concourse$atc$Concourse_BuildEvents$BuildStatus,
					A2(_elm_lang$core$Json_Decode$field, 'status', _concourse$atc$Concourse$decodeBuildStatus),
					A2(
						_elm_lang$core$Json_Decode$field,
						'time',
						A2(_elm_lang$core$Json_Decode$map, _concourse$atc$Concourse_BuildEvents$dateFromSeconds, _elm_lang$core$Json_Decode$float))),
				e.value);
		case 'log':
			return A2(
				_elm_lang$core$Json_Decode$decodeValue,
				A4(
					_elm_lang$core$Json_Decode$map3,
					_concourse$atc$Concourse_BuildEvents$Log,
					A2(_elm_lang$core$Json_Decode$field, 'origin', _concourse$atc$Concourse_BuildEvents$decodeOrigin),
					A2(_elm_lang$core$Json_Decode$field, 'payload', _elm_lang$core$Json_Decode$string),
					_elm_lang$core$Json_Decode$maybe(
						A2(
							_elm_lang$core$Json_Decode$field,
							'time',
							A2(_elm_lang$core$Json_Decode$map, _concourse$atc$Concourse_BuildEvents$dateFromSeconds, _elm_lang$core$Json_Decode$float)))),
				e.value);
		case 'error':
			return A2(_elm_lang$core$Json_Decode$decodeValue, _concourse$atc$Concourse_BuildEvents$decodeErrorEvent, e.value);
		case 'initialize':
			return A2(
				_elm_lang$core$Json_Decode$decodeValue,
				A2(
					_elm_lang$core$Json_Decode$map,
					_concourse$atc$Concourse_BuildEvents$Initialize,
					A2(_elm_lang$core$Json_Decode$field, 'origin', _concourse$atc$Concourse_BuildEvents$decodeOrigin)),
				e.value);
		case 'initialize-task':
			return A2(
				_elm_lang$core$Json_Decode$decodeValue,
				A2(
					_elm_lang$core$Json_Decode$map,
					_concourse$atc$Concourse_BuildEvents$Initialize,
					A2(_elm_lang$core$Json_Decode$field, 'origin', _concourse$atc$Concourse_BuildEvents$decodeOrigin)),
				e.value);
		case 'start-task':
			return A2(
				_elm_lang$core$Json_Decode$decodeValue,
				A2(
					_elm_lang$core$Json_Decode$map,
					_concourse$atc$Concourse_BuildEvents$StartTask,
					A2(_elm_lang$core$Json_Decode$field, 'origin', _concourse$atc$Concourse_BuildEvents$decodeOrigin)),
				e.value);
		case 'finish-task':
			return A2(
				_elm_lang$core$Json_Decode$decodeValue,
				A3(
					_elm_lang$core$Json_Decode$map2,
					_concourse$atc$Concourse_BuildEvents$FinishTask,
					A2(_elm_lang$core$Json_Decode$field, 'origin', _concourse$atc$Concourse_BuildEvents$decodeOrigin),
					A2(_elm_lang$core$Json_Decode$field, 'exit_status', _elm_lang$core$Json_Decode$int)),
				e.value);
		case 'finish-get':
			return A2(
				_elm_lang$core$Json_Decode$decodeValue,
				_concourse$atc$Concourse_BuildEvents$decodeFinishResource(_concourse$atc$Concourse_BuildEvents$FinishGet),
				e.value);
		case 'finish-put':
			return A2(
				_elm_lang$core$Json_Decode$decodeValue,
				_concourse$atc$Concourse_BuildEvents$decodeFinishResource(_concourse$atc$Concourse_BuildEvents$FinishPut),
				e.value);
		default:
			return _elm_lang$core$Result$Err(
				A2(_elm_lang$core$Basics_ops['++'], 'unknown event type: ', _p5));
	}
};
var _concourse$atc$Concourse_BuildEvents$decode = A2(_concourse$atc$Concourse_BuildEvents$customDecoder, _concourse$atc$Concourse_BuildEvents$decodeEnvelope, _concourse$atc$Concourse_BuildEvents$decodeEvent);
var _concourse$atc$Concourse_BuildEvents$parseEvent = function (data) {
	return A2(_elm_lang$core$Json_Decode$decodeString, _concourse$atc$Concourse_BuildEvents$decode, data);
};
var _concourse$atc$Concourse_BuildEvents$End = {ctor: 'End'};
var _concourse$atc$Concourse_BuildEvents$Event = function (a) {
	return {ctor: 'Event', _0: a};
};
var _concourse$atc$Concourse_BuildEvents$Errored = {ctor: 'Errored'};
var _concourse$atc$Concourse_BuildEvents$Opened = {ctor: 'Opened'};
var _concourse$atc$Concourse_BuildEvents$parseMsg = function (msg) {
	var _p6 = msg;
	switch (_p6.ctor) {
		case 'Event':
			var _p9 = _p6._0.name;
			var _p8 = _p6._0.data;
			var _p7 = _p9;
			_v3_2:
			do {
				if (_p7.ctor === 'Just') {
					switch (_p7._0) {
						case 'end':
							return _concourse$atc$Concourse_BuildEvents$End;
						case 'event':
							return _concourse$atc$Concourse_BuildEvents$Event(
								_concourse$atc$Concourse_BuildEvents$parseEvent(_p8));
						default:
							break _v3_2;
					}
				} else {
					break _v3_2;
				}
			} while(false);
			return _concourse$atc$Concourse_BuildEvents$Event(
				_elm_lang$core$Result$Err(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'unknown event type: ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p9),
							A2(
								_elm_lang$core$Basics_ops['++'],
								' (data: ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(_p8),
									')'))))));
		case 'Opened':
			return _concourse$atc$Concourse_BuildEvents$Opened;
		default:
			return _concourse$atc$Concourse_BuildEvents$Errored;
	}
};
var _concourse$atc$Concourse_BuildEvents$subscribe = function (build) {
	return A2(
		_concourse$atc$EventSource$listen,
		{
			ctor: '_Tuple2',
			_0: A2(
				_elm_lang$core$Basics_ops['++'],
				'/api/v1/builds/',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(build),
					'/events')),
			_1: {
				ctor: '::',
				_0: 'end',
				_1: {
					ctor: '::',
					_0: 'event',
					_1: {ctor: '[]'}
				}
			}
		},
		_concourse$atc$Concourse_BuildEvents$parseMsg);
};

var _concourse$atc$Concourse_BuildStatus$isRunning = function (status) {
	var _p0 = status;
	switch (_p0.ctor) {
		case 'BuildStatusPending':
			return true;
		case 'BuildStatusStarted':
			return true;
		default:
			return false;
	}
};
var _concourse$atc$Concourse_BuildStatus$show = function (status) {
	var _p1 = status;
	switch (_p1.ctor) {
		case 'BuildStatusPending':
			return 'pending';
		case 'BuildStatusStarted':
			return 'started';
		case 'BuildStatusSucceeded':
			return 'succeeded';
		case 'BuildStatusFailed':
			return 'failed';
		case 'BuildStatusErrored':
			return 'errored';
		default:
			return 'aborted';
	}
};

var _concourse$atc$Concourse_BuildResources$fetch = function (buildId) {
	return function (_p0) {
		return _elm_lang$http$Http$toTask(
			A2(
				_elm_lang$http$Http$get,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'/api/v1/builds/',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(buildId),
						'/resources')),
				_p0));
	}(_concourse$atc$Concourse$decodeBuildResources);
};
var _concourse$atc$Concourse_BuildResources$empty = {
	inputs: {ctor: '[]'},
	outputs: {ctor: '[]'}
};

var _concourse$atc$LoadingIndicator$view = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('build-step'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('header'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$i,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('left fa fa-fw fa-spin fa-circle-o-notch'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$h3,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('loading'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {ctor: '[]'}
	});

var _concourse$atc$Focus$update = F3(
	function (_p0, f, big) {
		var _p1 = _p0;
		return A2(_p1._0.update, f, big);
	});
var _concourse$atc$Focus$set = F3(
	function (_p2, small, big) {
		var _p3 = _p2;
		return A2(
			_p3._0.update,
			_elm_lang$core$Basics$always(small),
			big);
	});
var _concourse$atc$Focus$get = F2(
	function (_p4, big) {
		var _p5 = _p4;
		return _p5._0.get(big);
	});
var _concourse$atc$Focus$Focus = function (a) {
	return {ctor: 'Focus', _0: a};
};
var _concourse$atc$Focus$create = F2(
	function (get, update) {
		return _concourse$atc$Focus$Focus(
			{get: get, update: update});
	});
var _concourse$atc$Focus_ops = _concourse$atc$Focus_ops || {};
_concourse$atc$Focus_ops['=>'] = F2(
	function (_p7, _p6) {
		var _p8 = _p7;
		var _p11 = _p8._0;
		var _p9 = _p6;
		var _p10 = _p9._0;
		var update = F2(
			function (f, big) {
				return A2(
					_p11.update,
					_p10.update(f),
					big);
			});
		var get = function (big) {
			return _p10.get(
				_p11.get(big));
		};
		return _concourse$atc$Focus$Focus(
			{get: get, update: update});
	});

var _elm_lang$html$Html_Events$keyCode = A2(_elm_lang$core$Json_Decode$field, 'keyCode', _elm_lang$core$Json_Decode$int);
var _elm_lang$html$Html_Events$targetChecked = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'checked',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$bool);
var _elm_lang$html$Html_Events$targetValue = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'value',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$string);
var _elm_lang$html$Html_Events$defaultOptions = _elm_lang$virtual_dom$VirtualDom$defaultOptions;
var _elm_lang$html$Html_Events$onWithOptions = _elm_lang$virtual_dom$VirtualDom$onWithOptions;
var _elm_lang$html$Html_Events$on = _elm_lang$virtual_dom$VirtualDom$on;
var _elm_lang$html$Html_Events$onFocus = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'focus',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onBlur = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'blur',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onSubmitOptions = _elm_lang$core$Native_Utils.update(
	_elm_lang$html$Html_Events$defaultOptions,
	{preventDefault: true});
var _elm_lang$html$Html_Events$onSubmit = function (msg) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'submit',
		_elm_lang$html$Html_Events$onSubmitOptions,
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onCheck = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'change',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetChecked));
};
var _elm_lang$html$Html_Events$onInput = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'input',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetValue));
};
var _elm_lang$html$Html_Events$onMouseOut = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseout',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseOver = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseover',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseLeave = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseleave',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseEnter = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseenter',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseUp = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseup',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseDown = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mousedown',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onDoubleClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'dblclick',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'click',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});

var _concourse$atc$DictView$viewPair = function (_p0) {
	var _p1 = _p0;
	return A2(
		_elm_lang$html$Html$tr,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$td,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('dict-key'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(_p1._0),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('dict-value'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _p1._1,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _concourse$atc$DictView$view = function (dict) {
	return A2(
		_elm_lang$html$Html$table,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('dictionary'),
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$List$map,
			_concourse$atc$DictView$viewPair,
			_elm_lang$core$Dict$toList(dict)));
};

var _concourse$atc$StrictEvents$customDecoder = F2(
	function (decoder, toResult) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			function (a) {
				var _p0 = toResult(a);
				if (_p0.ctor === 'Ok') {
					return _elm_lang$core$Json_Decode$succeed(_p0._0);
				} else {
					return _elm_lang$core$Json_Decode$fail(_p0._0);
				}
			},
			decoder);
	});
var _concourse$atc$StrictEvents$assertLeftButton = A2(
	_concourse$atc$StrictEvents$customDecoder,
	A2(_elm_lang$core$Json_Decode$field, 'button', _elm_lang$core$Json_Decode$int),
	function (button) {
		return _elm_lang$core$Native_Utils.eq(button, 0) ? _elm_lang$core$Result$Ok(
			{ctor: '_Tuple0'}) : _elm_lang$core$Result$Err('not left button');
	});
var _concourse$atc$StrictEvents$assertNo = function (prop) {
	return A2(
		_concourse$atc$StrictEvents$customDecoder,
		A2(_elm_lang$core$Json_Decode$field, prop, _elm_lang$core$Json_Decode$bool),
		function (val) {
			return (!val) ? _elm_lang$core$Result$Ok(
				{ctor: '_Tuple0'}) : _elm_lang$core$Result$Err(
				A2(_elm_lang$core$Basics_ops['++'], prop, ' used - skipping'));
		});
};
var _concourse$atc$StrictEvents$assertNoModifier = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (_p1) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			function (_p2) {
				return A2(
					_elm_lang$core$Json_Decode$andThen,
					function (_p3) {
						return _concourse$atc$StrictEvents$assertNo('shiftKey');
					},
					_concourse$atc$StrictEvents$assertNo('metaKey'));
			},
			_concourse$atc$StrictEvents$assertNo('altKey'));
	},
	_concourse$atc$StrictEvents$assertNo('ctrlKey'));
var _concourse$atc$StrictEvents$determineClickMsg = F2(
	function (clickMsg, shiftClickMsg) {
		return A2(
			_concourse$atc$StrictEvents$customDecoder,
			A2(_elm_lang$core$Json_Decode$field, 'shiftKey', _elm_lang$core$Json_Decode$bool),
			function (shiftKey) {
				return shiftKey ? _elm_lang$core$Result$Ok(shiftClickMsg) : _elm_lang$core$Result$Ok(clickMsg);
			});
	});
var _concourse$atc$StrictEvents$onLeftMouseDownCapturing = F2(
	function (captured, msg) {
		return A3(
			_elm_lang$html$Html_Events$onWithOptions,
			'mousedown',
			{stopPropagation: false, preventDefault: true},
			A2(
				_elm_lang$core$Json_Decode$andThen,
				function (_p4) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (_p5) {
							return A2(_elm_lang$core$Json_Decode$map, msg, captured);
						},
						_concourse$atc$StrictEvents$assertLeftButton);
				},
				_concourse$atc$StrictEvents$assertNoModifier));
	});
var _concourse$atc$StrictEvents$onLeftMouseDown = function (msg) {
	return A2(
		_concourse$atc$StrictEvents$onLeftMouseDownCapturing,
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '_Tuple0'}),
		_elm_lang$core$Basics$always(msg));
};
var _concourse$atc$StrictEvents$onLeftClickOrShiftLeftClick = F2(
	function (msg, shiftMsg) {
		return A3(
			_elm_lang$html$Html_Events$onWithOptions,
			'click',
			{stopPropagation: false, preventDefault: true},
			A2(
				_elm_lang$core$Json_Decode$andThen,
				function (_p6) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (_p7) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (_p8) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										function (_p9) {
											return A2(_concourse$atc$StrictEvents$determineClickMsg, msg, shiftMsg);
										},
										_concourse$atc$StrictEvents$assertNo('metaKey'));
								},
								_concourse$atc$StrictEvents$assertNo('altKey'));
						},
						_concourse$atc$StrictEvents$assertNo('ctrlKey'));
				},
				_concourse$atc$StrictEvents$assertLeftButton));
	});
var _concourse$atc$StrictEvents$onLeftClickCapturing = F3(
	function (preventDefault, captured, msg) {
		return A3(
			_elm_lang$html$Html_Events$onWithOptions,
			'click',
			{stopPropagation: false, preventDefault: preventDefault},
			A2(
				_elm_lang$core$Json_Decode$andThen,
				function (_p10) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (_p11) {
							return A2(_elm_lang$core$Json_Decode$map, msg, captured);
						},
						_concourse$atc$StrictEvents$assertLeftButton);
				},
				_concourse$atc$StrictEvents$assertNoModifier));
	});
var _concourse$atc$StrictEvents$onLeftClickNoPreventDefault = function (msg) {
	return A3(
		_concourse$atc$StrictEvents$onLeftClickCapturing,
		false,
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '_Tuple0'}),
		_elm_lang$core$Basics$always(msg));
};
var _concourse$atc$StrictEvents$onLeftClick = function (msg) {
	return A3(
		_concourse$atc$StrictEvents$onLeftClickCapturing,
		true,
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '_Tuple0'}),
		_elm_lang$core$Basics$always(msg));
};
var _concourse$atc$StrictEvents$MouseWheelEvent = F2(
	function (a, b) {
		return {deltaX: a, deltaY: b};
	});
var _concourse$atc$StrictEvents$decodeMouseWheelEvent = A3(
	_elm_lang$core$Json_Decode$map2,
	_concourse$atc$StrictEvents$MouseWheelEvent,
	A2(_elm_lang$core$Json_Decode$field, 'deltaX', _elm_lang$core$Json_Decode$float),
	A2(_elm_lang$core$Json_Decode$field, 'deltaY', _elm_lang$core$Json_Decode$float));
var _concourse$atc$StrictEvents$onMouseWheel = function (cons) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'mousewheel',
		{stopPropagation: false, preventDefault: true},
		A2(_elm_lang$core$Json_Decode$map, cons, _concourse$atc$StrictEvents$decodeMouseWheelEvent));
};
var _concourse$atc$StrictEvents$ScrollState = F3(
	function (a, b, c) {
		return {scrollHeight: a, scrollTop: b, clientHeight: c};
	});
var _concourse$atc$StrictEvents$decodeScrollEvent = A4(
	_elm_lang$core$Json_Decode$map3,
	_concourse$atc$StrictEvents$ScrollState,
	A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'target',
			_1: {
				ctor: '::',
				_0: 'scrollHeight',
				_1: {ctor: '[]'}
			}
		},
		_elm_lang$core$Json_Decode$float),
	A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'target',
			_1: {
				ctor: '::',
				_0: 'scrollTop',
				_1: {ctor: '[]'}
			}
		},
		_elm_lang$core$Json_Decode$float),
	A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'target',
			_1: {
				ctor: '::',
				_0: 'clientHeight',
				_1: {ctor: '[]'}
			}
		},
		_elm_lang$core$Json_Decode$float));
var _concourse$atc$StrictEvents$onScroll = function (cons) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'scroll',
		A2(_elm_lang$core$Json_Decode$map, cons, _concourse$atc$StrictEvents$decodeScrollEvent));
};

var _elm_lang$navigation$Native_Navigation = function() {


// FAKE NAVIGATION

function go(n)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		if (n !== 0)
		{
			history.go(n);
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function pushState(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		history.pushState({}, '', url);
		callback(_elm_lang$core$Native_Scheduler.succeed(getLocation()));
	});
}

function replaceState(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		history.replaceState({}, '', url);
		callback(_elm_lang$core$Native_Scheduler.succeed(getLocation()));
	});
}


// REAL NAVIGATION

function reloadPage(skipCache)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		document.location.reload(skipCache);
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function setLocation(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		try
		{
			window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			document.location.reload(false);
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}


// GET LOCATION

function getLocation()
{
	var location = document.location;

	return {
		href: location.href,
		host: location.host,
		hostname: location.hostname,
		protocol: location.protocol,
		origin: location.origin,
		port_: location.port,
		pathname: location.pathname,
		search: location.search,
		hash: location.hash,
		username: location.username,
		password: location.password
	};
}


// DETECT IE11 PROBLEMS

function isInternetExplorer11()
{
	return window.navigator.userAgent.indexOf('Trident') !== -1;
}


return {
	go: go,
	setLocation: setLocation,
	reloadPage: reloadPage,
	pushState: pushState,
	replaceState: replaceState,
	getLocation: getLocation,
	isInternetExplorer11: isInternetExplorer11
};

}();

var _elm_lang$navigation$Navigation$replaceState = _elm_lang$navigation$Native_Navigation.replaceState;
var _elm_lang$navigation$Navigation$pushState = _elm_lang$navigation$Native_Navigation.pushState;
var _elm_lang$navigation$Navigation$go = _elm_lang$navigation$Native_Navigation.go;
var _elm_lang$navigation$Navigation$reloadPage = _elm_lang$navigation$Native_Navigation.reloadPage;
var _elm_lang$navigation$Navigation$setLocation = _elm_lang$navigation$Native_Navigation.setLocation;
var _elm_lang$navigation$Navigation_ops = _elm_lang$navigation$Navigation_ops || {};
_elm_lang$navigation$Navigation_ops['&>'] = F2(
	function (task1, task2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p0) {
				return task2;
			},
			task1);
	});
var _elm_lang$navigation$Navigation$notify = F3(
	function (router, subs, location) {
		var send = function (_p1) {
			var _p2 = _p1;
			return A2(
				_elm_lang$core$Platform$sendToApp,
				router,
				_p2._0(location));
		};
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Task$sequence(
				A2(_elm_lang$core$List$map, send, subs)),
			_elm_lang$core$Task$succeed(
				{ctor: '_Tuple0'}));
	});
var _elm_lang$navigation$Navigation$cmdHelp = F3(
	function (router, subs, cmd) {
		var _p3 = cmd;
		switch (_p3.ctor) {
			case 'Jump':
				return _elm_lang$navigation$Navigation$go(_p3._0);
			case 'New':
				return A2(
					_elm_lang$core$Task$andThen,
					A2(_elm_lang$navigation$Navigation$notify, router, subs),
					_elm_lang$navigation$Navigation$pushState(_p3._0));
			case 'Modify':
				return A2(
					_elm_lang$core$Task$andThen,
					A2(_elm_lang$navigation$Navigation$notify, router, subs),
					_elm_lang$navigation$Navigation$replaceState(_p3._0));
			case 'Visit':
				return _elm_lang$navigation$Navigation$setLocation(_p3._0);
			default:
				return _elm_lang$navigation$Navigation$reloadPage(_p3._0);
		}
	});
var _elm_lang$navigation$Navigation$killPopWatcher = function (popWatcher) {
	var _p4 = popWatcher;
	if (_p4.ctor === 'Normal') {
		return _elm_lang$core$Process$kill(_p4._0);
	} else {
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Process$kill(_p4._0),
			_elm_lang$core$Process$kill(_p4._1));
	}
};
var _elm_lang$navigation$Navigation$onSelfMsg = F3(
	function (router, location, state) {
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			A3(_elm_lang$navigation$Navigation$notify, router, state.subs, location),
			_elm_lang$core$Task$succeed(state));
	});
var _elm_lang$navigation$Navigation$subscription = _elm_lang$core$Native_Platform.leaf('Navigation');
var _elm_lang$navigation$Navigation$command = _elm_lang$core$Native_Platform.leaf('Navigation');
var _elm_lang$navigation$Navigation$Location = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {href: a, host: b, hostname: c, protocol: d, origin: e, port_: f, pathname: g, search: h, hash: i, username: j, password: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elm_lang$navigation$Navigation$State = F2(
	function (a, b) {
		return {subs: a, popWatcher: b};
	});
var _elm_lang$navigation$Navigation$init = _elm_lang$core$Task$succeed(
	A2(
		_elm_lang$navigation$Navigation$State,
		{ctor: '[]'},
		_elm_lang$core$Maybe$Nothing));
var _elm_lang$navigation$Navigation$Reload = function (a) {
	return {ctor: 'Reload', _0: a};
};
var _elm_lang$navigation$Navigation$reload = _elm_lang$navigation$Navigation$command(
	_elm_lang$navigation$Navigation$Reload(false));
var _elm_lang$navigation$Navigation$reloadAndSkipCache = _elm_lang$navigation$Navigation$command(
	_elm_lang$navigation$Navigation$Reload(true));
var _elm_lang$navigation$Navigation$Visit = function (a) {
	return {ctor: 'Visit', _0: a};
};
var _elm_lang$navigation$Navigation$load = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Visit(url));
};
var _elm_lang$navigation$Navigation$Modify = function (a) {
	return {ctor: 'Modify', _0: a};
};
var _elm_lang$navigation$Navigation$modifyUrl = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Modify(url));
};
var _elm_lang$navigation$Navigation$New = function (a) {
	return {ctor: 'New', _0: a};
};
var _elm_lang$navigation$Navigation$newUrl = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$New(url));
};
var _elm_lang$navigation$Navigation$Jump = function (a) {
	return {ctor: 'Jump', _0: a};
};
var _elm_lang$navigation$Navigation$back = function (n) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Jump(0 - n));
};
var _elm_lang$navigation$Navigation$forward = function (n) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Jump(n));
};
var _elm_lang$navigation$Navigation$cmdMap = F2(
	function (_p5, myCmd) {
		var _p6 = myCmd;
		switch (_p6.ctor) {
			case 'Jump':
				return _elm_lang$navigation$Navigation$Jump(_p6._0);
			case 'New':
				return _elm_lang$navigation$Navigation$New(_p6._0);
			case 'Modify':
				return _elm_lang$navigation$Navigation$Modify(_p6._0);
			case 'Visit':
				return _elm_lang$navigation$Navigation$Visit(_p6._0);
			default:
				return _elm_lang$navigation$Navigation$Reload(_p6._0);
		}
	});
var _elm_lang$navigation$Navigation$Monitor = function (a) {
	return {ctor: 'Monitor', _0: a};
};
var _elm_lang$navigation$Navigation$program = F2(
	function (locationToMessage, stuff) {
		var init = stuff.init(
			_elm_lang$navigation$Native_Navigation.getLocation(
				{ctor: '_Tuple0'}));
		var subs = function (model) {
			return _elm_lang$core$Platform_Sub$batch(
				{
					ctor: '::',
					_0: _elm_lang$navigation$Navigation$subscription(
						_elm_lang$navigation$Navigation$Monitor(locationToMessage)),
					_1: {
						ctor: '::',
						_0: stuff.subscriptions(model),
						_1: {ctor: '[]'}
					}
				});
		};
		return _elm_lang$html$Html$program(
			{init: init, view: stuff.view, update: stuff.update, subscriptions: subs});
	});
var _elm_lang$navigation$Navigation$programWithFlags = F2(
	function (locationToMessage, stuff) {
		var init = function (flags) {
			return A2(
				stuff.init,
				flags,
				_elm_lang$navigation$Native_Navigation.getLocation(
					{ctor: '_Tuple0'}));
		};
		var subs = function (model) {
			return _elm_lang$core$Platform_Sub$batch(
				{
					ctor: '::',
					_0: _elm_lang$navigation$Navigation$subscription(
						_elm_lang$navigation$Navigation$Monitor(locationToMessage)),
					_1: {
						ctor: '::',
						_0: stuff.subscriptions(model),
						_1: {ctor: '[]'}
					}
				});
		};
		return _elm_lang$html$Html$programWithFlags(
			{init: init, view: stuff.view, update: stuff.update, subscriptions: subs});
	});
var _elm_lang$navigation$Navigation$subMap = F2(
	function (func, _p7) {
		var _p8 = _p7;
		return _elm_lang$navigation$Navigation$Monitor(
			function (_p9) {
				return func(
					_p8._0(_p9));
			});
	});
var _elm_lang$navigation$Navigation$InternetExplorer = F2(
	function (a, b) {
		return {ctor: 'InternetExplorer', _0: a, _1: b};
	});
var _elm_lang$navigation$Navigation$Normal = function (a) {
	return {ctor: 'Normal', _0: a};
};
var _elm_lang$navigation$Navigation$spawnPopWatcher = function (router) {
	var reportLocation = function (_p10) {
		return A2(
			_elm_lang$core$Platform$sendToSelf,
			router,
			_elm_lang$navigation$Native_Navigation.getLocation(
				{ctor: '_Tuple0'}));
	};
	return _elm_lang$navigation$Native_Navigation.isInternetExplorer11(
		{ctor: '_Tuple0'}) ? A3(
		_elm_lang$core$Task$map2,
		_elm_lang$navigation$Navigation$InternetExplorer,
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'popstate', _elm_lang$core$Json_Decode$value, reportLocation)),
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'hashchange', _elm_lang$core$Json_Decode$value, reportLocation))) : A2(
		_elm_lang$core$Task$map,
		_elm_lang$navigation$Navigation$Normal,
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'popstate', _elm_lang$core$Json_Decode$value, reportLocation)));
};
var _elm_lang$navigation$Navigation$onEffects = F4(
	function (router, cmds, subs, _p11) {
		var _p12 = _p11;
		var _p15 = _p12.popWatcher;
		var stepState = function () {
			var _p13 = {ctor: '_Tuple2', _0: subs, _1: _p15};
			_v6_2:
			do {
				if (_p13._0.ctor === '[]') {
					if (_p13._1.ctor === 'Just') {
						return A2(
							_elm_lang$navigation$Navigation_ops['&>'],
							_elm_lang$navigation$Navigation$killPopWatcher(_p13._1._0),
							_elm_lang$core$Task$succeed(
								A2(_elm_lang$navigation$Navigation$State, subs, _elm_lang$core$Maybe$Nothing)));
					} else {
						break _v6_2;
					}
				} else {
					if (_p13._1.ctor === 'Nothing') {
						return A2(
							_elm_lang$core$Task$map,
							function (_p14) {
								return A2(
									_elm_lang$navigation$Navigation$State,
									subs,
									_elm_lang$core$Maybe$Just(_p14));
							},
							_elm_lang$navigation$Navigation$spawnPopWatcher(router));
					} else {
						break _v6_2;
					}
				}
			} while(false);
			return _elm_lang$core$Task$succeed(
				A2(_elm_lang$navigation$Navigation$State, subs, _p15));
		}();
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Task$sequence(
				A2(
					_elm_lang$core$List$map,
					A2(_elm_lang$navigation$Navigation$cmdHelp, router, subs),
					cmds)),
			stepState);
	});
_elm_lang$core$Native_Platform.effectManagers['Navigation'] = {pkg: 'elm-lang/navigation', init: _elm_lang$navigation$Navigation$init, onEffects: _elm_lang$navigation$Navigation$onEffects, onSelfMsg: _elm_lang$navigation$Navigation$onSelfMsg, tag: 'fx', cmdMap: _elm_lang$navigation$Navigation$cmdMap, subMap: _elm_lang$navigation$Navigation$subMap};

var _concourse$atc$StepTree$showHighlight = function (hl) {
	var _p0 = hl;
	switch (_p0.ctor) {
		case 'HighlightNothing':
			return '';
		case 'HighlightLine':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'#L',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_p0._0,
					A2(
						_elm_lang$core$Basics_ops['++'],
						':',
						_elm_lang$core$Basics$toString(_p0._1))));
		default:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'#L',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_p0._0,
					A2(
						_elm_lang$core$Basics_ops['++'],
						':',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p0._1),
							A2(
								_elm_lang$core$Basics_ops['++'],
								':',
								_elm_lang$core$Basics$toString(_p0._2))))));
	}
};
var _concourse$atc$StepTree$viewStepState = F2(
	function (state, finished) {
		var _p1 = state;
		switch (_p1.ctor) {
			case 'StepStatePending':
				var icon = finished ? 'fa-circle' : 'fa-circle-o-notch';
				return A2(
					_elm_lang$html$Html$i,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(
							A2(_elm_lang$core$Basics_ops['++'], 'right fa fa-fw ', icon)),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'});
			case 'StepStateRunning':
				return A2(
					_elm_lang$html$Html$i,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('right fa fa-fw fa-spin fa-circle-o-notch'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'});
			case 'StepStateSucceeded':
				return A2(
					_elm_lang$html$Html$i,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('right succeeded fa fa-fw fa-check'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'});
			case 'StepStateFailed':
				return A2(
					_elm_lang$html$Html$i,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('right failed fa fa-fw fa-times'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'});
			default:
				return A2(
					_elm_lang$html$Html$i,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('right errored fa fa-fw fa-exclamation-triangle'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'});
		}
	});
var _concourse$atc$StepTree$typeIcon = function (fa) {
	return A2(
		_elm_lang$html$Html$i,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class(
				A2(_elm_lang$core$Basics_ops['++'], 'left fa fa-fw ', fa)),
			_1: {ctor: '[]'}
		},
		{ctor: '[]'});
};
var _concourse$atc$StepTree$viewMetadata = function (metadata) {
	return function (_p2) {
		return _concourse$atc$DictView$view(
			_elm_lang$core$Dict$fromList(_p2));
	}(
		A2(
			_elm_lang$core$List$map,
			function (_p3) {
				var _p4 = _p3;
				return {
					ctor: '_Tuple2',
					_0: _p4.name,
					_1: A2(
						_elm_lang$html$Html$pre,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(_p4.value),
							_1: {ctor: '[]'}
						})
				};
			},
			metadata));
};
var _concourse$atc$StepTree$viewVersion = function (version) {
	return function (_p5) {
		return _concourse$atc$DictView$view(
			A2(
				_elm_lang$core$Dict$map,
				F2(
					function (_p6, s) {
						return _elm_lang$html$Html$text(s);
					}),
				_p5));
	}(
		A2(_elm_lang$core$Maybe$withDefault, _elm_lang$core$Dict$empty, version));
};
var _concourse$atc$StepTree$viewLine = function (line) {
	return A2(
		_elm_lang$html$Html$td,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('timestamped-content'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(_elm_lang$html$Html_Lazy$lazy, _vito$elm_ansi$Ansi_Log$viewLine, line),
			_1: {ctor: '[]'}
		});
};
var _concourse$atc$StepTree$getMultiStepIndex = F2(
	function (idx, tree) {
		var steps = function () {
			var _p7 = tree;
			switch (_p7.ctor) {
				case 'Aggregate':
					return _p7._0;
				case 'Do':
					return _p7._0;
				case 'Retry':
					return _p7._1;
				default:
					return _elm_lang$core$Native_Utils.crashCase(
						'StepTree',
						{
							start: {line: 564, column: 13},
							end: {line: 575, column: 45}
						},
						_p7)('impossible');
			}
		}();
		var _p9 = A2(_elm_lang$core$Array$get, idx, steps);
		if (_p9.ctor === 'Just') {
			return _p9._0;
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'StepTree',
				{
					start: {line: 577, column: 9},
					end: {line: 582, column: 41}
				},
				_p9)('impossible');
		}
	});
var _concourse$atc$StepTree$getHook = function (tree) {
	var _p11 = tree;
	switch (_p11.ctor) {
		case 'OnSuccess':
			return _p11._0.hook;
		case 'OnFailure':
			return _p11._0.hook;
		case 'OnAbort':
			return _p11._0.hook;
		case 'Ensure':
			return _p11._0.hook;
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'StepTree',
				{
					start: {line: 524, column: 5},
					end: {line: 538, column: 37}
				},
				_p11)('impossible');
	}
};
var _concourse$atc$StepTree$getStep = function (tree) {
	var _p13 = tree;
	switch (_p13.ctor) {
		case 'OnSuccess':
			return _p13._0.step;
		case 'OnFailure':
			return _p13._0.step;
		case 'OnAbort':
			return _p13._0.step;
		case 'Ensure':
			return _p13._0.step;
		case 'Try':
			return _p13._0;
		case 'Timeout':
			return _p13._0;
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'StepTree',
				{
					start: {line: 469, column: 5},
					end: {line: 489, column: 37}
				},
				_p13)('impossible');
	}
};
var _concourse$atc$StepTree$updateAt = F3(
	function (id, update, root) {
		var _p15 = A2(_elm_lang$core$Dict$get, id, root.foci);
		if (_p15.ctor === 'Nothing') {
			return _elm_lang$core$Native_Utils.crashCase(
				'StepTree',
				{
					start: {line: 360, column: 5},
					end: {line: 365, column: 66}
				},
				_p15)(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'updateAt: id ',
					A2(_elm_lang$core$Basics_ops['++'], id, ' not found')));
		} else {
			return _elm_lang$core$Native_Utils.update(
				root,
				{
					tree: A3(_concourse$atc$Focus$update, _p15._0, update, root.tree)
				});
		}
	});
var _concourse$atc$StepTree$isFirstOccurrence = F2(
	function (resources, step) {
		isFirstOccurrence:
		while (true) {
			var _p17 = resources;
			if (_p17.ctor === '[]') {
				return false;
			} else {
				if (_elm_lang$core$Native_Utils.eq(_p17._0.name, step)) {
					return _p17._0.firstOccurrence;
				} else {
					var _v9 = _p17._1,
						_v10 = step;
					resources = _v9;
					step = _v10;
					continue isFirstOccurrence;
				}
			}
		}
	});
var _concourse$atc$StepTree$setupGetStep = F4(
	function (resources, name, version, step) {
		return _elm_lang$core$Native_Utils.update(
			step,
			{
				version: version,
				firstOccurrence: A2(_concourse$atc$StepTree$isFirstOccurrence, resources.inputs, name)
			});
	});
var _concourse$atc$StepTree$HookedStep = F2(
	function (a, b) {
		return {step: a, hook: b};
	});
var _concourse$atc$StepTree$Step = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {id: a, name: b, state: c, log: d, error: e, expanded: f, version: g, metadata: h, firstOccurrence: i, timestamps: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _concourse$atc$StepTree$Model = F4(
	function (a, b, c, d) {
		return {tree: a, foci: b, finished: c, highlight: d};
	});
var _concourse$atc$StepTree$MetadataField = F2(
	function (a, b) {
		return {name: a, value: b};
	});
var _concourse$atc$StepTree$Timeout = function (a) {
	return {ctor: 'Timeout', _0: a};
};
var _concourse$atc$StepTree$Retry = F4(
	function (a, b, c, d) {
		return {ctor: 'Retry', _0: a, _1: b, _2: c, _3: d};
	});
var _concourse$atc$StepTree$Try = function (a) {
	return {ctor: 'Try', _0: a};
};
var _concourse$atc$StepTree$Ensure = function (a) {
	return {ctor: 'Ensure', _0: a};
};
var _concourse$atc$StepTree$OnAbort = function (a) {
	return {ctor: 'OnAbort', _0: a};
};
var _concourse$atc$StepTree$OnFailure = function (a) {
	return {ctor: 'OnFailure', _0: a};
};
var _concourse$atc$StepTree$OnSuccess = function (a) {
	return {ctor: 'OnSuccess', _0: a};
};
var _concourse$atc$StepTree$updateStep = F2(
	function (update, tree) {
		var _p18 = tree;
		switch (_p18.ctor) {
			case 'OnSuccess':
				var _p19 = _p18._0;
				return _concourse$atc$StepTree$OnSuccess(
					_elm_lang$core$Native_Utils.update(
						_p19,
						{
							step: update(_p19.step)
						}));
			case 'OnFailure':
				var _p20 = _p18._0;
				return _concourse$atc$StepTree$OnFailure(
					_elm_lang$core$Native_Utils.update(
						_p20,
						{
							step: update(_p20.step)
						}));
			case 'OnAbort':
				var _p21 = _p18._0;
				return _concourse$atc$StepTree$OnAbort(
					_elm_lang$core$Native_Utils.update(
						_p21,
						{
							step: update(_p21.step)
						}));
			case 'Ensure':
				var _p22 = _p18._0;
				return _concourse$atc$StepTree$Ensure(
					_elm_lang$core$Native_Utils.update(
						_p22,
						{
							step: update(_p22.step)
						}));
			case 'Try':
				return _concourse$atc$StepTree$Try(
					update(_p18._0));
			case 'Timeout':
				return _concourse$atc$StepTree$Timeout(
					update(_p18._0));
			default:
				return _elm_lang$core$Native_Utils.crashCase(
					'StepTree',
					{
						start: {line: 494, column: 5},
						end: {line: 514, column: 37}
					},
					_p18)('impossible');
		}
	});
var _concourse$atc$StepTree$wrapStep = F2(
	function (id, subFocus) {
		return A2(
			_concourse$atc$Focus_ops['=>'],
			A2(_concourse$atc$Focus$create, _concourse$atc$StepTree$getStep, _concourse$atc$StepTree$updateStep),
			subFocus);
	});
var _concourse$atc$StepTree$updateHook = F2(
	function (update, tree) {
		var _p24 = tree;
		switch (_p24.ctor) {
			case 'OnSuccess':
				var _p25 = _p24._0;
				return _concourse$atc$StepTree$OnSuccess(
					_elm_lang$core$Native_Utils.update(
						_p25,
						{
							hook: update(_p25.hook)
						}));
			case 'OnFailure':
				var _p26 = _p24._0;
				return _concourse$atc$StepTree$OnFailure(
					_elm_lang$core$Native_Utils.update(
						_p26,
						{
							hook: update(_p26.hook)
						}));
			case 'OnAbort':
				var _p27 = _p24._0;
				return _concourse$atc$StepTree$OnAbort(
					_elm_lang$core$Native_Utils.update(
						_p27,
						{
							hook: update(_p27.hook)
						}));
			case 'Ensure':
				var _p28 = _p24._0;
				return _concourse$atc$StepTree$Ensure(
					_elm_lang$core$Native_Utils.update(
						_p28,
						{
							hook: update(_p28.hook)
						}));
			default:
				return _elm_lang$core$Native_Utils.crashCase(
					'StepTree',
					{
						start: {line: 543, column: 5},
						end: {line: 557, column: 37}
					},
					_p24)('impossible');
		}
	});
var _concourse$atc$StepTree$wrapHook = F2(
	function (id, subFocus) {
		return A2(
			_concourse$atc$Focus_ops['=>'],
			A2(_concourse$atc$Focus$create, _concourse$atc$StepTree$getHook, _concourse$atc$StepTree$updateHook),
			subFocus);
	});
var _concourse$atc$StepTree$Do = function (a) {
	return {ctor: 'Do', _0: a};
};
var _concourse$atc$StepTree$Aggregate = function (a) {
	return {ctor: 'Aggregate', _0: a};
};
var _concourse$atc$StepTree$DependentGet = function (a) {
	return {ctor: 'DependentGet', _0: a};
};
var _concourse$atc$StepTree$Put = function (a) {
	return {ctor: 'Put', _0: a};
};
var _concourse$atc$StepTree$Get = function (a) {
	return {ctor: 'Get', _0: a};
};
var _concourse$atc$StepTree$Task = function (a) {
	return {ctor: 'Task', _0: a};
};
var _concourse$atc$StepTree$map = F2(
	function (f, tree) {
		var _p30 = tree;
		switch (_p30.ctor) {
			case 'Task':
				return _concourse$atc$StepTree$Task(
					f(_p30._0));
			case 'Get':
				return _concourse$atc$StepTree$Get(
					f(_p30._0));
			case 'Put':
				return _concourse$atc$StepTree$Put(
					f(_p30._0));
			case 'DependentGet':
				return _concourse$atc$StepTree$DependentGet(
					f(_p30._0));
			default:
				return tree;
		}
	});
var _concourse$atc$StepTree$User = {ctor: 'User'};
var _concourse$atc$StepTree$focusRetry = F2(
	function (tab, tree) {
		var _p31 = tree;
		if (_p31.ctor === 'Retry') {
			return A4(_concourse$atc$StepTree$Retry, _p31._0, _p31._1, tab, _concourse$atc$StepTree$User);
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'StepTree',
				{
					start: {line: 350, column: 5},
					end: {line: 355, column: 59}
				},
				_p31)('impossible (non-retry tab focus)');
		}
	});
var _concourse$atc$StepTree$Auto = {ctor: 'Auto'};
var _concourse$atc$StepTree$setMultiStepIndex = F3(
	function (idx, update, tree) {
		var _p33 = tree;
		switch (_p33.ctor) {
			case 'Aggregate':
				return _concourse$atc$StepTree$Aggregate(
					A3(
						_elm_lang$core$Array$set,
						idx,
						update(
							A2(_concourse$atc$StepTree$getMultiStepIndex, idx, tree)),
						_p33._0));
			case 'Do':
				return _concourse$atc$StepTree$Do(
					A3(
						_elm_lang$core$Array$set,
						idx,
						update(
							A2(_concourse$atc$StepTree$getMultiStepIndex, idx, tree)),
						_p33._0));
			case 'Retry':
				var _p35 = _p33._0;
				var updatedSteps = A3(
					_elm_lang$core$Array$set,
					idx,
					update(
						A2(_concourse$atc$StepTree$getMultiStepIndex, idx, tree)),
					_p33._1);
				var _p34 = _p33._3;
				if (_p34.ctor === 'Auto') {
					return A4(_concourse$atc$StepTree$Retry, _p35, updatedSteps, idx + 1, _concourse$atc$StepTree$Auto);
				} else {
					return A4(_concourse$atc$StepTree$Retry, _p35, updatedSteps, _p33._2, _concourse$atc$StepTree$User);
				}
			default:
				return _elm_lang$core$Native_Utils.crashCase(
					'StepTree',
					{
						start: {line: 587, column: 5},
						end: {line: 607, column: 37}
					},
					_p33)('impossible');
		}
	});
var _concourse$atc$StepTree$wrapMultiStep = function (i) {
	return _elm_lang$core$Dict$map(
		F2(
			function (_p37, focus) {
				return A2(
					_concourse$atc$Focus_ops['=>'],
					A2(
						_concourse$atc$Focus$create,
						_concourse$atc$StepTree$getMultiStepIndex(i),
						_concourse$atc$StepTree$setMultiStepIndex(i)),
					focus);
			}));
};
var _concourse$atc$StepTree$ExtendHighlight = F2(
	function (a, b) {
		return {ctor: 'ExtendHighlight', _0: a, _1: b};
	});
var _concourse$atc$StepTree$SetHighlight = F2(
	function (a, b) {
		return {ctor: 'SetHighlight', _0: a, _1: b};
	});
var _concourse$atc$StepTree$SwitchTab = F2(
	function (a, b) {
		return {ctor: 'SwitchTab', _0: a, _1: b};
	});
var _concourse$atc$StepTree$Finished = {ctor: 'Finished'};
var _concourse$atc$StepTree$ToggleStep = function (a) {
	return {ctor: 'ToggleStep', _0: a};
};
var _concourse$atc$StepTree$StepStateErrored = {ctor: 'StepStateErrored'};
var _concourse$atc$StepTree$StepStateFailed = {ctor: 'StepStateFailed'};
var _concourse$atc$StepTree$StepStateSucceeded = {ctor: 'StepStateSucceeded'};
var _concourse$atc$StepTree$StepStateRunning = {ctor: 'StepStateRunning'};
var _concourse$atc$StepTree$StepStatePending = {ctor: 'StepStatePending'};
var _concourse$atc$StepTree$initBottom = F4(
	function (hl, create, id, name) {
		var step = {
			id: id,
			name: name,
			state: _concourse$atc$StepTree$StepStatePending,
			log: _vito$elm_ansi$Ansi_Log$init(_vito$elm_ansi$Ansi_Log$Cooked),
			error: _elm_lang$core$Maybe$Nothing,
			expanded: function () {
				var _p38 = hl;
				switch (_p38.ctor) {
					case 'HighlightNothing':
						return _elm_lang$core$Maybe$Nothing;
					case 'HighlightLine':
						return _elm_lang$core$Native_Utils.eq(id, _p38._0) ? _elm_lang$core$Maybe$Just(true) : _elm_lang$core$Maybe$Nothing;
					default:
						return _elm_lang$core$Native_Utils.eq(id, _p38._0) ? _elm_lang$core$Maybe$Just(true) : _elm_lang$core$Maybe$Nothing;
				}
			}(),
			version: _elm_lang$core$Maybe$Nothing,
			metadata: {ctor: '[]'},
			firstOccurrence: false,
			timestamps: _elm_lang$core$Dict$empty
		};
		return {
			tree: create(step),
			foci: A2(
				_elm_lang$core$Dict$singleton,
				id,
				A2(_concourse$atc$Focus$create, _elm_lang$core$Basics$identity, _elm_lang$core$Basics$identity)),
			finished: false,
			highlight: hl
		};
	});
var _concourse$atc$StepTree$init = F3(
	function (hl, resources, plan) {
		var _p39 = plan.step;
		switch (_p39.ctor) {
			case 'BuildStepTask':
				return A4(_concourse$atc$StepTree$initBottom, hl, _concourse$atc$StepTree$Task, plan.id, _p39._0);
			case 'BuildStepGet':
				var _p41 = _p39._0;
				return A4(
					_concourse$atc$StepTree$initBottom,
					hl,
					function (_p40) {
						return _concourse$atc$StepTree$Get(
							A4(_concourse$atc$StepTree$setupGetStep, resources, _p41, _p39._1, _p40));
					},
					plan.id,
					_p41);
			case 'BuildStepPut':
				return A4(_concourse$atc$StepTree$initBottom, hl, _concourse$atc$StepTree$Put, plan.id, _p39._0);
			case 'BuildStepDependentGet':
				return A4(_concourse$atc$StepTree$initBottom, hl, _concourse$atc$StepTree$DependentGet, plan.id, _p39._0);
			case 'BuildStepAggregate':
				var inited = A2(
					_elm_lang$core$Array$map,
					A2(_concourse$atc$StepTree$init, hl, resources),
					_p39._0);
				var trees = A2(
					_elm_lang$core$Array$map,
					function (_) {
						return _.tree;
					},
					inited);
				var subFoci = A2(
					_elm_lang$core$Array$map,
					function (_) {
						return _.foci;
					},
					inited);
				var wrappedSubFoci = A2(_elm_lang$core$Array$indexedMap, _concourse$atc$StepTree$wrapMultiStep, subFoci);
				var foci = A3(_elm_lang$core$Array$foldr, _elm_lang$core$Dict$union, _elm_lang$core$Dict$empty, wrappedSubFoci);
				return A4(
					_concourse$atc$StepTree$Model,
					_concourse$atc$StepTree$Aggregate(trees),
					foci,
					false,
					hl);
			case 'BuildStepDo':
				var inited = A2(
					_elm_lang$core$Array$map,
					A2(_concourse$atc$StepTree$init, hl, resources),
					_p39._0);
				var trees = A2(
					_elm_lang$core$Array$map,
					function (_) {
						return _.tree;
					},
					inited);
				var subFoci = A2(
					_elm_lang$core$Array$map,
					function (_) {
						return _.foci;
					},
					inited);
				var wrappedSubFoci = A2(_elm_lang$core$Array$indexedMap, _concourse$atc$StepTree$wrapMultiStep, subFoci);
				var foci = A3(_elm_lang$core$Array$foldr, _elm_lang$core$Dict$union, _elm_lang$core$Dict$empty, wrappedSubFoci);
				return A4(
					_concourse$atc$StepTree$Model,
					_concourse$atc$StepTree$Do(trees),
					foci,
					false,
					hl);
			case 'BuildStepOnSuccess':
				return A4(_concourse$atc$StepTree$initHookedStep, hl, resources, _concourse$atc$StepTree$OnSuccess, _p39._0);
			case 'BuildStepOnFailure':
				return A4(_concourse$atc$StepTree$initHookedStep, hl, resources, _concourse$atc$StepTree$OnFailure, _p39._0);
			case 'BuildStepOnAbort':
				return A4(_concourse$atc$StepTree$initHookedStep, hl, resources, _concourse$atc$StepTree$OnAbort, _p39._0);
			case 'BuildStepEnsure':
				return A4(_concourse$atc$StepTree$initHookedStep, hl, resources, _concourse$atc$StepTree$Ensure, _p39._0);
			case 'BuildStepTry':
				return A4(_concourse$atc$StepTree$initWrappedStep, hl, resources, _concourse$atc$StepTree$Try, _p39._0);
			case 'BuildStepRetry':
				var selfFoci = A2(
					_elm_lang$core$Dict$singleton,
					plan.id,
					A2(_concourse$atc$Focus$create, _elm_lang$core$Basics$identity, _elm_lang$core$Basics$identity));
				var inited = A2(
					_elm_lang$core$Array$map,
					A2(_concourse$atc$StepTree$init, hl, resources),
					_p39._0);
				var trees = A2(
					_elm_lang$core$Array$map,
					function (_) {
						return _.tree;
					},
					inited);
				var subFoci = A2(
					_elm_lang$core$Array$map,
					function (_) {
						return _.foci;
					},
					inited);
				var wrappedSubFoci = A2(_elm_lang$core$Array$indexedMap, _concourse$atc$StepTree$wrapMultiStep, subFoci);
				var foci = A3(_elm_lang$core$Array$foldr, _elm_lang$core$Dict$union, selfFoci, wrappedSubFoci);
				return A4(
					_concourse$atc$StepTree$Model,
					A4(_concourse$atc$StepTree$Retry, plan.id, trees, 1, _concourse$atc$StepTree$Auto),
					foci,
					false,
					hl);
			default:
				return A4(_concourse$atc$StepTree$initWrappedStep, hl, resources, _concourse$atc$StepTree$Timeout, _p39._0);
		}
	});
var _concourse$atc$StepTree$initHookedStep = F4(
	function (hl, resources, create, hookedPlan) {
		var hookModel = A3(_concourse$atc$StepTree$init, hl, resources, hookedPlan.hook);
		var stepModel = A3(_concourse$atc$StepTree$init, hl, resources, hookedPlan.step);
		return {
			tree: create(
				{step: stepModel.tree, hook: hookModel.tree}),
			foci: A2(
				_elm_lang$core$Dict$union,
				A2(_elm_lang$core$Dict$map, _concourse$atc$StepTree$wrapStep, stepModel.foci),
				A2(_elm_lang$core$Dict$map, _concourse$atc$StepTree$wrapHook, hookModel.foci)),
			finished: stepModel.finished,
			highlight: hl
		};
	});
var _concourse$atc$StepTree$initWrappedStep = F4(
	function (hl, resources, create, plan) {
		var _p42 = A3(_concourse$atc$StepTree$init, hl, resources, plan);
		var tree = _p42.tree;
		var foci = _p42.foci;
		return {
			tree: create(tree),
			foci: A2(_elm_lang$core$Dict$map, _concourse$atc$StepTree$wrapStep, foci),
			finished: false,
			highlight: hl
		};
	});
var _concourse$atc$StepTree$isActive = F2(
	function (x, y) {
		return !_elm_lang$core$Native_Utils.eq(x, y);
	})(_concourse$atc$StepTree$StepStatePending);
var _concourse$atc$StepTree$stepIsActive = function (_p43) {
	return _concourse$atc$StepTree$isActive(
		function (_) {
			return _.state;
		}(_p43));
};
var _concourse$atc$StepTree$treeIsActive = function (tree) {
	treeIsActive:
	while (true) {
		var _p44 = tree;
		switch (_p44.ctor) {
			case 'Aggregate':
				return A2(
					_elm_lang$core$List$any,
					_concourse$atc$StepTree$treeIsActive,
					_elm_lang$core$Array$toList(_p44._0));
			case 'Do':
				return A2(
					_elm_lang$core$List$any,
					_concourse$atc$StepTree$treeIsActive,
					_elm_lang$core$Array$toList(_p44._0));
			case 'OnSuccess':
				var _v20 = _p44._0.step;
				tree = _v20;
				continue treeIsActive;
			case 'OnFailure':
				var _v21 = _p44._0.step;
				tree = _v21;
				continue treeIsActive;
			case 'OnAbort':
				var _v22 = _p44._0.step;
				tree = _v22;
				continue treeIsActive;
			case 'Ensure':
				var _v23 = _p44._0.step;
				tree = _v23;
				continue treeIsActive;
			case 'Try':
				var _v24 = _p44._0;
				tree = _v24;
				continue treeIsActive;
			case 'Timeout':
				var _v25 = _p44._0;
				tree = _v25;
				continue treeIsActive;
			case 'Retry':
				return A2(
					_elm_lang$core$List$any,
					_concourse$atc$StepTree$treeIsActive,
					_elm_lang$core$Array$toList(_p44._1));
			case 'Task':
				return _concourse$atc$StepTree$stepIsActive(_p44._0);
			case 'Get':
				return _concourse$atc$StepTree$stepIsActive(_p44._0);
			case 'Put':
				return _concourse$atc$StepTree$stepIsActive(_p44._0);
			default:
				return _concourse$atc$StepTree$stepIsActive(_p44._0);
		}
	}
};
var _concourse$atc$StepTree$viewTab = F4(
	function (id, currentTab, idx, step) {
		var tab = idx + 1;
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'current',
							_1: _elm_lang$core$Native_Utils.eq(currentTab, tab)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'inactive',
								_1: !_concourse$atc$StepTree$treeIsActive(step)
							},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(
							A2(_concourse$atc$StepTree$SwitchTab, id, tab)),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(tab)),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _concourse$atc$StepTree$autoExpanded = function (state) {
	return _concourse$atc$StepTree$isActive(state) && (!_elm_lang$core$Native_Utils.eq(state, _concourse$atc$StepTree$StepStateSucceeded));
};
var _concourse$atc$StepTree$toggleExpanded = function (_p45) {
	var _p46 = _p45;
	return _elm_lang$core$Maybe$Just(
		!A2(
			_elm_lang$core$Maybe$withDefault,
			_concourse$atc$StepTree$autoExpanded(_p46.state),
			_p46.expanded));
};
var _concourse$atc$StepTree$HighlightRange = F3(
	function (a, b, c) {
		return {ctor: 'HighlightRange', _0: a, _1: b, _2: c};
	});
var _concourse$atc$StepTree$HighlightLine = F2(
	function (a, b) {
		return {ctor: 'HighlightLine', _0: a, _1: b};
	});
var _concourse$atc$StepTree$update = F2(
	function (action, root) {
		var _p47 = action;
		switch (_p47.ctor) {
			case 'ToggleStep':
				return {
					ctor: '_Tuple2',
					_0: A3(
						_concourse$atc$StepTree$updateAt,
						_p47._0,
						_concourse$atc$StepTree$map(
							function (step) {
								return _elm_lang$core$Native_Utils.update(
									step,
									{
										expanded: _concourse$atc$StepTree$toggleExpanded(step)
									});
							}),
						root),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Finished':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						root,
						{finished: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SwitchTab':
				return {
					ctor: '_Tuple2',
					_0: A3(
						_concourse$atc$StepTree$updateAt,
						_p47._0,
						_concourse$atc$StepTree$focusRetry(_p47._1),
						root),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SetHighlight':
				var hl = A2(_concourse$atc$StepTree$HighlightLine, _p47._0, _p47._1);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						root,
						{highlight: hl}),
					_1: _elm_lang$navigation$Navigation$modifyUrl(
						_concourse$atc$StepTree$showHighlight(hl))
				};
			default:
				var _p52 = _p47._1;
				var _p51 = _p47._0;
				var hl = function () {
					var _p48 = root.highlight;
					switch (_p48.ctor) {
						case 'HighlightNothing':
							return A2(_concourse$atc$StepTree$HighlightLine, _p51, _p52);
						case 'HighlightLine':
							var _p49 = _p48._1;
							return _elm_lang$core$Native_Utils.eq(_p48._0, _p51) ? ((_elm_lang$core$Native_Utils.cmp(_p49, _p52) < 0) ? A3(_concourse$atc$StepTree$HighlightRange, _p51, _p49, _p52) : A3(_concourse$atc$StepTree$HighlightRange, _p51, _p52, _p49)) : A2(_concourse$atc$StepTree$HighlightLine, _p51, _p52);
						default:
							var _p50 = _p48._1;
							return _elm_lang$core$Native_Utils.eq(_p48._0, _p51) ? ((_elm_lang$core$Native_Utils.cmp(_p50, _p52) < 0) ? A3(_concourse$atc$StepTree$HighlightRange, _p51, _p50, _p52) : A3(_concourse$atc$StepTree$HighlightRange, _p51, _p52, _p50)) : A2(_concourse$atc$StepTree$HighlightLine, _p51, _p52);
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						root,
						{highlight: hl}),
					_1: _elm_lang$navigation$Navigation$modifyUrl(
						_concourse$atc$StepTree$showHighlight(hl))
				};
		}
	});
var _concourse$atc$StepTree$viewTimestamp = F3(
	function (hl, id, _p53) {
		var _p54 = _p53;
		var _p55 = _p54._0;
		return A2(
			_elm_lang$html$Html$a,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$href(
					_concourse$atc$StepTree$showHighlight(
						A2(_concourse$atc$StepTree$HighlightLine, id, _p55))),
				_1: {
					ctor: '::',
					_0: A2(
						_concourse$atc$StrictEvents$onLeftClickOrShiftLeftClick,
						A2(_concourse$atc$StepTree$SetHighlight, id, _p55),
						A2(_concourse$atc$StepTree$ExtendHighlight, id, _p55)),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('timestamp'),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html_Attributes$attribute,
								'data-timestamp',
								A2(_mgold$elm_date_format$Date_Format$format, '%H:%M:%S', _p54._1)),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			});
	});
var _concourse$atc$StepTree$viewTimestampedLine = F5(
	function (timestamps, hl, id, lineNo, line) {
		var highlighted = function () {
			var _p56 = hl;
			switch (_p56.ctor) {
				case 'HighlightNothing':
					return false;
				case 'HighlightLine':
					return _elm_lang$core$Native_Utils.eq(_p56._0, id) && _elm_lang$core$Native_Utils.eq(_p56._1, lineNo);
				default:
					return _elm_lang$core$Native_Utils.eq(_p56._0, id) && ((_elm_lang$core$Native_Utils.cmp(lineNo, _p56._1) > -1) && (_elm_lang$core$Native_Utils.cmp(lineNo, _p56._2) < 1));
			}
		}();
		return A2(
			_elm_lang$html$Html$tr,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'timestamped-line', _1: true},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'highlighted-line', _1: highlighted},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: function () {
					var _p57 = A2(_elm_lang$core$Dict$get, lineNo, timestamps);
					if (_p57.ctor === 'Just') {
						return A3(
							_concourse$atc$StepTree$viewTimestamp,
							hl,
							id,
							{ctor: '_Tuple2', _0: lineNo, _1: _p57._0});
					} else {
						return _elm_lang$html$Html$text('');
					}
				}(),
				_1: {
					ctor: '::',
					_0: _concourse$atc$StepTree$viewLine(line),
					_1: {ctor: '[]'}
				}
			});
	});
var _concourse$atc$StepTree$viewLogs = F4(
	function (_p58, timestamps, hl, id) {
		var _p59 = _p58;
		return _elm_lang$core$Array$toList(
			A2(
				_elm_lang$core$Array$indexedMap,
				function (idx) {
					return A4(_concourse$atc$StepTree$viewTimestampedLine, timestamps, hl, id, idx + 1);
				},
				_p59.lines));
	});
var _concourse$atc$StepTree$viewStep = F3(
	function (model, _p60, icon) {
		var _p61 = _p60;
		var _p66 = _p61.state;
		var _p65 = _p61.name;
		var _p64 = _p61.id;
		var _p63 = _p61.expanded;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'build-step', _1: true},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'inactive',
								_1: !_concourse$atc$StepTree$isActive(_p66)
							},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'first-occurrence', _1: _p61.firstOccurrence},
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(_elm_lang$html$Html_Attributes$attribute, 'data-step-name', _p65),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('header'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								_concourse$atc$StepTree$ToggleStep(_p64)),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(_concourse$atc$StepTree$viewStepState, _p66, model.finished),
						_1: {
							ctor: '::',
							_0: _concourse$atc$StepTree$typeIcon(icon),
							_1: {
								ctor: '::',
								_0: _concourse$atc$StepTree$viewVersion(_p61.version),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$h3,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(_p65),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('clearfix'),
												_1: {ctor: '[]'}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'step-body', _1: true},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'clearfix', _1: true},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'step-collapsed',
												_1: !A2(
													_elm_lang$core$Maybe$withDefault,
													_concourse$atc$StepTree$autoExpanded(_p66),
													_p63)
											},
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$Maybe$withDefault,
							_concourse$atc$StepTree$autoExpanded(_p66),
							A2(
								_elm_lang$core$Maybe$map,
								_elm_lang$core$Basics$always(true),
								_p63)) ? {
							ctor: '::',
							_0: _concourse$atc$StepTree$viewMetadata(_p61.metadata),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$pre,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('timestamped-logs'),
										_1: {ctor: '[]'}
									},
									A4(_concourse$atc$StepTree$viewLogs, _p61.log, _p61.timestamps, model.highlight, _p64)),
								_1: {
									ctor: '::',
									_0: function () {
										var _p62 = _p61.error;
										if (_p62.ctor === 'Nothing') {
											return A2(
												_elm_lang$html$Html$span,
												{ctor: '[]'},
												{ctor: '[]'});
										} else {
											return A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('error'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$pre,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(_p62._0),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												});
										}
									}(),
									_1: {ctor: '[]'}
								}
							}
						} : {ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			});
	});
var _concourse$atc$StepTree$viewTree = F2(
	function (model, tree) {
		viewTree:
		while (true) {
			var _p67 = tree;
			switch (_p67.ctor) {
				case 'Task':
					return A3(_concourse$atc$StepTree$viewStep, model, _p67._0, 'fa-terminal');
				case 'Get':
					return A3(_concourse$atc$StepTree$viewStep, model, _p67._0, 'fa-arrow-down');
				case 'DependentGet':
					return A3(_concourse$atc$StepTree$viewStep, model, _p67._0, 'fa-arrow-down');
				case 'Put':
					return A3(_concourse$atc$StepTree$viewStep, model, _p67._0, 'fa-arrow-up');
				case 'Try':
					var _v36 = model,
						_v37 = _p67._0;
					model = _v36;
					tree = _v37;
					continue viewTree;
				case 'Retry':
					var _p71 = _p67._2;
					var _p70 = _p67._1;
					return A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('retry'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$ul,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('retry-tabs'),
									_1: {ctor: '[]'}
								},
								_elm_lang$core$Array$toList(
									A2(
										_elm_lang$core$Array$indexedMap,
										A2(_concourse$atc$StepTree$viewTab, _p67._0, _p71),
										_p70))),
							_1: {
								ctor: '::',
								_0: function () {
									var _p68 = A2(_elm_lang$core$Array$get, _p71 - 1, _p70);
									if (_p68.ctor === 'Just') {
										return A2(_concourse$atc$StepTree$viewTree, model, _p68._0);
									} else {
										return _elm_lang$core$Native_Utils.crashCase(
											'StepTree',
											{
												start: {line: 637, column: 19},
												end: {line: 642, column: 70}
											},
											_p68)('impossible (bogus tab selected)');
									}
								}(),
								_1: {ctor: '[]'}
							}
						});
				case 'Timeout':
					var _v39 = model,
						_v40 = _p67._0;
					model = _v39;
					tree = _v40;
					continue viewTree;
				case 'Aggregate':
					return A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('aggregate'),
							_1: {ctor: '[]'}
						},
						_elm_lang$core$Array$toList(
							A2(
								_elm_lang$core$Array$map,
								_concourse$atc$StepTree$viewSeq(model),
								_p67._0)));
				case 'Do':
					return A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('do'),
							_1: {ctor: '[]'}
						},
						_elm_lang$core$Array$toList(
							A2(
								_elm_lang$core$Array$map,
								_concourse$atc$StepTree$viewSeq(model),
								_p67._0)));
				case 'OnSuccess':
					return A4(_concourse$atc$StepTree$viewHooked, 'success', model, _p67._0.step, _p67._0.hook);
				case 'OnFailure':
					return A4(_concourse$atc$StepTree$viewHooked, 'failure', model, _p67._0.step, _p67._0.hook);
				case 'OnAbort':
					return A4(_concourse$atc$StepTree$viewHooked, 'abort', model, _p67._0.step, _p67._0.hook);
				default:
					return A4(_concourse$atc$StepTree$viewHooked, 'ensure', model, _p67._0.step, _p67._0.hook);
			}
		}
	});
var _concourse$atc$StepTree$viewHooked = F4(
	function (name, model, step, hook) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('hooked'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('step'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(_concourse$atc$StepTree$viewTree, model, step),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('children'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class(
										A2(_elm_lang$core$Basics_ops['++'], 'hook hook-', name)),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(_concourse$atc$StepTree$viewTree, model, hook),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _concourse$atc$StepTree$viewSeq = F2(
	function (model, tree) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('seq'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(_concourse$atc$StepTree$viewTree, model, tree),
				_1: {ctor: '[]'}
			});
	});
var _concourse$atc$StepTree$view = function (model) {
	return A2(_concourse$atc$StepTree$viewTree, model, model.tree);
};
var _concourse$atc$StepTree$HighlightNothing = {ctor: 'HighlightNothing'};
var _concourse$atc$StepTree$parseHighlight = function (hash) {
	var _p72 = _elm_lang$core$String$uncons(
		A2(_elm_lang$core$String$dropLeft, 1, hash));
	if (((_p72.ctor === 'Just') && (_p72._0.ctor === '_Tuple2')) && (_p72._0._0.valueOf() === 'L')) {
		var _p73 = A2(_elm_lang$core$String$split, ':', _p72._0._1);
		_v42_2:
		do {
			if ((_p73.ctor === '::') && (_p73._1.ctor === '::')) {
				if (_p73._1._1.ctor === '::') {
					if (_p73._1._1._1.ctor === '[]') {
						var _p74 = {
							ctor: '_Tuple2',
							_0: _elm_lang$core$String$toInt(_p73._1._0),
							_1: _elm_lang$core$String$toInt(_p73._1._1._0)
						};
						if (((_p74.ctor === '_Tuple2') && (_p74._0.ctor === 'Ok')) && (_p74._1.ctor === 'Ok')) {
							return A3(_concourse$atc$StepTree$HighlightRange, _p73._0, _p74._0._0, _p74._1._0);
						} else {
							return _concourse$atc$StepTree$HighlightNothing;
						}
					} else {
						break _v42_2;
					}
				} else {
					var _p75 = _elm_lang$core$String$toInt(_p73._1._0);
					if (_p75.ctor === 'Ok') {
						return A2(_concourse$atc$StepTree$HighlightLine, _p73._0, _p75._0);
					} else {
						return _concourse$atc$StepTree$HighlightNothing;
					}
				}
			} else {
				break _v42_2;
			}
		} while(false);
		return _concourse$atc$StepTree$HighlightNothing;
	} else {
		return _concourse$atc$StepTree$HighlightNothing;
	}
};

var _concourse$atc$BetaBuildOutput$viewLoginButton = function (build) {
	return A2(
		_elm_lang$html$Html$form,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('build-login'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$method('get'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$action(
						_concourse$atc$Format$prependBeta('/login')),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$type_('submit'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$value('log in to view'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$type_('hidden'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$name('redirect'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$value(
									_concourse$atc$Format$prependBeta(
										_concourse$atc$Concourse_Build$url(build))),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		});
};
var _concourse$atc$BetaBuildOutput$viewErrors = function (errors) {
	var _p0 = errors;
	if (_p0.ctor === 'Nothing') {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '[]'});
	} else {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('build-step'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('header'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$i,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('left fa fa-fw fa-exclamation-triangle'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$h3,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('error'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('step-body build-errors-body'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _vito$elm_ansi$Ansi_Log$view(_p0._0),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	}
};
var _concourse$atc$BetaBuildOutput$setStepState = F2(
	function (state, tree) {
		return A2(
			_concourse$atc$StepTree$map,
			function (step) {
				return _elm_lang$core$Native_Utils.update(
					step,
					{state: state});
			},
			tree);
	});
var _concourse$atc$BetaBuildOutput$setResourceInfo = F3(
	function (version, metadata, tree) {
		return A2(
			_concourse$atc$StepTree$map,
			function (step) {
				return _elm_lang$core$Native_Utils.update(
					step,
					{
						version: _elm_lang$core$Maybe$Just(version),
						metadata: metadata
					});
			},
			tree);
	});
var _concourse$atc$BetaBuildOutput$finishStep = F2(
	function (exitStatus, tree) {
		var stepState = _elm_lang$core$Native_Utils.eq(exitStatus, 0) ? _concourse$atc$StepTree$StepStateSucceeded : _concourse$atc$StepTree$StepStateFailed;
		return A2(_concourse$atc$BetaBuildOutput$setStepState, stepState, tree);
	});
var _concourse$atc$BetaBuildOutput$setStepError = F2(
	function (message, tree) {
		return A2(
			_concourse$atc$StepTree$map,
			function (step) {
				return _elm_lang$core$Native_Utils.update(
					step,
					{
						state: _concourse$atc$StepTree$StepStateErrored,
						error: _elm_lang$core$Maybe$Just(message)
					});
			},
			tree);
	});
var _concourse$atc$BetaBuildOutput$appendStepLog = F3(
	function (output, mtime, tree) {
		return A3(
			_elm_lang$core$Basics$flip,
			_concourse$atc$StepTree$map,
			tree,
			function (step) {
				var setLineTimestamp = F2(
					function (line, timestamps) {
						return A3(
							_elm_lang$core$Dict$update,
							line,
							function (mval) {
								var _p1 = mval;
								if (_p1.ctor === 'Nothing') {
									return mtime;
								} else {
									return _p1;
								}
							},
							timestamps);
					});
				var newLog = A2(_vito$elm_ansi$Ansi_Log$update, output, step.log);
				var newTimestamps = A3(
					_elm_lang$core$List$foldl,
					setLineTimestamp,
					step.timestamps,
					A2(
						_elm_lang$core$List$range,
						1,
						_elm_lang$core$Array$length(newLog.lines)));
				return _elm_lang$core$Native_Utils.update(
					step,
					{log: newLog, timestamps: newTimestamps});
			});
	});
var _concourse$atc$BetaBuildOutput$setRunning = _concourse$atc$BetaBuildOutput$setStepState(_concourse$atc$StepTree$StepStateRunning);
var _concourse$atc$BetaBuildOutput$updateStep = F3(
	function (id, update, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				steps: A2(
					_elm_lang$core$Maybe$map,
					A2(_concourse$atc$StepTree$updateAt, id, update),
					model.steps)
			});
	});
var _concourse$atc$BetaBuildOutput$Model = F7(
	function (a, b, c, d, e, f, g) {
		return {build: a, steps: b, errors: c, state: d, eventSourceOpened: e, events: f, highlight: g};
	});
var _concourse$atc$BetaBuildOutput$Flags = function (a) {
	return {hash: a};
};
var _concourse$atc$BetaBuildOutput$LoginRequired = {ctor: 'LoginRequired'};
var _concourse$atc$BetaBuildOutput$StepsComplete = {ctor: 'StepsComplete'};
var _concourse$atc$BetaBuildOutput$StepsLiveUpdating = {ctor: 'StepsLiveUpdating'};
var _concourse$atc$BetaBuildOutput$StepsLoading = {ctor: 'StepsLoading'};
var _concourse$atc$BetaBuildOutput$StepTreeMsg = function (a) {
	return {ctor: 'StepTreeMsg', _0: a};
};
var _concourse$atc$BetaBuildOutput$viewStepTree = F3(
	function (build, steps, state) {
		var _p2 = {ctor: '_Tuple2', _0: state, _1: steps};
		_v2_4:
		do {
			switch (_p2._0.ctor) {
				case 'StepsLoading':
					return _concourse$atc$LoadingIndicator$view;
				case 'LoginRequired':
					return _concourse$atc$BetaBuildOutput$viewLoginButton(build);
				case 'StepsLiveUpdating':
					if (_p2._1.ctor === 'Just') {
						return A2(
							_elm_lang$html$Html$map,
							_concourse$atc$BetaBuildOutput$StepTreeMsg,
							_concourse$atc$StepTree$view(_p2._1._0));
					} else {
						break _v2_4;
					}
				default:
					if (_p2._1.ctor === 'Just') {
						return A2(
							_elm_lang$html$Html$map,
							_concourse$atc$BetaBuildOutput$StepTreeMsg,
							_concourse$atc$StepTree$view(_p2._1._0));
					} else {
						break _v2_4;
					}
			}
		} while(false);
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '[]'});
	});
var _concourse$atc$BetaBuildOutput$view = function (_p3) {
	var _p4 = _p3;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('steps'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _concourse$atc$BetaBuildOutput$viewErrors(_p4.errors),
			_1: {
				ctor: '::',
				_0: A3(_concourse$atc$BetaBuildOutput$viewStepTree, _p4.build, _p4.steps, _p4.state),
				_1: {ctor: '[]'}
			}
		});
};
var _concourse$atc$BetaBuildOutput$BuildEventsMsg = function (a) {
	return {ctor: 'BuildEventsMsg', _0: a};
};
var _concourse$atc$BetaBuildOutput$subscribeToEvents = function (buildId) {
	return A2(
		_elm_lang$core$Platform_Sub$map,
		_concourse$atc$BetaBuildOutput$BuildEventsMsg,
		_concourse$atc$Concourse_BuildEvents$subscribe(buildId));
};
var _concourse$atc$BetaBuildOutput$PlanAndResourcesFetched = function (a) {
	return {ctor: 'PlanAndResourcesFetched', _0: a};
};
var _concourse$atc$BetaBuildOutput$fetchBuildPlanAndResources = function (buildId) {
	return A2(
		_elm_lang$core$Task$attempt,
		_concourse$atc$BetaBuildOutput$PlanAndResourcesFetched,
		A3(
			_elm_lang$core$Task$map2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			_concourse$atc$Concourse_BuildPlan$fetch(buildId),
			_concourse$atc$Concourse_BuildResources$fetch(buildId)));
};
var _concourse$atc$BetaBuildOutput$fetchBuildPlan = function (buildId) {
	return A2(
		_elm_lang$core$Task$attempt,
		_concourse$atc$BetaBuildOutput$PlanAndResourcesFetched,
		A2(
			_elm_lang$core$Task$map,
			A2(
				_elm_lang$core$Basics$flip,
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					}),
				_concourse$atc$Concourse_BuildResources$empty),
			_concourse$atc$Concourse_BuildPlan$fetch(buildId)));
};
var _concourse$atc$BetaBuildOutput$init = F2(
	function (flags, build) {
		var outputState = _concourse$atc$Concourse_BuildStatus$isRunning(build.status) ? _concourse$atc$BetaBuildOutput$StepsLiveUpdating : _concourse$atc$BetaBuildOutput$StepsLoading;
		var model = {
			build: build,
			steps: _elm_lang$core$Maybe$Nothing,
			errors: _elm_lang$core$Maybe$Nothing,
			state: outputState,
			events: _elm_lang$core$Platform_Sub$none,
			eventSourceOpened: false,
			highlight: _concourse$atc$StepTree$parseHighlight(flags.hash)
		};
		var fetch = (!_elm_lang$core$Native_Utils.eq(build.job, _elm_lang$core$Maybe$Nothing)) ? _concourse$atc$BetaBuildOutput$fetchBuildPlanAndResources(model.build.id) : _concourse$atc$BetaBuildOutput$fetchBuildPlan(model.build.id);
		return {ctor: '_Tuple2', _0: model, _1: fetch};
	});
var _concourse$atc$BetaBuildOutput$Noop = {ctor: 'Noop'};
var _concourse$atc$BetaBuildOutput$OutBuildStatus = F2(
	function (a, b) {
		return {ctor: 'OutBuildStatus', _0: a, _1: b};
	});
var _concourse$atc$BetaBuildOutput$OutNoop = {ctor: 'OutNoop'};
var _concourse$atc$BetaBuildOutput$handleEvent = F2(
	function (event, model) {
		var _p5 = event;
		switch (_p5.ctor) {
			case 'Log':
				return {
					ctor: '_Tuple3',
					_0: A3(
						_concourse$atc$BetaBuildOutput$updateStep,
						_p5._0.id,
						function (_p6) {
							return _concourse$atc$BetaBuildOutput$setRunning(
								A3(_concourse$atc$BetaBuildOutput$appendStepLog, _p5._1, _p5._2, _p6));
						},
						model),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _concourse$atc$BetaBuildOutput$OutNoop
				};
			case 'Error':
				return {
					ctor: '_Tuple3',
					_0: A3(
						_concourse$atc$BetaBuildOutput$updateStep,
						_p5._0.id,
						_concourse$atc$BetaBuildOutput$setStepError(_p5._1),
						model),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _concourse$atc$BetaBuildOutput$OutNoop
				};
			case 'Initialize':
				return {
					ctor: '_Tuple3',
					_0: A3(_concourse$atc$BetaBuildOutput$updateStep, _p5._0.id, _concourse$atc$BetaBuildOutput$setRunning, model),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _concourse$atc$BetaBuildOutput$OutNoop
				};
			case 'StartTask':
				return {
					ctor: '_Tuple3',
					_0: A3(_concourse$atc$BetaBuildOutput$updateStep, _p5._0.id, _concourse$atc$BetaBuildOutput$setRunning, model),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _concourse$atc$BetaBuildOutput$OutNoop
				};
			case 'FinishTask':
				return {
					ctor: '_Tuple3',
					_0: A3(
						_concourse$atc$BetaBuildOutput$updateStep,
						_p5._0.id,
						_concourse$atc$BetaBuildOutput$finishStep(_p5._1),
						model),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _concourse$atc$BetaBuildOutput$OutNoop
				};
			case 'FinishGet':
				return {
					ctor: '_Tuple3',
					_0: A3(
						_concourse$atc$BetaBuildOutput$updateStep,
						_p5._0.id,
						function (_p7) {
							return A2(
								_concourse$atc$BetaBuildOutput$finishStep,
								_p5._1,
								A3(_concourse$atc$BetaBuildOutput$setResourceInfo, _p5._2, _p5._3, _p7));
						},
						model),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _concourse$atc$BetaBuildOutput$OutNoop
				};
			case 'FinishPut':
				return {
					ctor: '_Tuple3',
					_0: A3(
						_concourse$atc$BetaBuildOutput$updateStep,
						_p5._0.id,
						function (_p8) {
							return A2(
								_concourse$atc$BetaBuildOutput$finishStep,
								_p5._1,
								A3(_concourse$atc$BetaBuildOutput$setResourceInfo, _p5._2, _p5._3, _p8));
						},
						model),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _concourse$atc$BetaBuildOutput$OutNoop
				};
			case 'BuildStatus':
				var _p13 = _p5._0;
				var _p12 = _p5._1;
				var _p9 = model.steps;
				if (_p9.ctor === 'Just') {
					var _p11 = _p9._0;
					var _p10 = (!_concourse$atc$Concourse_BuildStatus$isRunning(_p13)) ? A2(_concourse$atc$StepTree$update, _concourse$atc$StepTree$Finished, _p11) : {ctor: '_Tuple2', _0: _p11, _1: _elm_lang$core$Platform_Cmd$none};
					var newSt = _p10._0;
					var newMsg = _p10._1;
					return {
						ctor: '_Tuple3',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								steps: _elm_lang$core$Maybe$Just(newSt)
							}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _concourse$atc$BetaBuildOutput$StepTreeMsg, newMsg),
						_2: A2(_concourse$atc$BetaBuildOutput$OutBuildStatus, _p13, _p12)
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: model,
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: A2(_concourse$atc$BetaBuildOutput$OutBuildStatus, _p13, _p12)
					};
				}
			default:
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							errors: _elm_lang$core$Maybe$Just(
								A2(
									_vito$elm_ansi$Ansi_Log$update,
									_p5._0,
									A2(
										_elm_lang$core$Maybe$withDefault,
										_vito$elm_ansi$Ansi_Log$init(_vito$elm_ansi$Ansi_Log$Cooked),
										model.errors)))
						}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _concourse$atc$BetaBuildOutput$OutNoop
				};
		}
	});
var _concourse$atc$BetaBuildOutput$handleEventsMsg = F2(
	function (action, model) {
		var _p14 = action;
		switch (_p14.ctor) {
			case 'Opened':
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{eventSourceOpened: true}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _concourse$atc$BetaBuildOutput$OutNoop
				};
			case 'Errored':
				return model.eventSourceOpened ? {ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _concourse$atc$BetaBuildOutput$OutNoop} : {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{state: _concourse$atc$BetaBuildOutput$LoginRequired}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _concourse$atc$BetaBuildOutput$OutNoop
				};
			case 'Event':
				if (_p14._0.ctor === 'Ok') {
					return A2(_concourse$atc$BetaBuildOutput$handleEvent, _p14._0._0, model);
				} else {
					return A3(
						_elm_lang$core$Basics$flip,
						_elm_lang$core$Basics$always,
						A2(_elm_lang$core$Debug$log, 'failed to get event', _p14._0._0),
						{ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _concourse$atc$BetaBuildOutput$OutNoop});
				}
			default:
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{state: _concourse$atc$BetaBuildOutput$StepsComplete, events: _elm_lang$core$Platform_Sub$none}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _concourse$atc$BetaBuildOutput$OutNoop
				};
		}
	});
var _concourse$atc$BetaBuildOutput$update = F2(
	function (action, model) {
		var _p15 = action;
		switch (_p15.ctor) {
			case 'Noop':
				return {ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _concourse$atc$BetaBuildOutput$OutNoop};
			case 'PlanAndResourcesFetched':
				if (_p15._0.ctor === 'Err') {
					var _p17 = _p15._0._0;
					var _p16 = _p17;
					if (_p16.ctor === 'BadStatus') {
						return _elm_lang$core$Native_Utils.eq(_p16._0.status.code, 404) ? {
							ctor: '_Tuple3',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									events: _concourse$atc$BetaBuildOutput$subscribeToEvents(model.build.id)
								}),
							_1: _elm_lang$core$Platform_Cmd$none,
							_2: _concourse$atc$BetaBuildOutput$OutNoop
						} : {ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _concourse$atc$BetaBuildOutput$OutNoop};
					} else {
						return A3(
							_elm_lang$core$Basics$flip,
							_elm_lang$core$Basics$always,
							A2(_elm_lang$core$Debug$log, 'failed to fetch plan', _p17),
							{ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _concourse$atc$BetaBuildOutput$OutNoop});
					}
				} else {
					return {
						ctor: '_Tuple3',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								steps: _elm_lang$core$Maybe$Just(
									A3(_concourse$atc$StepTree$init, model.highlight, _p15._0._0._1, _p15._0._0._0)),
								events: _concourse$atc$BetaBuildOutput$subscribeToEvents(model.build.id)
							}),
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: _concourse$atc$BetaBuildOutput$OutNoop
					};
				}
			case 'BuildEventsMsg':
				return A2(_concourse$atc$BetaBuildOutput$handleEventsMsg, _p15._0, model);
			default:
				var _p18 = model.steps;
				if (_p18.ctor === 'Just') {
					var _p19 = A2(_concourse$atc$StepTree$update, _p15._0, _p18._0);
					var newModel = _p19._0;
					var newMsg = _p19._1;
					return {
						ctor: '_Tuple3',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								steps: _elm_lang$core$Maybe$Just(newModel)
							}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _concourse$atc$BetaBuildOutput$StepTreeMsg, newMsg),
						_2: _concourse$atc$BetaBuildOutput$OutNoop
					};
				} else {
					return {ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _concourse$atc$BetaBuildOutput$OutNoop};
				}
		}
	});

var _concourse$atc$Concourse_BuildPrep$fetch = function (buildId) {
	return function (_p0) {
		return _elm_lang$http$Http$toTask(
			A3(_elm_lang$core$Basics$flip, _elm_lang$http$Http$get, _concourse$atc$Concourse$decodeBuildPrep, _p0));
	}(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'/api/v1/builds/',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(buildId),
				'/preparation')));
};

var _lukewestby$elm_http_builder$HttpBuilder$replace = F2(
	function (old, $new) {
		return function (_p0) {
			return A2(
				_elm_lang$core$String$join,
				$new,
				A2(_elm_lang$core$String$split, old, _p0));
		};
	});
var _lukewestby$elm_http_builder$HttpBuilder$queryEscape = function (_p1) {
	return A3(
		_lukewestby$elm_http_builder$HttpBuilder$replace,
		'%20',
		'+',
		_elm_lang$http$Http$encodeUri(_p1));
};
var _lukewestby$elm_http_builder$HttpBuilder$queryPair = function (_p2) {
	var _p3 = _p2;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_lukewestby$elm_http_builder$HttpBuilder$queryEscape(_p3._0),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'=',
			_lukewestby$elm_http_builder$HttpBuilder$queryEscape(_p3._1)));
};
var _lukewestby$elm_http_builder$HttpBuilder$joinUrlEncoded = function (args) {
	return A2(
		_elm_lang$core$String$join,
		'&',
		A2(_elm_lang$core$List$map, _lukewestby$elm_http_builder$HttpBuilder$queryPair, args));
};
var _lukewestby$elm_http_builder$HttpBuilder$toRequest = function (builder) {
	var encodedParams = _lukewestby$elm_http_builder$HttpBuilder$joinUrlEncoded(builder.queryParams);
	var fullUrl = _elm_lang$core$String$isEmpty(encodedParams) ? builder.url : A2(
		_elm_lang$core$Basics_ops['++'],
		builder.url,
		A2(_elm_lang$core$Basics_ops['++'], '?', encodedParams));
	return _elm_lang$http$Http$request(
		{method: builder.method, url: fullUrl, headers: builder.headers, body: builder.body, expect: builder.expect, timeout: builder.timeout, withCredentials: builder.withCredentials});
};
var _lukewestby$elm_http_builder$HttpBuilder$toTaskPlain = function (builder) {
	return _elm_lang$http$Http$toTask(
		_lukewestby$elm_http_builder$HttpBuilder$toRequest(builder));
};
var _lukewestby$elm_http_builder$HttpBuilder$withCacheBuster = F2(
	function (paramName, builder) {
		return _elm_lang$core$Native_Utils.update(
			builder,
			{
				cacheBuster: _elm_lang$core$Maybe$Just(paramName)
			});
	});
var _lukewestby$elm_http_builder$HttpBuilder$withQueryParams = F2(
	function (queryParams, builder) {
		return _elm_lang$core$Native_Utils.update(
			builder,
			{
				queryParams: A2(_elm_lang$core$Basics_ops['++'], builder.queryParams, queryParams)
			});
	});
var _lukewestby$elm_http_builder$HttpBuilder$toTaskWithCacheBuster = F2(
	function (paramName, builder) {
		var request = function (timestamp) {
			return _lukewestby$elm_http_builder$HttpBuilder$toTaskPlain(
				A2(
					_lukewestby$elm_http_builder$HttpBuilder$withQueryParams,
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: paramName,
							_1: _elm_lang$core$Basics$toString(timestamp)
						},
						_1: {ctor: '[]'}
					},
					builder));
		};
		return A2(_elm_lang$core$Task$andThen, request, _elm_lang$core$Time$now);
	});
var _lukewestby$elm_http_builder$HttpBuilder$toTask = function (builder) {
	var _p4 = builder.cacheBuster;
	if (_p4.ctor === 'Just') {
		return A2(_lukewestby$elm_http_builder$HttpBuilder$toTaskWithCacheBuster, _p4._0, builder);
	} else {
		return _lukewestby$elm_http_builder$HttpBuilder$toTaskPlain(builder);
	}
};
var _lukewestby$elm_http_builder$HttpBuilder$send = F2(
	function (tagger, builder) {
		return A2(
			_elm_lang$core$Task$attempt,
			tagger,
			_lukewestby$elm_http_builder$HttpBuilder$toTask(builder));
	});
var _lukewestby$elm_http_builder$HttpBuilder$withExpect = F2(
	function (expect, builder) {
		return _elm_lang$core$Native_Utils.update(
			builder,
			{expect: expect});
	});
var _lukewestby$elm_http_builder$HttpBuilder$withCredentials = function (builder) {
	return _elm_lang$core$Native_Utils.update(
		builder,
		{withCredentials: true});
};
var _lukewestby$elm_http_builder$HttpBuilder$withTimeout = F2(
	function (timeout, builder) {
		return _elm_lang$core$Native_Utils.update(
			builder,
			{
				timeout: _elm_lang$core$Maybe$Just(timeout)
			});
	});
var _lukewestby$elm_http_builder$HttpBuilder$withBody = F2(
	function (body, builder) {
		return _elm_lang$core$Native_Utils.update(
			builder,
			{body: body});
	});
var _lukewestby$elm_http_builder$HttpBuilder$withStringBody = F2(
	function (contentType, value) {
		return _lukewestby$elm_http_builder$HttpBuilder$withBody(
			A2(_elm_lang$http$Http$stringBody, contentType, value));
	});
var _lukewestby$elm_http_builder$HttpBuilder$withUrlEncodedBody = function (_p5) {
	return A2(
		_lukewestby$elm_http_builder$HttpBuilder$withStringBody,
		'application/x-www-form-urlencoded',
		_lukewestby$elm_http_builder$HttpBuilder$joinUrlEncoded(_p5));
};
var _lukewestby$elm_http_builder$HttpBuilder$withJsonBody = function (value) {
	return _lukewestby$elm_http_builder$HttpBuilder$withBody(
		_elm_lang$http$Http$jsonBody(value));
};
var _lukewestby$elm_http_builder$HttpBuilder$withMultipartStringBody = function (partPairs) {
	return _lukewestby$elm_http_builder$HttpBuilder$withBody(
		_elm_lang$http$Http$multipartBody(
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Basics$uncurry(_elm_lang$http$Http$stringPart),
				partPairs)));
};
var _lukewestby$elm_http_builder$HttpBuilder$withHeaders = F2(
	function (headerPairs, builder) {
		return _elm_lang$core$Native_Utils.update(
			builder,
			{
				headers: A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$List$map,
						_elm_lang$core$Basics$uncurry(_elm_lang$http$Http$header),
						headerPairs),
					builder.headers)
			});
	});
var _lukewestby$elm_http_builder$HttpBuilder$withHeader = F3(
	function (key, value, builder) {
		return _elm_lang$core$Native_Utils.update(
			builder,
			{
				headers: {
					ctor: '::',
					_0: A2(_elm_lang$http$Http$header, key, value),
					_1: builder.headers
				}
			});
	});
var _lukewestby$elm_http_builder$HttpBuilder$requestWithMethodAndUrl = F2(
	function (method, url) {
		return {
			method: method,
			url: url,
			headers: {ctor: '[]'},
			body: _elm_lang$http$Http$emptyBody,
			expect: _elm_lang$http$Http$expectStringResponse(
				function (_p6) {
					return _elm_lang$core$Result$Ok(
						{ctor: '_Tuple0'});
				}),
			timeout: _elm_lang$core$Maybe$Nothing,
			withCredentials: false,
			queryParams: {ctor: '[]'},
			cacheBuster: _elm_lang$core$Maybe$Nothing
		};
	});
var _lukewestby$elm_http_builder$HttpBuilder$get = _lukewestby$elm_http_builder$HttpBuilder$requestWithMethodAndUrl('GET');
var _lukewestby$elm_http_builder$HttpBuilder$post = _lukewestby$elm_http_builder$HttpBuilder$requestWithMethodAndUrl('POST');
var _lukewestby$elm_http_builder$HttpBuilder$put = _lukewestby$elm_http_builder$HttpBuilder$requestWithMethodAndUrl('PUT');
var _lukewestby$elm_http_builder$HttpBuilder$patch = _lukewestby$elm_http_builder$HttpBuilder$requestWithMethodAndUrl('PATCH');
var _lukewestby$elm_http_builder$HttpBuilder$delete = _lukewestby$elm_http_builder$HttpBuilder$requestWithMethodAndUrl('DELETE');
var _lukewestby$elm_http_builder$HttpBuilder$options = _lukewestby$elm_http_builder$HttpBuilder$requestWithMethodAndUrl('OPTIONS');
var _lukewestby$elm_http_builder$HttpBuilder$trace = _lukewestby$elm_http_builder$HttpBuilder$requestWithMethodAndUrl('TRACE');
var _lukewestby$elm_http_builder$HttpBuilder$head = _lukewestby$elm_http_builder$HttpBuilder$requestWithMethodAndUrl('HEAD');
var _lukewestby$elm_http_builder$HttpBuilder$RequestBuilder = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {method: a, headers: b, url: c, body: d, expect: e, timeout: f, withCredentials: g, queryParams: h, cacheBuster: i};
	});

var _concourse$atc$Concourse_Job$pauseUnpause = F3(
	function (pause, _p0, csrfToken) {
		var _p1 = _p0;
		var action = pause ? 'pause' : 'unpause';
		return _elm_lang$http$Http$toTask(
			_elm_lang$http$Http$request(
				{
					method: 'PUT',
					url: A2(
						_elm_lang$core$Basics_ops['++'],
						'/api/v1/teams/',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p1.teamName,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'/pipelines/',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p1.pipelineName,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'/jobs/',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_p1.jobName,
											A2(_elm_lang$core$Basics_ops['++'], '/', action))))))),
					headers: {
						ctor: '::',
						_0: A2(_elm_lang$http$Http$header, _concourse$atc$Concourse$csrfTokenHeaderName, csrfToken),
						_1: {ctor: '[]'}
					},
					body: _elm_lang$http$Http$emptyBody,
					expect: _elm_lang$http$Http$expectStringResponse(
						function (_p2) {
							return _elm_lang$core$Result$Ok(
								{ctor: '_Tuple0'});
						}),
					timeout: _elm_lang$core$Maybe$Nothing,
					withCredentials: false
				}));
	});
var _concourse$atc$Concourse_Job$unpause = _concourse$atc$Concourse_Job$pauseUnpause(false);
var _concourse$atc$Concourse_Job$pause = _concourse$atc$Concourse_Job$pauseUnpause(true);
var _concourse$atc$Concourse_Job$triggerBuild = F2(
	function (job, csrfToken) {
		return _lukewestby$elm_http_builder$HttpBuilder$toTask(
			A2(
				_lukewestby$elm_http_builder$HttpBuilder$withExpect,
				_elm_lang$http$Http$expectJson(_concourse$atc$Concourse$decodeBuild),
				A3(
					_lukewestby$elm_http_builder$HttpBuilder$withHeader,
					_concourse$atc$Concourse$csrfTokenHeaderName,
					csrfToken,
					_lukewestby$elm_http_builder$HttpBuilder$post(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'/api/v1/teams/',
							A2(
								_elm_lang$core$Basics_ops['++'],
								job.teamName,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'/pipelines/',
									A2(
										_elm_lang$core$Basics_ops['++'],
										job.pipelineName,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'/jobs/',
											A2(_elm_lang$core$Basics_ops['++'], job.jobName, '/builds'))))))))));
	});
var _concourse$atc$Concourse_Job$fetchJobsRaw = function (pi) {
	return _elm_lang$http$Http$toTask(
		A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$http$Http$get,
			_elm_lang$core$Json_Decode$value,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'/api/v1/teams/',
				A2(
					_elm_lang$core$Basics_ops['++'],
					pi.teamName,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'/pipelines/',
						A2(_elm_lang$core$Basics_ops['++'], pi.pipelineName, '/jobs'))))));
};
var _concourse$atc$Concourse_Job$fetchJobsWithTransitionBuilds = function (pi) {
	return _elm_lang$http$Http$toTask(
		A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$http$Http$get,
			_elm_lang$core$Json_Decode$list(
				_concourse$atc$Concourse$decodeJob(pi)),
			A2(
				_elm_lang$core$Basics_ops['++'],
				'/api/v1/teams/',
				A2(
					_elm_lang$core$Basics_ops['++'],
					pi.teamName,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'/pipelines/',
						A2(
							_elm_lang$core$Basics_ops['++'],
							pi.pipelineName,
							A2(_elm_lang$core$Basics_ops['++'], '/jobs', '?include=transitionBuilds')))))));
};
var _concourse$atc$Concourse_Job$fetchJobs = function (pi) {
	return _elm_lang$http$Http$toTask(
		A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$http$Http$get,
			_elm_lang$core$Json_Decode$list(
				_concourse$atc$Concourse$decodeJob(pi)),
			A2(
				_elm_lang$core$Basics_ops['++'],
				'/api/v1/teams/',
				A2(
					_elm_lang$core$Basics_ops['++'],
					pi.teamName,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'/pipelines/',
						A2(_elm_lang$core$Basics_ops['++'], pi.pipelineName, '/jobs'))))));
};
var _concourse$atc$Concourse_Job$fetchJob = function (job) {
	return _elm_lang$http$Http$toTask(
		A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$http$Http$get,
			_concourse$atc$Concourse$decodeJob(
				{teamName: job.teamName, pipelineName: job.pipelineName}),
			A2(
				_elm_lang$core$Basics_ops['++'],
				'/api/v1/teams/',
				A2(
					_elm_lang$core$Basics_ops['++'],
					job.teamName,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'/pipelines/',
						A2(
							_elm_lang$core$Basics_ops['++'],
							job.pipelineName,
							A2(_elm_lang$core$Basics_ops['++'], '/jobs/', job.jobName)))))));
};

var _concourse$atc$Native_Favicon = function() {
  function set(url) {
    return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
      var oldIcon = document.getElementById("favicon");
      var newIcon = document.createElement("link");
      newIcon.id = "favicon";
      newIcon.rel = "shortcut icon";
      newIcon.href = url;
      if (oldIcon) {
        document.head.removeChild(oldIcon);
      }

      document.head.appendChild(newIcon);

      callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
    });
  }

  return {
    set: set
  };
}();

var _concourse$atc$Favicon$set = _concourse$atc$Native_Favicon.set;

var _elm_lang$keyboard$Keyboard$onSelfMsg = F3(
	function (router, _p0, state) {
		var _p1 = _p0;
		var _p2 = A2(_elm_lang$core$Dict$get, _p1.category, state);
		if (_p2.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var send = function (tagger) {
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					tagger(_p1.keyCode));
			};
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p3) {
					return _elm_lang$core$Task$succeed(state);
				},
				_elm_lang$core$Task$sequence(
					A2(_elm_lang$core$List$map, send, _p2._0.taggers)));
		}
	});
var _elm_lang$keyboard$Keyboard_ops = _elm_lang$keyboard$Keyboard_ops || {};
_elm_lang$keyboard$Keyboard_ops['&>'] = F2(
	function (task1, task2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p4) {
				return task2;
			},
			task1);
	});
var _elm_lang$keyboard$Keyboard$init = _elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty);
var _elm_lang$keyboard$Keyboard$categorizeHelpHelp = F2(
	function (value, maybeValues) {
		var _p5 = maybeValues;
		if (_p5.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Just(
				{
					ctor: '::',
					_0: value,
					_1: {ctor: '[]'}
				});
		} else {
			return _elm_lang$core$Maybe$Just(
				{ctor: '::', _0: value, _1: _p5._0});
		}
	});
var _elm_lang$keyboard$Keyboard$categorizeHelp = F2(
	function (subs, subDict) {
		categorizeHelp:
		while (true) {
			var _p6 = subs;
			if (_p6.ctor === '[]') {
				return subDict;
			} else {
				var _v4 = _p6._1,
					_v5 = A3(
					_elm_lang$core$Dict$update,
					_p6._0._0,
					_elm_lang$keyboard$Keyboard$categorizeHelpHelp(_p6._0._1),
					subDict);
				subs = _v4;
				subDict = _v5;
				continue categorizeHelp;
			}
		}
	});
var _elm_lang$keyboard$Keyboard$categorize = function (subs) {
	return A2(_elm_lang$keyboard$Keyboard$categorizeHelp, subs, _elm_lang$core$Dict$empty);
};
var _elm_lang$keyboard$Keyboard$keyCode = A2(_elm_lang$core$Json_Decode$field, 'keyCode', _elm_lang$core$Json_Decode$int);
var _elm_lang$keyboard$Keyboard$subscription = _elm_lang$core$Native_Platform.leaf('Keyboard');
var _elm_lang$keyboard$Keyboard$Watcher = F2(
	function (a, b) {
		return {taggers: a, pid: b};
	});
var _elm_lang$keyboard$Keyboard$Msg = F2(
	function (a, b) {
		return {category: a, keyCode: b};
	});
var _elm_lang$keyboard$Keyboard$onEffects = F3(
	function (router, newSubs, oldState) {
		var rightStep = F3(
			function (category, taggers, task) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (state) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (pid) {
								return _elm_lang$core$Task$succeed(
									A3(
										_elm_lang$core$Dict$insert,
										category,
										A2(_elm_lang$keyboard$Keyboard$Watcher, taggers, pid),
										state));
							},
							_elm_lang$core$Process$spawn(
								A3(
									_elm_lang$dom$Dom_LowLevel$onDocument,
									category,
									_elm_lang$keyboard$Keyboard$keyCode,
									function (_p7) {
										return A2(
											_elm_lang$core$Platform$sendToSelf,
											router,
											A2(_elm_lang$keyboard$Keyboard$Msg, category, _p7));
									})));
					},
					task);
			});
		var bothStep = F4(
			function (category, _p8, taggers, task) {
				var _p9 = _p8;
				return A2(
					_elm_lang$core$Task$map,
					A2(
						_elm_lang$core$Dict$insert,
						category,
						A2(_elm_lang$keyboard$Keyboard$Watcher, taggers, _p9.pid)),
					task);
			});
		var leftStep = F3(
			function (category, _p10, task) {
				var _p11 = _p10;
				return A2(
					_elm_lang$keyboard$Keyboard_ops['&>'],
					_elm_lang$core$Process$kill(_p11.pid),
					task);
			});
		return A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			oldState,
			_elm_lang$keyboard$Keyboard$categorize(newSubs),
			_elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty));
	});
var _elm_lang$keyboard$Keyboard$MySub = F2(
	function (a, b) {
		return {ctor: 'MySub', _0: a, _1: b};
	});
var _elm_lang$keyboard$Keyboard$presses = function (tagger) {
	return _elm_lang$keyboard$Keyboard$subscription(
		A2(_elm_lang$keyboard$Keyboard$MySub, 'keypress', tagger));
};
var _elm_lang$keyboard$Keyboard$downs = function (tagger) {
	return _elm_lang$keyboard$Keyboard$subscription(
		A2(_elm_lang$keyboard$Keyboard$MySub, 'keydown', tagger));
};
var _elm_lang$keyboard$Keyboard$ups = function (tagger) {
	return _elm_lang$keyboard$Keyboard$subscription(
		A2(_elm_lang$keyboard$Keyboard$MySub, 'keyup', tagger));
};
var _elm_lang$keyboard$Keyboard$subMap = F2(
	function (func, _p12) {
		var _p13 = _p12;
		return A2(
			_elm_lang$keyboard$Keyboard$MySub,
			_p13._0,
			function (_p14) {
				return func(
					_p13._1(_p14));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Keyboard'] = {pkg: 'elm-lang/keyboard', init: _elm_lang$keyboard$Keyboard$init, onEffects: _elm_lang$keyboard$Keyboard$onEffects, onSelfMsg: _elm_lang$keyboard$Keyboard$onSelfMsg, tag: 'sub', subMap: _elm_lang$keyboard$Keyboard$subMap};

var _concourse$atc$LoginRedirect$requestLoginRedirect = _elm_lang$core$Native_Platform.outgoingPort(
	'requestLoginRedirect',
	function (v) {
		return v;
	});

var _krisajenkins$remotedata$RemoteData$isNotAsked = function (data) {
	var _p0 = data;
	if (_p0.ctor === 'NotAsked') {
		return true;
	} else {
		return false;
	}
};
var _krisajenkins$remotedata$RemoteData$isLoading = function (data) {
	var _p1 = data;
	if (_p1.ctor === 'Loading') {
		return true;
	} else {
		return false;
	}
};
var _krisajenkins$remotedata$RemoteData$isFailure = function (data) {
	var _p2 = data;
	if (_p2.ctor === 'Failure') {
		return true;
	} else {
		return false;
	}
};
var _krisajenkins$remotedata$RemoteData$isSuccess = function (data) {
	var _p3 = data;
	if (_p3.ctor === 'Success') {
		return true;
	} else {
		return false;
	}
};
var _krisajenkins$remotedata$RemoteData$withDefault = F2(
	function ($default, data) {
		var _p4 = data;
		if (_p4.ctor === 'Success') {
			return _p4._0;
		} else {
			return $default;
		}
	});
var _krisajenkins$remotedata$RemoteData$Success = function (a) {
	return {ctor: 'Success', _0: a};
};
var _krisajenkins$remotedata$RemoteData$succeed = _krisajenkins$remotedata$RemoteData$Success;
var _krisajenkins$remotedata$RemoteData$prism = {
	reverseGet: _krisajenkins$remotedata$RemoteData$Success,
	getOption: function (data) {
		var _p5 = data;
		if (_p5.ctor === 'Success') {
			return _elm_lang$core$Maybe$Just(_p5._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	}
};
var _krisajenkins$remotedata$RemoteData$Failure = function (a) {
	return {ctor: 'Failure', _0: a};
};
var _krisajenkins$remotedata$RemoteData$fromResult = function (result) {
	var _p6 = result;
	if (_p6.ctor === 'Err') {
		return _krisajenkins$remotedata$RemoteData$Failure(_p6._0);
	} else {
		return _krisajenkins$remotedata$RemoteData$Success(_p6._0);
	}
};
var _krisajenkins$remotedata$RemoteData$asCmd = _elm_lang$core$Task$attempt(_krisajenkins$remotedata$RemoteData$fromResult);
var _krisajenkins$remotedata$RemoteData$sendRequest = _elm_lang$http$Http$send(_krisajenkins$remotedata$RemoteData$fromResult);
var _krisajenkins$remotedata$RemoteData$fromTask = function (_p7) {
	return A2(
		_elm_lang$core$Task$onError,
		function (_p8) {
			return _elm_lang$core$Task$succeed(
				_krisajenkins$remotedata$RemoteData$Failure(_p8));
		},
		A2(_elm_lang$core$Task$map, _krisajenkins$remotedata$RemoteData$Success, _p7));
};
var _krisajenkins$remotedata$RemoteData$Loading = {ctor: 'Loading'};
var _krisajenkins$remotedata$RemoteData$NotAsked = {ctor: 'NotAsked'};
var _krisajenkins$remotedata$RemoteData$map = F2(
	function (f, data) {
		var _p9 = data;
		switch (_p9.ctor) {
			case 'Success':
				return _krisajenkins$remotedata$RemoteData$Success(
					f(_p9._0));
			case 'Loading':
				return _krisajenkins$remotedata$RemoteData$Loading;
			case 'NotAsked':
				return _krisajenkins$remotedata$RemoteData$NotAsked;
			default:
				return _krisajenkins$remotedata$RemoteData$Failure(_p9._0);
		}
	});
var _krisajenkins$remotedata$RemoteData$toMaybe = function (_p10) {
	return A2(
		_krisajenkins$remotedata$RemoteData$withDefault,
		_elm_lang$core$Maybe$Nothing,
		A2(_krisajenkins$remotedata$RemoteData$map, _elm_lang$core$Maybe$Just, _p10));
};
var _krisajenkins$remotedata$RemoteData$mapError = F2(
	function (f, data) {
		var _p11 = data;
		switch (_p11.ctor) {
			case 'Success':
				return _krisajenkins$remotedata$RemoteData$Success(_p11._0);
			case 'Failure':
				return _krisajenkins$remotedata$RemoteData$Failure(
					f(_p11._0));
			case 'Loading':
				return _krisajenkins$remotedata$RemoteData$Loading;
			default:
				return _krisajenkins$remotedata$RemoteData$NotAsked;
		}
	});
var _krisajenkins$remotedata$RemoteData$mapBoth = F2(
	function (successFn, errorFn) {
		return function (_p12) {
			return A2(
				_krisajenkins$remotedata$RemoteData$mapError,
				errorFn,
				A2(_krisajenkins$remotedata$RemoteData$map, successFn, _p12));
		};
	});
var _krisajenkins$remotedata$RemoteData$andThen = F2(
	function (f, data) {
		var _p13 = data;
		switch (_p13.ctor) {
			case 'Success':
				return f(_p13._0);
			case 'Failure':
				return _krisajenkins$remotedata$RemoteData$Failure(_p13._0);
			case 'NotAsked':
				return _krisajenkins$remotedata$RemoteData$NotAsked;
			default:
				return _krisajenkins$remotedata$RemoteData$Loading;
		}
	});
var _krisajenkins$remotedata$RemoteData$andMap = F2(
	function (wrappedValue, wrappedFunction) {
		var _p14 = {ctor: '_Tuple2', _0: wrappedFunction, _1: wrappedValue};
		_v10_5:
		do {
			_v10_4:
			do {
				_v10_3:
				do {
					_v10_2:
					do {
						switch (_p14._0.ctor) {
							case 'Success':
								switch (_p14._1.ctor) {
									case 'Success':
										return _krisajenkins$remotedata$RemoteData$Success(
											_p14._0._0(_p14._1._0));
									case 'Failure':
										break _v10_2;
									case 'Loading':
										break _v10_4;
									default:
										return _krisajenkins$remotedata$RemoteData$NotAsked;
								}
							case 'Failure':
								return _krisajenkins$remotedata$RemoteData$Failure(_p14._0._0);
							case 'Loading':
								switch (_p14._1.ctor) {
									case 'Failure':
										break _v10_2;
									case 'Loading':
										break _v10_3;
									case 'NotAsked':
										break _v10_3;
									default:
										break _v10_3;
								}
							default:
								switch (_p14._1.ctor) {
									case 'Failure':
										break _v10_2;
									case 'Loading':
										break _v10_4;
									case 'NotAsked':
										break _v10_5;
									default:
										break _v10_5;
								}
						}
					} while(false);
					return _krisajenkins$remotedata$RemoteData$Failure(_p14._1._0);
				} while(false);
				return _krisajenkins$remotedata$RemoteData$Loading;
			} while(false);
			return _krisajenkins$remotedata$RemoteData$Loading;
		} while(false);
		return _krisajenkins$remotedata$RemoteData$NotAsked;
	});
var _krisajenkins$remotedata$RemoteData$map2 = F3(
	function (f, a, b) {
		return A2(
			_krisajenkins$remotedata$RemoteData$andMap,
			b,
			A2(_krisajenkins$remotedata$RemoteData$map, f, a));
	});
var _krisajenkins$remotedata$RemoteData$map3 = F4(
	function (f, a, b, c) {
		return A2(
			_krisajenkins$remotedata$RemoteData$andMap,
			c,
			A2(
				_krisajenkins$remotedata$RemoteData$andMap,
				b,
				A2(_krisajenkins$remotedata$RemoteData$map, f, a)));
	});
var _krisajenkins$remotedata$RemoteData$append = F2(
	function (a, b) {
		return A2(
			_krisajenkins$remotedata$RemoteData$andMap,
			b,
			A2(
				_krisajenkins$remotedata$RemoteData$map,
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					}),
				a));
	});
var _krisajenkins$remotedata$RemoteData$update = F2(
	function (f, remoteData) {
		var _p15 = remoteData;
		switch (_p15.ctor) {
			case 'Success':
				var _p16 = f(_p15._0);
				var first = _p16._0;
				var second = _p16._1;
				return {
					ctor: '_Tuple2',
					_0: _krisajenkins$remotedata$RemoteData$Success(first),
					_1: second
				};
			case 'NotAsked':
				return {ctor: '_Tuple2', _0: _krisajenkins$remotedata$RemoteData$NotAsked, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Loading':
				return {ctor: '_Tuple2', _0: _krisajenkins$remotedata$RemoteData$Loading, _1: _elm_lang$core$Platform_Cmd$none};
			default:
				return {
					ctor: '_Tuple2',
					_0: _krisajenkins$remotedata$RemoteData$Failure(_p15._0),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});

var _concourse$atc$BetaBuild$updateHistory = function (newBuild) {
	return _elm_lang$core$List$map(
		function (build) {
			return _elm_lang$core$Native_Utils.eq(build.id, newBuild.id) ? newBuild : build;
		});
};
var _concourse$atc$BetaBuild$getScrollBehavior = function (model) {
	var _p0 = {
		ctor: '_Tuple2',
		_0: model.autoScroll,
		_1: _krisajenkins$remotedata$RemoteData$toMaybe(model.currentBuild)
	};
	if (_p0._0 === false) {
		return _concourse$atc$Autoscroll$NoScroll;
	} else {
		if (_p0._1.ctor === 'Nothing') {
			return _concourse$atc$Autoscroll$NoScroll;
		} else {
			var _p1 = _p0._1._0.build.status;
			switch (_p1.ctor) {
				case 'BuildStatusSucceeded':
					return _concourse$atc$Autoscroll$NoScroll;
				case 'BuildStatusPending':
					return _concourse$atc$Autoscroll$NoScroll;
				default:
					return _concourse$atc$Autoscroll$ScrollWindow;
			}
		}
	}
};
var _concourse$atc$BetaBuild$durationTitle = F2(
	function (date, content) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$title(
					A2(_mgold$elm_date_format$Date_Format$format, '%b', date)),
				_1: {ctor: '[]'}
			},
			content);
	});
var _concourse$atc$BetaBuild$viewBuildPrepStatus = function (status) {
	var _p2 = status;
	switch (_p2.ctor) {
		case 'BuildPrepStatusUnknown':
			return A2(
				_elm_lang$html$Html$i,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('fa fa-fw fa-circle-o-notch'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$title('thinking...'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'});
		case 'BuildPrepStatusBlocking':
			return A2(
				_elm_lang$html$Html$i,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('fa fa-fw fa-spin fa-circle-o-notch inactive'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$title('blocking'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'});
		default:
			return A2(
				_elm_lang$html$Html$i,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('fa fa-fw fa-check'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$title('not blocking'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'});
	}
};
var _concourse$atc$BetaBuild$viewDetailItem = function (_p3) {
	var _p4 = _p3;
	return A2(
		_elm_lang$html$Html$li,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(
					_elm_lang$core$Basics_ops['++'],
					_p4._0,
					A2(_elm_lang$core$Basics_ops['++'], ' - ', _p4._1))),
			_1: {ctor: '[]'}
		});
};
var _concourse$atc$BetaBuild$viewBuildPrepDetails = function (details) {
	return A2(
		_elm_lang$html$Html$ul,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('details'),
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$List$map,
			_concourse$atc$BetaBuild$viewDetailItem,
			_elm_lang$core$Dict$toList(details)));
};
var _concourse$atc$BetaBuild$viewBuildPrepLi = F3(
	function (text, status, details) {
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'prep-status', _1: true},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'inactive',
								_1: _elm_lang$core$Native_Utils.eq(status, _concourse$atc$Concourse$BuildPrepStatusUnknown)
							},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('marker'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _concourse$atc$BetaBuild$viewBuildPrepStatus(status),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(text),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _concourse$atc$BetaBuild$viewBuildPrepDetails(details),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _concourse$atc$BetaBuild$viewBuildPrepInput = function (_p5) {
	var _p6 = _p5;
	return A3(
		_concourse$atc$BetaBuild$viewBuildPrepLi,
		A2(_elm_lang$core$Basics_ops['++'], 'discovering any new versions of ', _p6._0),
		_p6._1,
		_elm_lang$core$Dict$empty);
};
var _concourse$atc$BetaBuild$viewBuildPrepInputs = function (inputs) {
	return A2(
		_elm_lang$core$List$map,
		_concourse$atc$BetaBuild$viewBuildPrepInput,
		_elm_lang$core$Dict$toList(inputs));
};
var _concourse$atc$BetaBuild$viewBuildPrep = function (prep) {
	var _p7 = prep;
	if (_p7.ctor === 'Just') {
		var _p8 = _p7._0;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('build-step'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('header'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$i,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('left fa fa-fw fa-cogs'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$h3,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('preparing build'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$ul,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('prep-status-list'),
									_1: {ctor: '[]'}
								},
								A2(
									_elm_lang$core$Basics_ops['++'],
									{
										ctor: '::',
										_0: A3(_concourse$atc$BetaBuild$viewBuildPrepLi, 'checking pipeline is not paused', _p8.pausedPipeline, _elm_lang$core$Dict$empty),
										_1: {
											ctor: '::',
											_0: A3(_concourse$atc$BetaBuild$viewBuildPrepLi, 'checking job is not paused', _p8.pausedJob, _elm_lang$core$Dict$empty),
											_1: {ctor: '[]'}
										}
									},
									A2(
										_elm_lang$core$Basics_ops['++'],
										_concourse$atc$BetaBuild$viewBuildPrepInputs(_p8.inputs),
										{
											ctor: '::',
											_0: A3(_concourse$atc$BetaBuild$viewBuildPrepLi, 'waiting for a suitable set of input versions', _p8.inputsSatisfied, _p8.missingInputReasons),
											_1: {
												ctor: '::',
												_0: A3(_concourse$atc$BetaBuild$viewBuildPrepLi, 'checking max-in-flight is not reached', _p8.maxRunningBuilds, _elm_lang$core$Dict$empty),
												_1: {ctor: '[]'}
											}
										}))),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	} else {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '[]'});
	}
};
var _concourse$atc$BetaBuild$mmDDYY = function (d) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		A2(_mgold$elm_date_format$Date_Format$format, '%m/%d/', d),
		A2(
			_elm_lang$core$String$right,
			2,
			A2(_mgold$elm_date_format$Date_Format$format, '%Y', d)));
};
var _concourse$atc$BetaBuild$handleBuildPrepFetched = F3(
	function (browsingIndex, buildPrep, model) {
		return _elm_lang$core$Native_Utils.eq(browsingIndex, model.browsingIndex) ? {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{
					currentBuild: A2(
						_krisajenkins$remotedata$RemoteData$map,
						function (info) {
							return _elm_lang$core$Native_Utils.update(
								info,
								{
									prep: _elm_lang$core$Maybe$Just(buildPrep)
								});
						},
						model.currentBuild)
				}),
			_1: _elm_lang$core$Platform_Cmd$none
		} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
	});
var _concourse$atc$BetaBuild$prevBuild = F2(
	function (builds, build) {
		prevBuild:
		while (true) {
			var _p9 = builds;
			if ((_p9.ctor === '::') && (_p9._1.ctor === '::')) {
				var _p10 = _p9._1._0;
				if (_elm_lang$core$Native_Utils.eq(_p9._0, build)) {
					return _elm_lang$core$Maybe$Just(_p10);
				} else {
					var _v7 = {ctor: '::', _0: _p10, _1: _p9._1._1},
						_v8 = build;
					builds = _v7;
					build = _v8;
					continue prevBuild;
				}
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	});
var _concourse$atc$BetaBuild$nextBuild = F2(
	function (builds, build) {
		nextBuild:
		while (true) {
			var _p11 = builds;
			if ((_p11.ctor === '::') && (_p11._1.ctor === '::')) {
				var _p12 = _p11._1._0;
				if (_elm_lang$core$Native_Utils.eq(_p12, build)) {
					return _elm_lang$core$Maybe$Just(_p11._0);
				} else {
					var _v10 = {ctor: '::', _0: _p12, _1: _p11._1._1},
						_v11 = build;
					builds = _v10;
					build = _v11;
					continue nextBuild;
				}
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	});
var _concourse$atc$BetaBuild$extractTitle = function (model) {
	var _p13 = {
		ctor: '_Tuple2',
		_0: _krisajenkins$remotedata$RemoteData$toMaybe(model.currentBuild),
		_1: model.job
	};
	if ((_p13.ctor === '_Tuple2') && (_p13._0.ctor === 'Just')) {
		if (_p13._1.ctor === 'Just') {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p13._1._0.name,
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_elm_lang$core$Basics_ops['++'], ' #', _p13._0._0.build.name),
					' - '));
		} else {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'#',
				A2(_elm_lang$core$Basics_ops['++'], _p13._0._0.build.name, ' - '));
		}
	} else {
		return '';
	}
};
var _concourse$atc$BetaBuild$handleBuildJobFetched = F2(
	function (job, model) {
		var withJobDetails = _elm_lang$core$Native_Utils.update(
			model,
			{
				job: _elm_lang$core$Maybe$Just(job)
			});
		return {
			ctor: '_Tuple2',
			_0: withJobDetails,
			_1: model.ports.title(
				_concourse$atc$BetaBuild$extractTitle(withJobDetails))
		};
	});
var _concourse$atc$BetaBuild$Ports = function (a) {
	return {title: a};
};
var _concourse$atc$BetaBuild$CurrentBuild = F3(
	function (a, b, c) {
		return {build: a, prep: b, output: c};
	});
var _concourse$atc$BetaBuild$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return {page: a, now: b, job: c, history: d, currentBuild: e, browsingIndex: f, autoScroll: g, ports: h, csrfToken: i, previousKeyPress: j, showHelp: k, hash: l};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _concourse$atc$BetaBuild$Flags = F2(
	function (a, b) {
		return {csrfToken: a, hash: b};
	});
var _concourse$atc$BetaBuild$JobBuildPage = function (a) {
	return {ctor: 'JobBuildPage', _0: a};
};
var _concourse$atc$BetaBuild$initJobBuildPage = F4(
	function (teamName, pipelineName, jobName, buildName) {
		return _concourse$atc$BetaBuild$JobBuildPage(
			{teamName: teamName, pipelineName: pipelineName, jobName: jobName, buildName: buildName});
	});
var _concourse$atc$BetaBuild$BuildPage = function (a) {
	return {ctor: 'BuildPage', _0: a};
};
var _concourse$atc$BetaBuild$LoginRequired = {ctor: 'LoginRequired'};
var _concourse$atc$BetaBuild$StepsComplete = {ctor: 'StepsComplete'};
var _concourse$atc$BetaBuild$StepsLiveUpdating = {ctor: 'StepsLiveUpdating'};
var _concourse$atc$BetaBuild$StepsLoading = {ctor: 'StepsLoading'};
var _concourse$atc$BetaBuild$KeyPressed = function (a) {
	return {ctor: 'KeyPressed', _0: a};
};
var _concourse$atc$BetaBuild$NewCSRFToken = function (a) {
	return {ctor: 'NewCSRFToken', _0: a};
};
var _concourse$atc$BetaBuild$NavTo = function (a) {
	return {ctor: 'NavTo', _0: a};
};
var _concourse$atc$BetaBuild$WindowScrolled = function (a) {
	return {ctor: 'WindowScrolled', _0: a};
};
var _concourse$atc$BetaBuild$RevealCurrentBuildInHistory = {ctor: 'RevealCurrentBuildInHistory'};
var _concourse$atc$BetaBuild$BuildAborted = function (a) {
	return {ctor: 'BuildAborted', _0: a};
};
var _concourse$atc$BetaBuild$abortBuild = F2(
	function (buildId, csrfToken) {
		return A2(
			_elm_lang$core$Task$attempt,
			_concourse$atc$BetaBuild$BuildAborted,
			A2(_concourse$atc$Concourse_Build$abort, buildId, csrfToken));
	});
var _concourse$atc$BetaBuild$ClockTick = function (a) {
	return {ctor: 'ClockTick', _0: a};
};
var _concourse$atc$BetaBuild$getCurrentTime = A2(_elm_lang$core$Task$perform, _concourse$atc$BetaBuild$ClockTick, _elm_lang$core$Time$now);
var _concourse$atc$BetaBuild$ScrollBuilds = function (a) {
	return {ctor: 'ScrollBuilds', _0: a};
};
var _concourse$atc$BetaBuild$BetaBuildOutputMsg = F2(
	function (a, b) {
		return {ctor: 'BetaBuildOutputMsg', _0: a, _1: b};
	});
var _concourse$atc$BetaBuild$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: A2(_elm_lang$core$Time$every, _elm_lang$core$Time$second, _concourse$atc$BetaBuild$ClockTick),
			_1: {
				ctor: '::',
				_0: _concourse$atc$Scroll$fromWindowBottom(_concourse$atc$BetaBuild$WindowScrolled),
				_1: {
					ctor: '::',
					_0: function () {
						var _p14 = A2(
							_elm_lang$core$Maybe$andThen,
							function (_) {
								return _.output;
							},
							_krisajenkins$remotedata$RemoteData$toMaybe(model.currentBuild));
						if (_p14.ctor === 'Nothing') {
							return _elm_lang$core$Platform_Sub$none;
						} else {
							return A2(
								_elm_lang$core$Platform_Sub$map,
								_concourse$atc$BetaBuild$BetaBuildOutputMsg(model.browsingIndex),
								_p14._0.events);
						}
					}(),
					_1: {
						ctor: '::',
						_0: _elm_lang$keyboard$Keyboard$presses(_concourse$atc$BetaBuild$KeyPressed),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _concourse$atc$BetaBuild$initBetaBuildOutput = F2(
	function (build, model) {
		var _p15 = A2(
			_concourse$atc$BetaBuildOutput$init,
			{hash: model.hash},
			build);
		var output = _p15._0;
		var outputCmd = _p15._1;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{
					currentBuild: A2(
						_krisajenkins$remotedata$RemoteData$map,
						function (info) {
							return _elm_lang$core$Native_Utils.update(
								info,
								{
									output: _elm_lang$core$Maybe$Just(output)
								});
						},
						model.currentBuild)
				}),
			_1: A2(
				_elm_lang$core$Platform_Cmd$map,
				_concourse$atc$BetaBuild$BetaBuildOutputMsg(model.browsingIndex),
				outputCmd)
		};
	});
var _concourse$atc$BetaBuild$viewBetaBuildOutput = F2(
	function (browsingIndex, output) {
		var _p16 = output;
		if (_p16.ctor === 'Just') {
			return A2(
				_elm_lang$html$Html$map,
				_concourse$atc$BetaBuild$BetaBuildOutputMsg(browsingIndex),
				_concourse$atc$BetaBuildOutput$view(_p16._0));
		} else {
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{ctor: '[]'});
		}
	});
var _concourse$atc$BetaBuild$BuildJobDetailsFetched = function (a) {
	return {ctor: 'BuildJobDetailsFetched', _0: a};
};
var _concourse$atc$BetaBuild$fetchBuildJobDetails = function (buildJob) {
	return A2(
		_elm_lang$core$Task$attempt,
		_concourse$atc$BetaBuild$BuildJobDetailsFetched,
		_concourse$atc$Concourse_Job$fetchJob(buildJob));
};
var _concourse$atc$BetaBuild$BuildHistoryFetched = function (a) {
	return {ctor: 'BuildHistoryFetched', _0: a};
};
var _concourse$atc$BetaBuild$fetchBuildHistory = F2(
	function (job, page) {
		return A2(
			_elm_lang$core$Task$attempt,
			_concourse$atc$BetaBuild$BuildHistoryFetched,
			A2(_concourse$atc$Concourse_Build$fetchJobBuilds, job, page));
	});
var _concourse$atc$BetaBuild$handleHistoryFetched = F2(
	function (history, model) {
		var currentBuild = _krisajenkins$remotedata$RemoteData$toMaybe(model.currentBuild);
		var withBuilds = _elm_lang$core$Native_Utils.update(
			model,
			{
				history: A2(_elm_lang$core$List$append, model.history, history.content)
			});
		var _p18 = {
			ctor: '_Tuple2',
			_0: history.pagination.nextPage,
			_1: A2(
				_elm_lang$core$Maybe$andThen,
				function (_p17) {
					return function (_) {
						return _.job;
					}(
						function (_) {
							return _.build;
						}(_p17));
				},
				currentBuild)
		};
		if (_p18._0.ctor === 'Nothing') {
			return {ctor: '_Tuple2', _0: withBuilds, _1: _elm_lang$core$Platform_Cmd$none};
		} else {
			if (_p18._1.ctor === 'Just') {
				return {
					ctor: '_Tuple2',
					_0: withBuilds,
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: A2(
								_concourse$atc$BetaBuild$fetchBuildHistory,
								_p18._1._0,
								_elm_lang$core$Maybe$Just(_p18._0._0)),
							_1: {ctor: '[]'}
						})
				};
			} else {
				return _elm_lang$core$Native_Utils.crashCase(
					'BetaBuild',
					{
						start: {line: 566, column: 9},
						end: {line: 574, column: 41}
					},
					_p18)('impossible');
			}
		}
	});
var _concourse$atc$BetaBuild$BuildPrepFetched = F2(
	function (a, b) {
		return {ctor: 'BuildPrepFetched', _0: a, _1: b};
	});
var _concourse$atc$BetaBuild$fetchBuildPrep = F3(
	function (delay, browsingIndex, buildId) {
		return A2(
			_elm_lang$core$Task$attempt,
			_concourse$atc$BetaBuild$BuildPrepFetched(browsingIndex),
			A2(
				_elm_lang$core$Task$andThen,
				_elm_lang$core$Basics$always(
					_concourse$atc$Concourse_BuildPrep$fetch(buildId)),
				_elm_lang$core$Process$sleep(delay)));
	});
var _concourse$atc$BetaBuild$BuildFetched = F2(
	function (a, b) {
		return {ctor: 'BuildFetched', _0: a, _1: b};
	});
var _concourse$atc$BetaBuild$fetchBuild = F3(
	function (delay, browsingIndex, buildId) {
		return A2(
			_elm_lang$core$Task$attempt,
			_concourse$atc$BetaBuild$BuildFetched(browsingIndex),
			A2(
				_elm_lang$core$Task$andThen,
				_elm_lang$core$Basics$always(
					_concourse$atc$Concourse_Build$fetch(buildId)),
				_elm_lang$core$Process$sleep(delay)));
	});
var _concourse$atc$BetaBuild$pollUntilStarted = F2(
	function (browsingIndex, buildId) {
		return _elm_lang$core$Platform_Cmd$batch(
			{
				ctor: '::',
				_0: A3(_concourse$atc$BetaBuild$fetchBuild, _elm_lang$core$Time$second, browsingIndex, buildId),
				_1: {
					ctor: '::',
					_0: A3(_concourse$atc$BetaBuild$fetchBuildPrep, _elm_lang$core$Time$second, browsingIndex, buildId),
					_1: {ctor: '[]'}
				}
			});
	});
var _concourse$atc$BetaBuild$fetchJobBuild = F2(
	function (browsingIndex, jbi) {
		return A2(
			_elm_lang$core$Task$attempt,
			_concourse$atc$BetaBuild$BuildFetched(browsingIndex),
			_concourse$atc$Concourse_Build$fetchJobBuild(jbi));
	});
var _concourse$atc$BetaBuild$changeToBuild = F2(
	function (page, model) {
		if ((_elm_lang$core$Native_Utils.cmp(model.browsingIndex, 0) > 0) && _elm_lang$core$Native_Utils.eq(page, model.page)) {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		} else {
			var newBuild = A2(
				_krisajenkins$remotedata$RemoteData$map,
				function (cb) {
					return _elm_lang$core$Native_Utils.update(
						cb,
						{prep: _elm_lang$core$Maybe$Nothing, output: _elm_lang$core$Maybe$Nothing});
				},
				model.currentBuild);
			var newIndex = model.browsingIndex + 1;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{browsingIndex: newIndex, currentBuild: newBuild, autoScroll: true}),
				_1: function () {
					var _p20 = page;
					if (_p20.ctor === 'BuildPage') {
						return A3(_concourse$atc$BetaBuild$fetchBuild, 0, newIndex, _p20._0);
					} else {
						return A2(_concourse$atc$BetaBuild$fetchJobBuild, newIndex, _p20._0);
					}
				}()
			};
		}
	});
var _concourse$atc$BetaBuild$init = F3(
	function (ports, flags, page) {
		var _p21 = A2(
			_concourse$atc$BetaBuild$changeToBuild,
			page,
			{
				page: page,
				now: _elm_lang$core$Maybe$Nothing,
				job: _elm_lang$core$Maybe$Nothing,
				history: {ctor: '[]'},
				currentBuild: _krisajenkins$remotedata$RemoteData$NotAsked,
				browsingIndex: 0,
				autoScroll: true,
				ports: ports,
				csrfToken: flags.csrfToken,
				previousKeyPress: _elm_lang$core$Maybe$Nothing,
				showHelp: false,
				hash: flags.hash
			});
		var model = _p21._0;
		var cmd = _p21._1;
		return {
			ctor: '_Tuple2',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$batch(
				{
					ctor: '::',
					_0: cmd,
					_1: {
						ctor: '::',
						_0: _concourse$atc$BetaBuild$getCurrentTime,
						_1: {ctor: '[]'}
					}
				})
		};
	});
var _concourse$atc$BetaBuild$AbortBuild = function (a) {
	return {ctor: 'AbortBuild', _0: a};
};
var _concourse$atc$BetaBuild$BuildTriggered = function (a) {
	return {ctor: 'BuildTriggered', _0: a};
};
var _concourse$atc$BetaBuild$triggerBuild = F2(
	function (buildJob, csrfToken) {
		return A2(
			_elm_lang$core$Task$attempt,
			_concourse$atc$BetaBuild$BuildTriggered,
			A2(_concourse$atc$Concourse_Job$triggerBuild, buildJob, csrfToken));
	});
var _concourse$atc$BetaBuild$TriggerBuild = function (a) {
	return {ctor: 'TriggerBuild', _0: a};
};
var _concourse$atc$BetaBuild$SwitchToBuild = function (a) {
	return {ctor: 'SwitchToBuild', _0: a};
};
var _concourse$atc$BetaBuild$viewHistoryItem = F2(
	function (currentBuild, build) {
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$core$Native_Utils.eq(build.id, currentBuild.id) ? _elm_lang$html$Html_Attributes$class(
					A2(
						_elm_lang$core$Basics_ops['++'],
						_concourse$atc$Concourse_BuildStatus$show(currentBuild.status),
						' current')) : _elm_lang$html$Html_Attributes$class(
					_concourse$atc$Concourse_BuildStatus$show(build.status)),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _concourse$atc$StrictEvents$onLeftClick(
							_concourse$atc$BetaBuild$SwitchToBuild(build)),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(
								_concourse$atc$Format$prependBeta(
									_concourse$atc$Concourse_Build$url(build))),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(build.name),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _concourse$atc$BetaBuild$viewHistory = F2(
	function (currentBuild, builds) {
		return A2(
			_elm_lang$html$Html$ul,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('builds'),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$List$map,
				_concourse$atc$BetaBuild$viewHistoryItem(currentBuild),
				builds));
	});
var _concourse$atc$BetaBuild$lazyViewHistory = F2(
	function (currentBuild, builds) {
		return A3(_elm_lang$html$Html_Lazy$lazy2, _concourse$atc$BetaBuild$viewHistory, currentBuild, builds);
	});
var _concourse$atc$BetaBuild$viewBuildHeader = F2(
	function (build, _p22) {
		var _p23 = _p22;
		var _p30 = _p23.job;
		var buildTitle = function () {
			var _p24 = build.job;
			if (_p24.ctor === 'Just') {
				var _p25 = _p24._0.jobName;
				var jobUrl = _concourse$atc$Format$prependBeta(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'/teams/',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p24._0.teamName,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'/pipelines/',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p24._0.pipelineName,
									A2(_elm_lang$core$Basics_ops['++'], '/jobs/', _p25))))));
				return A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _concourse$atc$StrictEvents$onLeftClick(
							_concourse$atc$BetaBuild$NavTo(jobUrl)),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(jobUrl),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p25,
								A2(_elm_lang$core$Basics_ops['++'], ' #', build.name))),
						_1: {ctor: '[]'}
					});
			} else {
				return _elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'build #',
						_elm_lang$core$Basics$toString(build.id)));
			}
		}();
		var abortButton = _concourse$atc$Concourse_BuildStatus$isRunning(build.status) ? A2(
			_elm_lang$html$Html$button,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('build-action build-action-abort fr'),
				_1: {
					ctor: '::',
					_0: _concourse$atc$StrictEvents$onLeftClick(
						_concourse$atc$BetaBuild$AbortBuild(build.id)),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'button'),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'tabindex', '0'),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-label', 'Abort Build'),
								_1: {
									ctor: '::',
									_0: A2(_elm_lang$html$Html_Attributes$attribute, 'title', 'Abort Build'),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$i,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('fa fa-times-circle'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}) : _elm_lang$html$Html$text('');
		var triggerButton = function () {
			var _p26 = _p30;
			if (_p26.ctor === 'Just') {
				var _p28 = _p26._0.pipeline;
				var buttonDisabled = function () {
					var _p27 = _p30;
					if (_p27.ctor === 'Nothing') {
						return true;
					} else {
						return _p27._0.disableManualTrigger;
					}
				}();
				var actionUrl = A2(
					_elm_lang$core$Basics_ops['++'],
					'/teams/',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p28.teamName,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'/pipelines/',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p28.pipelineName,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'/jobs/',
									A2(_elm_lang$core$Basics_ops['++'], _p26._0.name, '/builds'))))));
				return A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('build-action fr'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$disabled(buttonDisabled),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'button'),
								_1: {
									ctor: '::',
									_0: A2(_elm_lang$html$Html_Attributes$attribute, 'tabindex', '0'),
									_1: {
										ctor: '::',
										_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-label', 'Trigger Build'),
										_1: {
											ctor: '::',
											_0: A2(_elm_lang$html$Html_Attributes$attribute, 'title', 'Trigger Build'),
											_1: {
												ctor: '::',
												_0: _concourse$atc$StrictEvents$onLeftClick(
													_concourse$atc$BetaBuild$TriggerBuild(build.job)),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$i,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('fa fa-plus-circle'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					});
			} else {
				return _elm_lang$html$Html$text('');
			}
		}();
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('fixed-header'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'build-header ',
								_concourse$atc$Concourse_BuildStatus$show(build.status))),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('build-actions fr'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: triggerButton,
								_1: {
									ctor: '::',
									_0: abortButton,
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$h1,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: buildTitle,
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: function () {
									var _p29 = _p23.now;
									if (_p29.ctor === 'Just') {
										return A2(_concourse$atc$BuildDuration$view, build.duration, _p29._0);
									} else {
										return _elm_lang$html$Html$text('');
									}
								}(),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _concourse$atc$StrictEvents$onMouseWheel(_concourse$atc$BetaBuild$ScrollBuilds),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(_concourse$atc$BetaBuild$lazyViewHistory, build, _p23.history),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _concourse$atc$BetaBuild$view = function (model) {
	var _p31 = _krisajenkins$remotedata$RemoteData$toMaybe(model.currentBuild);
	if (_p31.ctor === 'Just') {
		var _p35 = _p31._0;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('with-fixed-header'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(_concourse$atc$BetaBuild$viewBuildHeader, _p35.build, model),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('scrollable-body build-body'),
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: _concourse$atc$BetaBuild$viewBuildPrep(_p35.prep),
								_1: {
									ctor: '::',
									_0: A3(_elm_lang$html$Html_Lazy$lazy2, _concourse$atc$BetaBuild$viewBetaBuildOutput, model.browsingIndex, _p35.output),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$classList(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'keyboard-help', _1: true},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'hidden', _1: !model.showHelp},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('help-title'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('keyboard shortcuts'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('help-line'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$div,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('keys'),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$span,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('key'),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('h'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$span,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$class('key'),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('l'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html$text('next/previous build'),
																_1: {ctor: '[]'}
															}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$div,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('help-line'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$div,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$class('keys'),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$span,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$class('key'),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('j'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$span,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$class('key'),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('k'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('scroll down/up'),
																	_1: {ctor: '[]'}
																}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$div,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('help-line'),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$div,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('keys'),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$span,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$class('key'),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('shift t'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('trigger a new build'),
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$div,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$class('help-line'),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$div,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$class('keys'),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$span,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$class('key'),
																						_1: {ctor: '[]'}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('shift a'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('abort build'),
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$div,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('help-line'),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$div,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$class('keys'),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$span,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$class('key'),
																							_1: {ctor: '[]'}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('gg'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('scroll to the top'),
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$div,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$class('help-line'),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$div,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$class('keys'),
																						_1: {ctor: '[]'}
																					},
																					{
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$span,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$class('key'),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('shift g'),
																								_1: {ctor: '[]'}
																							}),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('scroll to the bottom'),
																					_1: {ctor: '[]'}
																				}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$div,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$class('help-line'),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$div,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$class('keys'),
																							_1: {ctor: '[]'}
																						},
																						{
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$span,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$class('key'),
																									_1: {ctor: '[]'}
																								},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('?'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('hide/show help'),
																						_1: {ctor: '[]'}
																					}
																				}),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}
												}
											}),
										_1: {ctor: '[]'}
									}
								}
							},
							function () {
								var build = _p35.build;
								var maybeBirthDate = A2(_elm_community$maybe_extra$Maybe_Extra$or, build.duration.startedAt, build.duration.finishedAt);
								var _p32 = {ctor: '_Tuple2', _0: maybeBirthDate, _1: build.reapTime};
								if (((_p32.ctor === '_Tuple2') && (_p32._0.ctor === 'Just')) && (_p32._1.ctor === 'Just')) {
									return {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('tombstone'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('heading'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('RIP'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('job-name'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(
																A2(
																	_elm_lang$core$Maybe$withDefault,
																	'one-off build',
																	A2(
																		_elm_lang$core$Maybe$map,
																		function (_) {
																			return _.jobName;
																		},
																		build.job))),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$div,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('build-name'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		'build #',
																		function () {
																			var _p33 = build.job;
																			if (_p33.ctor === 'Nothing') {
																				return _elm_lang$core$Basics$toString(build.id);
																			} else {
																				return build.name;
																			}
																		}())),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$div,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('date'),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			_concourse$atc$BetaBuild$mmDDYY(_p32._0._0),
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				'-',
																				_concourse$atc$BetaBuild$mmDDYY(_p32._1._0)))),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$div,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$class('epitaph'),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(
																			function () {
																				var _p34 = build.status;
																				switch (_p34.ctor) {
																					case 'BuildStatusSucceeded':
																						return 'It passed, and now it has passed on.';
																					case 'BuildStatusFailed':
																						return 'It failed, and now has been forgotten.';
																					case 'BuildStatusErrored':
																						return 'It errored, but has found forgiveness.';
																					case 'BuildStatusAborted':
																						return 'It was never given a chance.';
																					default:
																						return 'I\'m not dead yet.';
																				}
																			}()),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('explanation'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('This log has been '),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$a,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$href('http://concourse.ci/configuring-jobs.html#build_logs_to_retain'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('reaped.'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}
									};
								} else {
									return {ctor: '[]'};
								}
							}())),
					_1: {ctor: '[]'}
				}
			});
	} else {
		return _concourse$atc$LoadingIndicator$view;
	}
};
var _concourse$atc$BetaBuild$Noop = {ctor: 'Noop'};
var _concourse$atc$BetaBuild$scrollBuilds = function (delta) {
	return A2(
		_elm_lang$core$Task$perform,
		_elm_lang$core$Basics$always(_concourse$atc$BetaBuild$Noop),
		A2(_concourse$atc$Scroll$scroll, 'builds', delta));
};
var _concourse$atc$BetaBuild$scrollToCurrentBuildInHistory = A2(
	_elm_lang$core$Task$perform,
	_elm_lang$core$Basics$always(_concourse$atc$BetaBuild$Noop),
	_concourse$atc$Scroll$scrollIntoView('#builds .current'));
var _concourse$atc$BetaBuild$setFavicon = function (status) {
	return A2(
		_elm_lang$core$Task$perform,
		_elm_lang$core$Basics$always(_concourse$atc$BetaBuild$Noop),
		_concourse$atc$Favicon$set(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'/public/images/favicon-',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_concourse$atc$Concourse_BuildStatus$show(status),
					'.png'))));
};
var _concourse$atc$BetaBuild$handleBuildFetched = F3(
	function (browsingIndex, build, model) {
		if (_elm_lang$core$Native_Utils.eq(browsingIndex, model.browsingIndex)) {
			var fetchJobAndHistory = function () {
				var _p36 = {ctor: '_Tuple2', _0: model.job, _1: build.job};
				if (((_p36.ctor === '_Tuple2') && (_p36._0.ctor === 'Nothing')) && (_p36._1.ctor === 'Just')) {
					var _p37 = _p36._1._0;
					return _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: _concourse$atc$BetaBuild$fetchBuildJobDetails(_p37),
							_1: {
								ctor: '::',
								_0: A2(_concourse$atc$BetaBuild$fetchBuildHistory, _p37, _elm_lang$core$Maybe$Nothing),
								_1: {ctor: '[]'}
							}
						});
				} else {
					return _elm_lang$core$Platform_Cmd$none;
				}
			}();
			var currentBuild = function () {
				var _p38 = _krisajenkins$remotedata$RemoteData$toMaybe(model.currentBuild);
				if (_p38.ctor === 'Nothing') {
					return {build: build, prep: _elm_lang$core$Maybe$Nothing, output: _elm_lang$core$Maybe$Nothing};
				} else {
					return _elm_lang$core$Native_Utils.update(
						_p38._0,
						{build: build});
				}
			}();
			var withBuild = _elm_lang$core$Native_Utils.update(
				model,
				{
					currentBuild: _krisajenkins$remotedata$RemoteData$Success(currentBuild),
					history: A2(_concourse$atc$BetaBuild$updateHistory, build, model.history)
				});
			var _p39 = function () {
				if (_elm_lang$core$Native_Utils.eq(build.status, _concourse$atc$Concourse$BuildStatusPending)) {
					return {
						ctor: '_Tuple2',
						_0: withBuild,
						_1: A2(_concourse$atc$BetaBuild$pollUntilStarted, browsingIndex, build.id)
					};
				} else {
					if (_elm_lang$core$Native_Utils.eq(build.reapTime, _elm_lang$core$Maybe$Nothing)) {
						var _p40 = A2(
							_elm_lang$core$Maybe$andThen,
							function (_) {
								return _.prep;
							},
							_krisajenkins$remotedata$RemoteData$toMaybe(model.currentBuild));
						if (_p40.ctor === 'Nothing') {
							return A2(_concourse$atc$BetaBuild$initBetaBuildOutput, build, withBuild);
						} else {
							var _p41 = A2(_concourse$atc$BetaBuild$initBetaBuildOutput, build, withBuild);
							var newModel = _p41._0;
							var cmd = _p41._1;
							return {
								ctor: '_Tuple2',
								_0: newModel,
								_1: _elm_lang$core$Platform_Cmd$batch(
									{
										ctor: '::',
										_0: cmd,
										_1: {
											ctor: '::',
											_0: A3(_concourse$atc$BetaBuild$fetchBuildPrep, _elm_lang$core$Time$second, browsingIndex, build.id),
											_1: {ctor: '[]'}
										}
									})
							};
						}
					} else {
						return {ctor: '_Tuple2', _0: withBuild, _1: _elm_lang$core$Platform_Cmd$none};
					}
				}
			}();
			var newModel = _p39._0;
			var cmd = _p39._1;
			return {
				ctor: '_Tuple2',
				_0: newModel,
				_1: _elm_lang$core$Platform_Cmd$batch(
					{
						ctor: '::',
						_0: cmd,
						_1: {
							ctor: '::',
							_0: _concourse$atc$BetaBuild$setFavicon(build.status),
							_1: {
								ctor: '::',
								_0: model.ports.title(
									_concourse$atc$BetaBuild$extractTitle(newModel)),
								_1: {
									ctor: '::',
									_0: fetchJobAndHistory,
									_1: {ctor: '[]'}
								}
							}
						}
					})
			};
		} else {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _concourse$atc$BetaBuild$handleOutMsg = F2(
	function (outMsg, model) {
		var _p42 = outMsg;
		if (_p42.ctor === 'OutNoop') {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		} else {
			var _p45 = _p42._0;
			var _p43 = _krisajenkins$remotedata$RemoteData$toMaybe(model.currentBuild);
			if (_p43.ctor === 'Nothing') {
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			} else {
				var _p44 = _p43._0;
				var build = _p44.build;
				var duration = build.duration;
				var newDuration = _concourse$atc$Concourse_BuildStatus$isRunning(_p45) ? duration : _elm_lang$core$Native_Utils.update(
					duration,
					{
						finishedAt: _elm_lang$core$Maybe$Just(_p42._1)
					});
				var newStatus = _concourse$atc$Concourse_BuildStatus$isRunning(build.status) ? _p45 : build.status;
				var newBuild = _elm_lang$core$Native_Utils.update(
					build,
					{status: newStatus, duration: newDuration});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							history: A2(_concourse$atc$BetaBuild$updateHistory, newBuild, model.history),
							currentBuild: _krisajenkins$remotedata$RemoteData$Success(
								_elm_lang$core$Native_Utils.update(
									_p44,
									{build: newBuild}))
						}),
					_1: _concourse$atc$Concourse_BuildStatus$isRunning(build.status) ? _concourse$atc$BetaBuild$setFavicon(_p45) : _elm_lang$core$Platform_Cmd$none
				};
			}
		}
	});
var _concourse$atc$BetaBuild$update = F2(
	function (action, model) {
		update:
		while (true) {
			var _p46 = action;
			switch (_p46.ctor) {
				case 'Noop':
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				case 'SwitchToBuild':
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _elm_lang$navigation$Navigation$newUrl(
							_concourse$atc$Format$prependBeta(
								_concourse$atc$Concourse_Build$url(_p46._0)))
					};
				case 'TriggerBuild':
					var _p47 = _p46._0;
					if (_p47.ctor === 'Nothing') {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						return {
							ctor: '_Tuple2',
							_0: model,
							_1: A2(_concourse$atc$BetaBuild$triggerBuild, _p47._0, model.csrfToken)
						};
					}
				case 'BuildTriggered':
					if (_p46._0.ctor === 'Ok') {
						var _p48 = _p46._0._0;
						var _v33 = _concourse$atc$BetaBuild$SwitchToBuild(_p48),
							_v34 = _elm_lang$core$Native_Utils.update(
							model,
							{
								history: {ctor: '::', _0: _p48, _1: model.history}
							});
						action = _v33;
						model = _v34;
						continue update;
					} else {
						var _p49 = _p46._0._0;
						if (_p49.ctor === 'BadStatus') {
							return _elm_lang$core$Native_Utils.eq(_p49._0.status.code, 401) ? {
								ctor: '_Tuple2',
								_0: model,
								_1: _concourse$atc$LoginRedirect$requestLoginRedirect('')
							} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
						} else {
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
						}
					}
				case 'BuildFetched':
					if (_p46._1.ctor === 'Ok') {
						return A3(_concourse$atc$BetaBuild$handleBuildFetched, _p46._0, _p46._1._0, model);
					} else {
						var _p52 = _p46._1._0;
						var _p50 = _p52;
						if (_p50.ctor === 'BadStatus') {
							var _p51 = _p50._0.status;
							return _elm_lang$core$Native_Utils.eq(_p51.code, 401) ? {
								ctor: '_Tuple2',
								_0: model,
								_1: _concourse$atc$LoginRedirect$requestLoginRedirect('')
							} : (_elm_lang$core$Native_Utils.eq(_p51.code, 404) ? {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{
										currentBuild: _krisajenkins$remotedata$RemoteData$Failure(_p52)
									}),
								_1: _elm_lang$core$Platform_Cmd$none
							} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none});
						} else {
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
						}
					}
				case 'AbortBuild':
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: A2(_concourse$atc$BetaBuild$abortBuild, _p46._0, model.csrfToken)
					};
				case 'BuildAborted':
					if (_p46._0.ctor === 'Ok') {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						var _p53 = _p46._0._0;
						if (_p53.ctor === 'BadStatus') {
							return _elm_lang$core$Native_Utils.eq(_p53._0.status.code, 401) ? {
								ctor: '_Tuple2',
								_0: model,
								_1: _concourse$atc$LoginRedirect$requestLoginRedirect('')
							} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
						} else {
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
						}
					}
				case 'BuildPrepFetched':
					if (_p46._1.ctor === 'Ok') {
						return A3(_concourse$atc$BetaBuild$handleBuildPrepFetched, _p46._0, _p46._1._0, model);
					} else {
						return A3(
							_elm_lang$core$Basics$flip,
							_elm_lang$core$Basics$always,
							A2(_elm_lang$core$Debug$log, 'failed to fetch build preparation', _p46._1._0),
							{ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none});
					}
				case 'BetaBuildOutputMsg':
					var _p58 = _p46._0;
					if (_elm_lang$core$Native_Utils.eq(_p58, model.browsingIndex)) {
						var currentBuild = _krisajenkins$remotedata$RemoteData$toMaybe(model.currentBuild);
						var _p54 = {
							ctor: '_Tuple2',
							_0: currentBuild,
							_1: A2(
								_elm_lang$core$Maybe$andThen,
								function (_) {
									return _.output;
								},
								currentBuild)
						};
						if (((_p54.ctor === '_Tuple2') && (_p54._0.ctor === 'Just')) && (_p54._1.ctor === 'Just')) {
							var _p55 = A2(_concourse$atc$BetaBuildOutput$update, _p46._1, _p54._1._0);
							var newOutput = _p55._0;
							var cmd = _p55._1;
							var outMsg = _p55._2;
							var _p56 = A2(
								_concourse$atc$BetaBuild$handleOutMsg,
								outMsg,
								_elm_lang$core$Native_Utils.update(
									model,
									{
										currentBuild: _krisajenkins$remotedata$RemoteData$Success(
											_elm_lang$core$Native_Utils.update(
												_p54._0._0,
												{
													output: _elm_lang$core$Maybe$Just(newOutput)
												}))
									}));
							var newModel = _p56._0;
							var newCmd = _p56._1;
							return {
								ctor: '_Tuple2',
								_0: newModel,
								_1: _elm_lang$core$Platform_Cmd$batch(
									{
										ctor: '::',
										_0: newCmd,
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$core$Platform_Cmd$map,
												_concourse$atc$BetaBuild$BetaBuildOutputMsg(_p58),
												cmd),
											_1: {ctor: '[]'}
										}
									})
							};
						} else {
							return _elm_lang$core$Native_Utils.crashCase(
								'BetaBuild',
								{
									start: {line: 301, column: 21},
									end: {line: 321, column: 99}
								},
								_p54)('impossible (received action for missing BetaBuildOutput)');
						}
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'BuildHistoryFetched':
					if (_p46._0.ctor === 'Err') {
						return A3(
							_elm_lang$core$Basics$flip,
							_elm_lang$core$Basics$always,
							A2(_elm_lang$core$Debug$log, 'failed to fetch build history', _p46._0._0),
							{ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none});
					} else {
						return A2(_concourse$atc$BetaBuild$handleHistoryFetched, _p46._0._0, model);
					}
				case 'BuildJobDetailsFetched':
					if (_p46._0.ctor === 'Ok') {
						return A2(_concourse$atc$BetaBuild$handleBuildJobFetched, _p46._0._0, model);
					} else {
						return A3(
							_elm_lang$core$Basics$flip,
							_elm_lang$core$Basics$always,
							A2(_elm_lang$core$Debug$log, 'failed to fetch build job details', _p46._0._0),
							{ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none});
					}
				case 'RevealCurrentBuildInHistory':
					return {ctor: '_Tuple2', _0: model, _1: _concourse$atc$BetaBuild$scrollToCurrentBuildInHistory};
				case 'ScrollBuilds':
					var _p59 = _p46._0;
					return _elm_lang$core$Native_Utils.eq(_p59.deltaX, 0) ? {
						ctor: '_Tuple2',
						_0: model,
						_1: _concourse$atc$BetaBuild$scrollBuilds(_p59.deltaY)
					} : {
						ctor: '_Tuple2',
						_0: model,
						_1: _concourse$atc$BetaBuild$scrollBuilds(0 - _p59.deltaX)
					};
				case 'ClockTick':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								now: _elm_lang$core$Maybe$Just(_p46._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'WindowScrolled':
					return _elm_lang$core$Native_Utils.eq(_p46._0, 0) ? {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{autoScroll: true}),
						_1: _elm_lang$core$Platform_Cmd$none
					} : {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{autoScroll: false}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'NavTo':
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _elm_lang$navigation$Navigation$newUrl(_p46._0)
					};
				case 'NewCSRFToken':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{csrfToken: _p46._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				default:
					return A2(
						_concourse$atc$BetaBuild$handleKeyPressed,
						_elm_lang$core$Char$fromCode(_p46._0),
						model);
			}
		}
	});
var _concourse$atc$BetaBuild$handleKeyPressed = F2(
	function (key, model) {
		var newModel = function () {
			var _p60 = {ctor: '_Tuple2', _0: model.previousKeyPress, _1: key};
			if (((_p60.ctor === '_Tuple2') && (_p60._0.ctor === 'Nothing')) && (_p60._1.valueOf() === 'g')) {
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						previousKeyPress: _elm_lang$core$Maybe$Just(
							_elm_lang$core$Native_Utils.chr('g'))
					});
			} else {
				return _elm_lang$core$Native_Utils.update(
					model,
					{previousKeyPress: _elm_lang$core$Maybe$Nothing});
			}
		}();
		var currentBuild = A2(
			_elm_lang$core$Maybe$map,
			function (_) {
				return _.build;
			},
			_krisajenkins$remotedata$RemoteData$toMaybe(model.currentBuild));
		var _p61 = key;
		switch (_p61.valueOf()) {
			case 'h':
				var _p62 = A2(
					_elm_lang$core$Maybe$andThen,
					_concourse$atc$BetaBuild$nextBuild(model.history),
					currentBuild);
				if (_p62.ctor === 'Just') {
					return A2(
						_concourse$atc$BetaBuild$update,
						_concourse$atc$BetaBuild$SwitchToBuild(_p62._0),
						newModel);
				} else {
					return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'l':
				var _p63 = A2(
					_elm_lang$core$Maybe$andThen,
					_concourse$atc$BetaBuild$prevBuild(model.history),
					currentBuild);
				if (_p63.ctor === 'Just') {
					return A2(
						_concourse$atc$BetaBuild$update,
						_concourse$atc$BetaBuild$SwitchToBuild(_p63._0),
						newModel);
				} else {
					return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'j':
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: A2(
						_elm_lang$core$Task$perform,
						_elm_lang$core$Basics$always(_concourse$atc$BetaBuild$Noop),
						_concourse$atc$Scroll$scrollDown)
				};
			case 'k':
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: A2(
						_elm_lang$core$Task$perform,
						_elm_lang$core$Basics$always(_concourse$atc$BetaBuild$Noop),
						_concourse$atc$Scroll$scrollUp)
				};
			case 'T':
				return A2(
					_concourse$atc$BetaBuild$update,
					_concourse$atc$BetaBuild$TriggerBuild(
						A2(
							_elm_lang$core$Maybe$andThen,
							function (_) {
								return _.job;
							},
							currentBuild)),
					newModel);
			case 'A':
				if (_elm_lang$core$Native_Utils.eq(
					currentBuild,
					_elm_lang$core$List$head(model.history))) {
					var _p64 = currentBuild;
					if (_p64.ctor === 'Just') {
						return A2(
							_concourse$atc$BetaBuild$update,
							_concourse$atc$BetaBuild$AbortBuild(_p64._0.id),
							newModel);
					} else {
						return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
					}
				} else {
					return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'g':
				return _elm_lang$core$Native_Utils.eq(
					model.previousKeyPress,
					_elm_lang$core$Maybe$Just(
						_elm_lang$core$Native_Utils.chr('g'))) ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						newModel,
						{autoScroll: false}),
					_1: A2(
						_elm_lang$core$Task$perform,
						_elm_lang$core$Basics$always(_concourse$atc$BetaBuild$Noop),
						_concourse$atc$Scroll$toWindowTop)
				} : {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
			case 'G':
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: A2(
						_elm_lang$core$Task$perform,
						_elm_lang$core$Basics$always(_concourse$atc$BetaBuild$Noop),
						_concourse$atc$Scroll$toWindowBottom)
				};
			case '?':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{showHelp: !model.showHelp}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _concourse$atc$BetaBuild$updateWithMessage = F2(
	function (message, model) {
		var _p65 = A2(_concourse$atc$BetaBuild$update, message, model);
		var mdl = _p65._0;
		var msg = _p65._1;
		var _p66 = mdl.currentBuild;
		if (_p66.ctor === 'Failure') {
			return {
				ctor: '_Tuple3',
				_0: mdl,
				_1: msg,
				_2: _elm_lang$core$Maybe$Just(_concourse$atc$UpdateMsg$NotFound)
			};
		} else {
			return {ctor: '_Tuple3', _0: mdl, _1: msg, _2: _elm_lang$core$Maybe$Nothing};
		}
	});

var _concourse$atc$BetaJob$paginationParam = function (page) {
	var _p0 = page.direction;
	switch (_p0.ctor) {
		case 'Since':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'since=',
				_elm_lang$core$Basics$toString(_p0._0));
		case 'Until':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'until=',
				_elm_lang$core$Basics$toString(_p0._0));
		case 'From':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'from=',
				_elm_lang$core$Basics$toString(_p0._0));
		default:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'to=',
				_elm_lang$core$Basics$toString(_p0._0));
	}
};
var _concourse$atc$BetaJob$viewVersion = function (version) {
	return function (_p1) {
		return _concourse$atc$DictView$view(
			A2(
				_elm_lang$core$Dict$map,
				F2(
					function (_p2, s) {
						return _elm_lang$html$Html$text(s);
					}),
				_p1));
	}(version);
};
var _concourse$atc$BetaJob$viewBuildOutputs = F2(
	function (model, bo) {
		return A2(
			_elm_lang$html$Html$tr,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('mbs pas resource fl clearfix'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('resource-name mrm'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(bo.resource),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('resource-version'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _concourse$atc$BetaJob$viewVersion(bo.version),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _concourse$atc$BetaJob$viewBuildInputs = F2(
	function (model, bi) {
		return A2(
			_elm_lang$html$Html$tr,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('mbs pas resource fl clearfix'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('resource-name mrm'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(bi.resource),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('resource-version'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _concourse$atc$BetaJob$viewVersion(bi.version),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _concourse$atc$BetaJob$headerBuildStatusClass = function (finishedBuild) {
	var _p3 = finishedBuild;
	if (_p3.ctor === 'Nothing') {
		return '';
	} else {
		return _concourse$atc$Concourse_BuildStatus$show(_p3._0.status);
	}
};
var _concourse$atc$BetaJob$loadSpinner = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('build-step'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('header'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$i,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('left fa fa-fw fa-spin fa-circle-o-notch'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$h3,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Loading...'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {ctor: '[]'}
	});
var _concourse$atc$BetaJob$viewBuildResources = F2(
	function (model, buildWithResources) {
		var outputsTable = function () {
			var _p4 = buildWithResources.resources;
			if (_p4.ctor === 'Nothing') {
				return _concourse$atc$BetaJob$loadSpinner;
			} else {
				return A2(
					_elm_lang$html$Html$table,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('build-resources'),
						_1: {ctor: '[]'}
					},
					A2(
						_elm_lang$core$List$map,
						_concourse$atc$BetaJob$viewBuildOutputs(model),
						_p4._0.outputs));
			}
		}();
		var inputsTable = function () {
			var _p5 = buildWithResources.resources;
			if (_p5.ctor === 'Nothing') {
				return _concourse$atc$BetaJob$loadSpinner;
			} else {
				return A2(
					_elm_lang$html$Html$table,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('build-resources'),
						_1: {ctor: '[]'}
					},
					A2(
						_elm_lang$core$List$map,
						_concourse$atc$BetaJob$viewBuildInputs(model),
						_p5._0.inputs));
			}
		}();
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('inputs mrl'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('resource-title pbs'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$i,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('fa fa-fw fa-arrow-down prs'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text('inputs'),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: inputsTable,
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('outputs mrl'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('resource-title pbs'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$i,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('fa fa-fw fa-arrow-up prs'),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text('outputs'),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: outputsTable,
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		};
	});
var _concourse$atc$BetaJob$getPausedState = F2(
	function (job, pausedChanging) {
		return pausedChanging ? 'loading' : (job.paused ? 'enabled' : 'disabled');
	});
var _concourse$atc$BetaJob$getPlayPauseLoadIcon = F2(
	function (job, pausedChanging) {
		return pausedChanging ? 'fa-circle-o-notch fa-spin' : (job.paused ? '' : 'fa-pause');
	});
var _concourse$atc$BetaJob$isRunning = function (build) {
	return _concourse$atc$Concourse_BuildStatus$isRunning(build.status);
};
var _concourse$atc$BetaJob$existingBuild = F2(
	function (build, buildWithResources) {
		return _elm_lang$core$Native_Utils.eq(build, buildWithResources.build);
	});
var _concourse$atc$BetaJob$setResourcesToOld = F2(
	function (existingBuildWithResource, newBwr) {
		var _p6 = existingBuildWithResource;
		if (_p6.ctor === 'Nothing') {
			return newBwr;
		} else {
			return _elm_lang$core$Native_Utils.update(
				newBwr,
				{resources: _p6._0.resources});
		}
	});
var _concourse$atc$BetaJob$promoteBuild = F2(
	function (model, build) {
		var existingBuildWithResource = _elm_lang$core$List$head(
			A2(
				_elm_lang$core$List$filter,
				_concourse$atc$BetaJob$existingBuild(build),
				model.buildsWithResources.content));
		var newBwr = {build: build, resources: _elm_lang$core$Maybe$Nothing};
		return A2(_concourse$atc$BetaJob$setResourcesToOld, existingBuildWithResource, newBwr);
	});
var _concourse$atc$BetaJob$paginatedMap = F2(
	function (promoter, pagA) {
		return {
			content: A2(_elm_lang$core$List$map, promoter, pagA.content),
			pagination: pagA.pagination
		};
	});
var _concourse$atc$BetaJob$setExistingResources = F2(
	function (paginatedBuilds, model) {
		return A2(
			_concourse$atc$BetaJob$paginatedMap,
			_concourse$atc$BetaJob$promoteBuild(model),
			paginatedBuilds);
	});
var _concourse$atc$BetaJob$jobBuildsPerPage = 100;
var _concourse$atc$BetaJob$permalink = function (builds) {
	var _p7 = _elm_lang$core$List$head(builds);
	if (_p7.ctor === 'Nothing') {
		return {
			direction: _concourse$atc$Concourse_Pagination$Since(0),
			limit: _concourse$atc$BetaJob$jobBuildsPerPage
		};
	} else {
		return {
			direction: _concourse$atc$Concourse_Pagination$Since(_p7._0.id + 1),
			limit: _elm_lang$core$List$length(builds)
		};
	}
};
var _concourse$atc$BetaJob$Ports = function (a) {
	return {title: a};
};
var _concourse$atc$BetaJob$Model = F8(
	function (a, b, c, d, e, f, g, h) {
		return {ports: a, jobIdentifier: b, job: c, pausedChanging: d, buildsWithResources: e, currentPage: f, now: g, csrfToken: h};
	});
var _concourse$atc$BetaJob$BuildWithResources = F2(
	function (a, b) {
		return {build: a, resources: b};
	});
var _concourse$atc$BetaJob$Flags = F5(
	function (a, b, c, d, e) {
		return {jobName: a, teamName: b, pipelineName: c, paging: d, csrfToken: e};
	});
var _concourse$atc$BetaJob$SubscriptionTick = function (a) {
	return {ctor: 'SubscriptionTick', _0: a};
};
var _concourse$atc$BetaJob$NavTo = function (a) {
	return {ctor: 'NavTo', _0: a};
};
var _concourse$atc$BetaJob$viewPaginationBar = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('pagination fr'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: function () {
				var _p8 = model.buildsWithResources.pagination.previousPage;
				if (_p8.ctor === 'Nothing') {
					return A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('btn-page-link disabled'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('arrow'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$i,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('fa fa-arrow-left'),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						});
				} else {
					var jobUrl = _concourse$atc$Format$prependBeta(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'/teams/',
							A2(
								_elm_lang$core$Basics_ops['++'],
								model.jobIdentifier.teamName,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'/pipelines/',
									A2(
										_elm_lang$core$Basics_ops['++'],
										model.jobIdentifier.pipelineName,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'/jobs/',
											A2(
												_elm_lang$core$Basics_ops['++'],
												model.jobIdentifier.jobName,
												A2(
													_elm_lang$core$Basics_ops['++'],
													'?',
													_concourse$atc$BetaJob$paginationParam(_p8._0)))))))));
					return A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('btn-page-link'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('arrow'),
									_1: {
										ctor: '::',
										_0: _concourse$atc$StrictEvents$onLeftClick(
											_concourse$atc$BetaJob$NavTo(jobUrl)),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href(jobUrl),
											_1: {
												ctor: '::',
												_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-label', 'Previous Page'),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$i,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('fa fa-arrow-left'),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						});
				}
			}(),
			_1: {
				ctor: '::',
				_0: function () {
					var _p9 = model.buildsWithResources.pagination.nextPage;
					if (_p9.ctor === 'Nothing') {
						return A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('btn-page-link disabled'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('arrow'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$i,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('fa fa-arrow-right'),
												_1: {ctor: '[]'}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							});
					} else {
						var jobUrl = _concourse$atc$Format$prependBeta(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'/teams/',
								A2(
									_elm_lang$core$Basics_ops['++'],
									model.jobIdentifier.teamName,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'/pipelines/',
										A2(
											_elm_lang$core$Basics_ops['++'],
											model.jobIdentifier.pipelineName,
											A2(
												_elm_lang$core$Basics_ops['++'],
												'/jobs/',
												A2(
													_elm_lang$core$Basics_ops['++'],
													model.jobIdentifier.jobName,
													A2(
														_elm_lang$core$Basics_ops['++'],
														'?',
														_concourse$atc$BetaJob$paginationParam(_p9._0)))))))));
						return A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('btn-page-link'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('arrow'),
										_1: {
											ctor: '::',
											_0: _concourse$atc$StrictEvents$onLeftClick(
												_concourse$atc$BetaJob$NavTo(jobUrl)),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$href(jobUrl),
												_1: {
													ctor: '::',
													_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-label', 'Next Page'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$i,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('fa fa-arrow-right'),
												_1: {ctor: '[]'}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							});
					}
				}(),
				_1: {ctor: '[]'}
			}
		});
};
var _concourse$atc$BetaJob$viewBuildHeader = F2(
	function (model, b) {
		return A2(
			_elm_lang$html$Html$a,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					_concourse$atc$Concourse_BuildStatus$show(b.status)),
				_1: {
					ctor: '::',
					_0: _concourse$atc$StrictEvents$onLeftClick(
						_concourse$atc$BetaJob$NavTo(
							_concourse$atc$Format$prependBeta(
								_concourse$atc$Concourse_Build$url(b)))),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$href(
							_concourse$atc$Format$prependBeta(
								_concourse$atc$Concourse_Build$url(b))),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					A2(_elm_lang$core$Basics_ops['++'], '#', b.name)),
				_1: {ctor: '[]'}
			});
	});
var _concourse$atc$BetaJob$viewBuildWithResources = F2(
	function (model, bwr) {
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('js-build'),
				_1: {ctor: '[]'}
			},
			function () {
				var buildResourcesView = A2(_concourse$atc$BetaJob$viewBuildResources, model, bwr);
				return {
					ctor: '::',
					_0: A2(_concourse$atc$BetaJob$viewBuildHeader, model, bwr.build),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('pam clearfix'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(_concourse$atc$BuildDuration$view, bwr.build.duration, model.now),
								_1: buildResourcesView
							}),
						_1: {ctor: '[]'}
					}
				};
			}());
	});
var _concourse$atc$BetaJob$PausedToggled = function (a) {
	return {ctor: 'PausedToggled', _0: a};
};
var _concourse$atc$BetaJob$pauseJob = F2(
	function (jobIdentifier, csrfToken) {
		return A2(
			_elm_lang$core$Task$attempt,
			_concourse$atc$BetaJob$PausedToggled,
			A2(_concourse$atc$Concourse_Job$pause, jobIdentifier, csrfToken));
	});
var _concourse$atc$BetaJob$unpauseJob = F2(
	function (jobIdentifier, csrfToken) {
		return A2(
			_elm_lang$core$Task$attempt,
			_concourse$atc$BetaJob$PausedToggled,
			A2(_concourse$atc$Concourse_Job$unpause, jobIdentifier, csrfToken));
	});
var _concourse$atc$BetaJob$TogglePaused = {ctor: 'TogglePaused'};
var _concourse$atc$BetaJob$ClockTick = function (a) {
	return {ctor: 'ClockTick', _0: a};
};
var _concourse$atc$BetaJob$getCurrentTime = A2(_elm_lang$core$Task$perform, _concourse$atc$BetaJob$ClockTick, _elm_lang$core$Time$now);
var _concourse$atc$BetaJob$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: A2(_elm_lang$core$Time$every, 5 * _elm_lang$core$Time$second, _concourse$atc$BetaJob$SubscriptionTick),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Time$every, 1 * _elm_lang$core$Time$second, _concourse$atc$BetaJob$ClockTick),
				_1: {ctor: '[]'}
			}
		});
};
var _concourse$atc$BetaJob$BuildResourcesFetched = F2(
	function (a, b) {
		return {ctor: 'BuildResourcesFetched', _0: a, _1: b};
	});
var _concourse$atc$BetaJob$fetchBuildResources = function (buildIdentifier) {
	return A2(
		_elm_lang$core$Task$attempt,
		_concourse$atc$BetaJob$BuildResourcesFetched(buildIdentifier),
		_concourse$atc$Concourse_BuildResources$fetch(buildIdentifier));
};
var _concourse$atc$BetaJob$updateResourcesIfNeeded = function (bwr) {
	var _p10 = {
		ctor: '_Tuple2',
		_0: bwr.resources,
		_1: _concourse$atc$BetaJob$isRunning(bwr.build)
	};
	if (((_p10.ctor === '_Tuple2') && (_p10._0.ctor === 'Just')) && (_p10._1 === false)) {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			_concourse$atc$BetaJob$fetchBuildResources(bwr.build.id));
	}
};
var _concourse$atc$BetaJob$handleJobBuildsFetched = F2(
	function (paginatedBuilds, model) {
		var newBWRs = A2(_concourse$atc$BetaJob$setExistingResources, paginatedBuilds, model);
		var newPage = _concourse$atc$BetaJob$permalink(paginatedBuilds.content);
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{
					buildsWithResources: newBWRs,
					currentPage: _elm_lang$core$Maybe$Just(newPage)
				}),
			_1: _elm_lang$core$Platform_Cmd$batch(
				A2(_elm_lang$core$List$filterMap, _concourse$atc$BetaJob$updateResourcesIfNeeded, newBWRs.content))
		};
	});
var _concourse$atc$BetaJob$JobFetched = function (a) {
	return {ctor: 'JobFetched', _0: a};
};
var _concourse$atc$BetaJob$fetchJob = function (jobIdentifier) {
	return A2(
		_elm_lang$core$Task$attempt,
		_concourse$atc$BetaJob$JobFetched,
		_concourse$atc$Concourse_Job$fetchJob(jobIdentifier));
};
var _concourse$atc$BetaJob$JobBuildsFetched = function (a) {
	return {ctor: 'JobBuildsFetched', _0: a};
};
var _concourse$atc$BetaJob$fetchJobBuilds = F2(
	function (jobIdentifier, page) {
		return A2(
			_elm_lang$core$Task$attempt,
			_concourse$atc$BetaJob$JobBuildsFetched,
			A2(_concourse$atc$Concourse_Build$fetchJobBuilds, jobIdentifier, page));
	});
var _concourse$atc$BetaJob$changeToJob = F2(
	function (flags, model) {
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{
					currentPage: flags.paging,
					buildsWithResources: {
						content: {ctor: '[]'},
						pagination: {previousPage: _elm_lang$core$Maybe$Nothing, nextPage: _elm_lang$core$Maybe$Nothing}
					}
				}),
			_1: A2(_concourse$atc$BetaJob$fetchJobBuilds, model.jobIdentifier, flags.paging)
		};
	});
var _concourse$atc$BetaJob$init = F2(
	function (ports, flags) {
		var _p11 = A2(
			_concourse$atc$BetaJob$changeToJob,
			flags,
			{
				jobIdentifier: {jobName: flags.jobName, teamName: flags.teamName, pipelineName: flags.pipelineName},
				job: _krisajenkins$remotedata$RemoteData$NotAsked,
				pausedChanging: false,
				buildsWithResources: {
					content: {ctor: '[]'},
					pagination: {previousPage: _elm_lang$core$Maybe$Nothing, nextPage: _elm_lang$core$Maybe$Nothing}
				},
				now: 0,
				csrfToken: flags.csrfToken,
				currentPage: flags.paging,
				ports: ports
			});
		var model = _p11._0;
		var cmd = _p11._1;
		return {
			ctor: '_Tuple2',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$batch(
				{
					ctor: '::',
					_0: _concourse$atc$BetaJob$fetchJob(model.jobIdentifier),
					_1: {
						ctor: '::',
						_0: cmd,
						_1: {
							ctor: '::',
							_0: _concourse$atc$BetaJob$getCurrentTime,
							_1: {ctor: '[]'}
						}
					}
				})
		};
	});
var _concourse$atc$BetaJob$TriggerBuild = {ctor: 'TriggerBuild'};
var _concourse$atc$BetaJob$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('with-fixed-header'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: function () {
				var _p12 = _krisajenkins$remotedata$RemoteData$toMaybe(model.job);
				if (_p12.ctor === 'Nothing') {
					return _concourse$atc$BetaJob$loadSpinner;
				} else {
					var _p13 = _p12._0;
					return A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('fixed-header'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'build-header ',
											_concourse$atc$BetaJob$headerBuildStatusClass(_p13.finishedBuild))),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$button,
										A2(
											_elm_lang$core$List$append,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$id('job-state'),
												_1: {
													ctor: '::',
													_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-label', 'Toggle Job Paused State'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class(
															A2(
																_elm_lang$core$Basics_ops['++'],
																'btn-pause btn-large fl ',
																A2(_concourse$atc$BetaJob$getPausedState, _p13, model.pausedChanging))),
														_1: {ctor: '[]'}
													}
												}
											},
											(!model.pausedChanging) ? {
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(_concourse$atc$BetaJob$TogglePaused),
												_1: {ctor: '[]'}
											} : {ctor: '[]'}),
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$i,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class(
														A2(
															_elm_lang$core$Basics_ops['++'],
															'fa fa-fw fa-play ',
															A2(_concourse$atc$BetaJob$getPlayPauseLoadIcon, _p13, model.pausedChanging))),
													_1: {ctor: '[]'}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$form,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('trigger-build'),
												_1: {
													ctor: '::',
													_0: _concourse$atc$StrictEvents$onLeftClick(_concourse$atc$BetaJob$TriggerBuild),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$button,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('build-action fr'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$disabled(_p13.disableManualTrigger),
															_1: {
																ctor: '::',
																_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-label', 'Trigger Build'),
																_1: {
																	ctor: '::',
																	_0: A2(_elm_lang$html$Html_Attributes$attribute, 'title', 'Trigger Build'),
																	_1: {ctor: '[]'}
																}
															}
														}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$i,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('fa fa-plus-circle'),
																_1: {ctor: '[]'}
															},
															{ctor: '[]'}),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$h1,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(_p13.name),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('pagination-header'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _concourse$atc$BetaJob$viewPaginationBar(model),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$h1,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('builds'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							}
						});
				}
			}(),
			_1: {
				ctor: '::',
				_0: function () {
					var _p14 = model.buildsWithResources.content;
					if (_p14.ctor === '[]') {
						return _concourse$atc$BetaJob$loadSpinner;
					} else {
						return A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('scrollable-body job-body'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$ul,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('jobs-builds-list builds-list'),
										_1: {ctor: '[]'}
									},
									A2(
										_elm_lang$core$List$map,
										_concourse$atc$BetaJob$viewBuildWithResources(model),
										_p14)),
								_1: {ctor: '[]'}
							});
					}
				}(),
				_1: {ctor: '[]'}
			}
		});
};
var _concourse$atc$BetaJob$BuildTriggered = function (a) {
	return {ctor: 'BuildTriggered', _0: a};
};
var _concourse$atc$BetaJob$triggerBuild = F2(
	function (job, csrfToken) {
		return A2(
			_elm_lang$core$Task$attempt,
			_concourse$atc$BetaJob$BuildTriggered,
			A2(_concourse$atc$Concourse_Job$triggerBuild, job, csrfToken));
	});
var _concourse$atc$BetaJob$update = F2(
	function (action, model) {
		var _p15 = action;
		switch (_p15.ctor) {
			case 'Noop':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'TriggerBuild':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(_concourse$atc$BetaJob$triggerBuild, model.jobIdentifier, model.csrfToken)
				};
			case 'BuildTriggered':
				if (_p15._0.ctor === 'Ok') {
					var _p18 = _p15._0._0;
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: function () {
							var _p16 = _p18.job;
							if (_p16.ctor === 'Nothing') {
								return _elm_lang$core$Platform_Cmd$none;
							} else {
								var _p17 = _p16._0;
								return _elm_lang$navigation$Navigation$newUrl(
									_concourse$atc$Format$prependBeta(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'/teams/',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_p17.teamName,
												A2(
													_elm_lang$core$Basics_ops['++'],
													'/pipelines/',
													A2(
														_elm_lang$core$Basics_ops['++'],
														_p17.pipelineName,
														A2(
															_elm_lang$core$Basics_ops['++'],
															'/jobs/',
															A2(
																_elm_lang$core$Basics_ops['++'],
																_p17.jobName,
																A2(_elm_lang$core$Basics_ops['++'], '/builds/', _p18.name)))))))));
							}
						}()
					};
				} else {
					var _p19 = _p15._0._0;
					if (_p19.ctor === 'BadStatus') {
						return _elm_lang$core$Native_Utils.eq(_p19._0.status.code, 401) ? {
							ctor: '_Tuple2',
							_0: model,
							_1: _concourse$atc$LoginRedirect$requestLoginRedirect('')
						} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				}
			case 'JobBuildsFetched':
				if (_p15._0.ctor === 'Ok') {
					return A2(_concourse$atc$BetaJob$handleJobBuildsFetched, _p15._0._0, model);
				} else {
					var _p20 = _p15._0._0;
					if (_p20.ctor === 'BadStatus') {
						return _elm_lang$core$Native_Utils.eq(_p20._0.status.code, 401) ? {
							ctor: '_Tuple2',
							_0: model,
							_1: _concourse$atc$LoginRedirect$requestLoginRedirect('')
						} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				}
			case 'JobFetched':
				if (_p15._0.ctor === 'Ok') {
					var _p21 = _p15._0._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								job: _krisajenkins$remotedata$RemoteData$Success(_p21)
							}),
						_1: model.ports.title(
							A2(_elm_lang$core$Basics_ops['++'], _p21.name, ' - '))
					};
				} else {
					var _p24 = _p15._0._0;
					var _p22 = _p24;
					if (_p22.ctor === 'BadStatus') {
						var _p23 = _p22._0.status;
						return _elm_lang$core$Native_Utils.eq(_p23.code, 401) ? {
							ctor: '_Tuple2',
							_0: model,
							_1: _concourse$atc$LoginRedirect$requestLoginRedirect('')
						} : (_elm_lang$core$Native_Utils.eq(_p23.code, 404) ? {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									job: _krisajenkins$remotedata$RemoteData$Failure(_p24)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none});
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				}
			case 'BuildResourcesFetched':
				if (_p15._1.ctor === 'Ok') {
					var _p25 = model.buildsWithResources.content;
					if (_p25.ctor === '[]') {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						var bwrs = model.buildsWithResources;
						var transformer = function (bwr) {
							var bwrb = bwr.build;
							return _elm_lang$core$Native_Utils.eq(bwr.build.id, _p15._0) ? _elm_lang$core$Native_Utils.update(
								bwr,
								{
									resources: _elm_lang$core$Maybe$Just(_p15._1._0)
								}) : bwr;
						};
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									buildsWithResources: _elm_lang$core$Native_Utils.update(
										bwrs,
										{
											content: A2(_elm_lang$core$List$map, transformer, _p25)
										})
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'ClockTick':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{now: _p15._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'TogglePaused':
				var _p26 = _krisajenkins$remotedata$RemoteData$toMaybe(model.job);
				if (_p26.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					var _p27 = _p26._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								pausedChanging: true,
								job: _krisajenkins$remotedata$RemoteData$Success(
									_elm_lang$core$Native_Utils.update(
										_p27,
										{paused: !_p27.paused}))
							}),
						_1: _p27.paused ? A2(_concourse$atc$BetaJob$unpauseJob, model.jobIdentifier, model.csrfToken) : A2(_concourse$atc$BetaJob$pauseJob, model.jobIdentifier, model.csrfToken)
					};
				}
			case 'PausedToggled':
				if (_p15._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{pausedChanging: false}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p28 = _p15._0._0;
					if (_p28.ctor === 'BadStatus') {
						return _elm_lang$core$Native_Utils.eq(_p28._0.status.code, 401) ? {
							ctor: '_Tuple2',
							_0: model,
							_1: _concourse$atc$LoginRedirect$requestLoginRedirect('')
						} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				}
			case 'NavTo':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _elm_lang$navigation$Navigation$newUrl(_p15._0)
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: A2(_concourse$atc$BetaJob$fetchJobBuilds, model.jobIdentifier, model.currentPage),
							_1: {
								ctor: '::',
								_0: _concourse$atc$BetaJob$fetchJob(model.jobIdentifier),
								_1: {ctor: '[]'}
							}
						})
				};
		}
	});
var _concourse$atc$BetaJob$updateWithMessage = F2(
	function (message, model) {
		var _p29 = A2(_concourse$atc$BetaJob$update, message, model);
		var mdl = _p29._0;
		var msg = _p29._1;
		var _p30 = mdl.job;
		if (_p30.ctor === 'Failure') {
			return {
				ctor: '_Tuple3',
				_0: mdl,
				_1: msg,
				_2: _elm_lang$core$Maybe$Just(_concourse$atc$UpdateMsg$NotFound)
			};
		} else {
			return {ctor: '_Tuple3', _0: mdl, _1: msg, _2: _elm_lang$core$Maybe$Nothing};
		}
	});
var _concourse$atc$BetaJob$Noop = {ctor: 'Noop'};

var _concourse$atc$BetaRoutes$createPageFromSearch = function (search) {
	var q = _Bogdanp$elm_querystring$QueryString$parse(search);
	var until = A3(_Bogdanp$elm_querystring$QueryString$one, _Bogdanp$elm_querystring$QueryString$int, 'until', q);
	var since = A3(_Bogdanp$elm_querystring$QueryString$one, _Bogdanp$elm_querystring$QueryString$int, 'since', q);
	var limit = A2(
		_elm_lang$core$Maybe$withDefault,
		100,
		A3(_Bogdanp$elm_querystring$QueryString$one, _Bogdanp$elm_querystring$QueryString$int, 'limit', q));
	var _p0 = {ctor: '_Tuple2', _0: since, _1: until};
	_v0_2:
	do {
		if (_p0.ctor === '_Tuple2') {
			if (_p0._0.ctor === 'Nothing') {
				if (_p0._1.ctor === 'Just') {
					return _elm_lang$core$Maybe$Just(
						{
							direction: _concourse$atc$Concourse_Pagination$Until(_p0._1._0),
							limit: limit
						});
				} else {
					break _v0_2;
				}
			} else {
				if (_p0._1.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Just(
						{
							direction: _concourse$atc$Concourse_Pagination$Since(_p0._0._0),
							limit: limit
						});
				} else {
					break _v0_2;
				}
			}
		} else {
			break _v0_2;
		}
	} while(false);
	return _elm_lang$core$Maybe$Nothing;
};
var _concourse$atc$BetaRoutes$ConcourseRoute = F4(
	function (a, b, c, d) {
		return {logical: a, queries: b, page: c, hash: d};
	});
var _concourse$atc$BetaRoutes$BetaTeamLogin = function (a) {
	return {ctor: 'BetaTeamLogin', _0: a};
};
var _concourse$atc$BetaRoutes$betaTeamLogin = A2(
	_Bogdanp$elm_route$Route_ops[':='],
	_concourse$atc$BetaRoutes$BetaTeamLogin,
	A2(
		_Bogdanp$elm_route$Route_ops['</>'],
		A2(
			_Bogdanp$elm_route$Route_ops['</>'],
			A2(
				_Bogdanp$elm_route$Route_ops['</>'],
				_Bogdanp$elm_route$Route$static('beta'),
				_Bogdanp$elm_route$Route$static('teams')),
			_Bogdanp$elm_route$Route$string),
		_Bogdanp$elm_route$Route$static('login')));
var _concourse$atc$BetaRoutes$BetaSelectTeam = {ctor: 'BetaSelectTeam'};
var _concourse$atc$BetaRoutes$betaLogin = A2(
	_Bogdanp$elm_route$Route_ops[':='],
	_concourse$atc$BetaRoutes$BetaSelectTeam,
	A2(
		_Bogdanp$elm_route$Route_ops['</>'],
		_Bogdanp$elm_route$Route$static('beta'),
		_Bogdanp$elm_route$Route$static('login')));
var _concourse$atc$BetaRoutes$BetaJob = F3(
	function (a, b, c) {
		return {ctor: 'BetaJob', _0: a, _1: b, _2: c};
	});
var _concourse$atc$BetaRoutes$betaJob = A2(
	_Bogdanp$elm_route$Route_ops[':='],
	_concourse$atc$BetaRoutes$BetaJob,
	A2(
		_Bogdanp$elm_route$Route_ops['</>'],
		A2(
			_Bogdanp$elm_route$Route_ops['</>'],
			A2(
				_Bogdanp$elm_route$Route_ops['</>'],
				A2(
					_Bogdanp$elm_route$Route_ops['</>'],
					A2(
						_Bogdanp$elm_route$Route_ops['</>'],
						A2(
							_Bogdanp$elm_route$Route_ops['</>'],
							_Bogdanp$elm_route$Route$static('beta'),
							_Bogdanp$elm_route$Route$static('teams')),
						_Bogdanp$elm_route$Route$string),
					_Bogdanp$elm_route$Route$static('pipelines')),
				_Bogdanp$elm_route$Route$string),
			_Bogdanp$elm_route$Route$static('jobs')),
		_Bogdanp$elm_route$Route$string));
var _concourse$atc$BetaRoutes$BetaResource = F3(
	function (a, b, c) {
		return {ctor: 'BetaResource', _0: a, _1: b, _2: c};
	});
var _concourse$atc$BetaRoutes$betaResource = A2(
	_Bogdanp$elm_route$Route_ops[':='],
	_concourse$atc$BetaRoutes$BetaResource,
	A2(
		_Bogdanp$elm_route$Route_ops['</>'],
		A2(
			_Bogdanp$elm_route$Route_ops['</>'],
			A2(
				_Bogdanp$elm_route$Route_ops['</>'],
				A2(
					_Bogdanp$elm_route$Route_ops['</>'],
					A2(
						_Bogdanp$elm_route$Route_ops['</>'],
						A2(
							_Bogdanp$elm_route$Route_ops['</>'],
							_Bogdanp$elm_route$Route$static('beta'),
							_Bogdanp$elm_route$Route$static('teams')),
						_Bogdanp$elm_route$Route$string),
					_Bogdanp$elm_route$Route$static('pipelines')),
				_Bogdanp$elm_route$Route$string),
			_Bogdanp$elm_route$Route$static('resources')),
		_Bogdanp$elm_route$Route$string));
var _concourse$atc$BetaRoutes$BetaOneOffBuild = function (a) {
	return {ctor: 'BetaOneOffBuild', _0: a};
};
var _concourse$atc$BetaRoutes$betaOneOffBuild = A2(
	_Bogdanp$elm_route$Route_ops[':='],
	_concourse$atc$BetaRoutes$BetaOneOffBuild,
	A2(
		_Bogdanp$elm_route$Route_ops['</>'],
		A2(
			_Bogdanp$elm_route$Route_ops['</>'],
			_Bogdanp$elm_route$Route$static('beta'),
			_Bogdanp$elm_route$Route$static('builds')),
		_Bogdanp$elm_route$Route$string));
var _concourse$atc$BetaRoutes$BetaBuild = F4(
	function (a, b, c, d) {
		return {ctor: 'BetaBuild', _0: a, _1: b, _2: c, _3: d};
	});
var _concourse$atc$BetaRoutes$betaBuild = A2(
	_Bogdanp$elm_route$Route_ops[':='],
	_concourse$atc$BetaRoutes$BetaBuild,
	A2(
		_Bogdanp$elm_route$Route_ops['</>'],
		A2(
			_Bogdanp$elm_route$Route_ops['</>'],
			A2(
				_Bogdanp$elm_route$Route_ops['</>'],
				A2(
					_Bogdanp$elm_route$Route_ops['</>'],
					A2(
						_Bogdanp$elm_route$Route_ops['</>'],
						A2(
							_Bogdanp$elm_route$Route_ops['</>'],
							A2(
								_Bogdanp$elm_route$Route_ops['</>'],
								A2(
									_Bogdanp$elm_route$Route_ops['</>'],
									_Bogdanp$elm_route$Route$static('beta'),
									_Bogdanp$elm_route$Route$static('teams')),
								_Bogdanp$elm_route$Route$string),
							_Bogdanp$elm_route$Route$static('pipelines')),
						_Bogdanp$elm_route$Route$string),
					_Bogdanp$elm_route$Route$static('jobs')),
				_Bogdanp$elm_route$Route$string),
			_Bogdanp$elm_route$Route$static('builds')),
		_Bogdanp$elm_route$Route$string));
var _concourse$atc$BetaRoutes$BetaPipeline = F2(
	function (a, b) {
		return {ctor: 'BetaPipeline', _0: a, _1: b};
	});
var _concourse$atc$BetaRoutes$betaPipeline = A2(
	_Bogdanp$elm_route$Route_ops[':='],
	_concourse$atc$BetaRoutes$BetaPipeline,
	A2(
		_Bogdanp$elm_route$Route_ops['</>'],
		A2(
			_Bogdanp$elm_route$Route_ops['</>'],
			A2(
				_Bogdanp$elm_route$Route_ops['</>'],
				A2(
					_Bogdanp$elm_route$Route_ops['</>'],
					_Bogdanp$elm_route$Route$static('beta'),
					_Bogdanp$elm_route$Route$static('teams')),
				_Bogdanp$elm_route$Route$string),
			_Bogdanp$elm_route$Route$static('pipelines')),
		_Bogdanp$elm_route$Route$string));
var _concourse$atc$BetaRoutes$Dashboard = {ctor: 'Dashboard'};
var _concourse$atc$BetaRoutes$dashboard = A2(
	_Bogdanp$elm_route$Route_ops[':='],
	_concourse$atc$BetaRoutes$Dashboard,
	A2(
		_Bogdanp$elm_route$Route_ops['</>'],
		_Bogdanp$elm_route$Route$static('beta'),
		_Bogdanp$elm_route$Route$static('dashboard')));
var _concourse$atc$BetaRoutes$toString = function (route) {
	var _p1 = route;
	switch (_p1.ctor) {
		case 'Dashboard':
			return A2(
				_Bogdanp$elm_route$Route$reverse,
				_concourse$atc$BetaRoutes$dashboard,
				{ctor: '[]'});
		case 'BetaPipeline':
			return A2(
				_Bogdanp$elm_route$Route$reverse,
				_concourse$atc$BetaRoutes$betaPipeline,
				{
					ctor: '::',
					_0: _p1._0,
					_1: {
						ctor: '::',
						_0: _p1._1,
						_1: {ctor: '[]'}
					}
				});
		case 'BetaBuild':
			return A2(
				_Bogdanp$elm_route$Route$reverse,
				_concourse$atc$BetaRoutes$betaBuild,
				{
					ctor: '::',
					_0: _p1._0,
					_1: {
						ctor: '::',
						_0: _p1._1,
						_1: {
							ctor: '::',
							_0: _p1._2,
							_1: {
								ctor: '::',
								_0: _p1._3,
								_1: {ctor: '[]'}
							}
						}
					}
				});
		case 'BetaOneOffBuild':
			return A2(
				_Bogdanp$elm_route$Route$reverse,
				_concourse$atc$BetaRoutes$betaOneOffBuild,
				{
					ctor: '::',
					_0: _p1._0,
					_1: {ctor: '[]'}
				});
		case 'BetaResource':
			return A2(
				_Bogdanp$elm_route$Route$reverse,
				_concourse$atc$BetaRoutes$betaJob,
				{
					ctor: '::',
					_0: _p1._0,
					_1: {
						ctor: '::',
						_0: _p1._1,
						_1: {
							ctor: '::',
							_0: _p1._2,
							_1: {ctor: '[]'}
						}
					}
				});
		case 'BetaJob':
			return A2(
				_Bogdanp$elm_route$Route$reverse,
				_concourse$atc$BetaRoutes$betaJob,
				{
					ctor: '::',
					_0: _p1._0,
					_1: {
						ctor: '::',
						_0: _p1._1,
						_1: {
							ctor: '::',
							_0: _p1._2,
							_1: {ctor: '[]'}
						}
					}
				});
		case 'BetaSelectTeam':
			return A2(
				_Bogdanp$elm_route$Route$reverse,
				_concourse$atc$BetaRoutes$betaLogin,
				{ctor: '[]'});
		case 'BetaTeamLogin':
			return A2(
				_Bogdanp$elm_route$Route$reverse,
				_concourse$atc$BetaRoutes$betaTeamLogin,
				{
					ctor: '::',
					_0: _p1._0,
					_1: {ctor: '[]'}
				});
		default:
			return '/beta';
	}
};
var _concourse$atc$BetaRoutes$customToString = function (route) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_concourse$atc$BetaRoutes$toString(route.logical),
		_Bogdanp$elm_querystring$QueryString$render(route.queries));
};
var _concourse$atc$BetaRoutes$navigateTo = function (_p2) {
	return _elm_lang$navigation$Navigation$newUrl(
		_concourse$atc$BetaRoutes$toString(_p2));
};
var _concourse$atc$BetaRoutes$BetaHome = {ctor: 'BetaHome'};
var _concourse$atc$BetaRoutes$betaHome = A2(
	_Bogdanp$elm_route$Route_ops[':='],
	_concourse$atc$BetaRoutes$BetaHome,
	_Bogdanp$elm_route$Route$static('beta'));
var _concourse$atc$BetaRoutes$sitemap = _Bogdanp$elm_route$Route$router(
	{
		ctor: '::',
		_0: _concourse$atc$BetaRoutes$dashboard,
		_1: {
			ctor: '::',
			_0: _concourse$atc$BetaRoutes$betaPipeline,
			_1: {
				ctor: '::',
				_0: _concourse$atc$BetaRoutes$betaBuild,
				_1: {
					ctor: '::',
					_0: _concourse$atc$BetaRoutes$betaOneOffBuild,
					_1: {
						ctor: '::',
						_0: _concourse$atc$BetaRoutes$betaResource,
						_1: {
							ctor: '::',
							_0: _concourse$atc$BetaRoutes$betaJob,
							_1: {
								ctor: '::',
								_0: _concourse$atc$BetaRoutes$betaLogin,
								_1: {
									ctor: '::',
									_0: _concourse$atc$BetaRoutes$betaTeamLogin,
									_1: {
										ctor: '::',
										_0: _concourse$atc$BetaRoutes$betaHome,
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _concourse$atc$BetaRoutes$match = function (_p3) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		_concourse$atc$BetaRoutes$BetaHome,
		A2(_Bogdanp$elm_route$Route$match, _concourse$atc$BetaRoutes$sitemap, _p3));
};
var _concourse$atc$BetaRoutes$parsePath = function (location) {
	return {
		logical: _concourse$atc$BetaRoutes$match(location.pathname),
		queries: A2(
			_Bogdanp$elm_querystring$QueryString$remove,
			'csrf_token',
			_Bogdanp$elm_querystring$QueryString$parse(location.search)),
		page: _concourse$atc$BetaRoutes$createPageFromSearch(location.search),
		hash: location.hash
	};
};

var _concourse$atc$NotFound$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('notfound'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('title'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('404'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('reason'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('this page was not found'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$img,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src(model.notFoundImgSrc),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('help-message'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Not to worry, you can head'),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$br,
										{ctor: '[]'},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text('back to the '),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$a,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$href('/'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('home page'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _concourse$atc$NotFound$Model = function (a) {
	return {notFoundImgSrc: a};
};

var _concourse$atc$Concourse_Pipeline$putAction = F4(
	function (action, teamName, pipelineName, csrfToken) {
		return _elm_lang$http$Http$toTask(
			_elm_lang$http$Http$request(
				{
					method: 'PUT',
					url: A2(
						_elm_lang$core$Basics_ops['++'],
						'/api/v1/teams/',
						A2(
							_elm_lang$core$Basics_ops['++'],
							teamName,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'/pipelines/',
								A2(
									_elm_lang$core$Basics_ops['++'],
									pipelineName,
									A2(_elm_lang$core$Basics_ops['++'], '/', action))))),
					headers: {
						ctor: '::',
						_0: A2(_elm_lang$http$Http$header, _concourse$atc$Concourse$csrfTokenHeaderName, csrfToken),
						_1: {ctor: '[]'}
					},
					expect: _elm_lang$http$Http$expectStringResponse(
						_elm_lang$core$Basics$always(
							_elm_lang$core$Result$Ok(
								{ctor: '_Tuple0'}))),
					body: _elm_lang$http$Http$emptyBody,
					timeout: _elm_lang$core$Maybe$Nothing,
					withCredentials: false
				}));
	});
var _concourse$atc$Concourse_Pipeline$unpause = _concourse$atc$Concourse_Pipeline$putAction('unpause');
var _concourse$atc$Concourse_Pipeline$pause = _concourse$atc$Concourse_Pipeline$putAction('pause');
var _concourse$atc$Concourse_Pipeline$fetchPipelines = _elm_lang$http$Http$toTask(
	A2(
		_elm_lang$http$Http$get,
		'/api/v1/pipelines',
		_elm_lang$core$Json_Decode$list(_concourse$atc$Concourse$decodePipeline)));
var _concourse$atc$Concourse_Pipeline$fetchPipeline = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$http$Http$toTask(
		A2(
			_elm_lang$http$Http$get,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'/api/v1/teams/',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_p1.teamName,
					A2(_elm_lang$core$Basics_ops['++'], '/pipelines/', _p1.pipelineName))),
			_concourse$atc$Concourse$decodePipeline));
};
var _concourse$atc$Concourse_Pipeline$order = F3(
	function (teamName, pipelineNames, csrfToken) {
		return _elm_lang$http$Http$toTask(
			_elm_lang$http$Http$request(
				{
					method: 'PUT',
					url: A2(
						_elm_lang$core$Basics_ops['++'],
						'/api/v1/teams/',
						A2(_elm_lang$core$Basics_ops['++'], teamName, '/pipelines/ordering')),
					headers: {
						ctor: '::',
						_0: A2(_elm_lang$http$Http$header, _concourse$atc$Concourse$csrfTokenHeaderName, csrfToken),
						_1: {ctor: '[]'}
					},
					expect: _elm_lang$http$Http$expectStringResponse(
						_elm_lang$core$Basics$always(
							_elm_lang$core$Result$Ok(
								{ctor: '_Tuple0'}))),
					body: _elm_lang$http$Http$jsonBody(
						_elm_lang$core$Json_Encode$list(
							A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$string, pipelineNames))),
					timeout: _elm_lang$core$Maybe$Nothing,
					withCredentials: false
				}));
	});

var _fapian$elm_html_aria$Html_Attributes_Aria$role = _elm_lang$html$Html_Attributes$attribute('role');
var _fapian$elm_html_aria$Html_Attributes_Aria$ariaSelected = _elm_lang$html$Html_Attributes$attribute('aria-selected');
var _fapian$elm_html_aria$Html_Attributes_Aria$ariaLive = _elm_lang$html$Html_Attributes$attribute('aria-live');
var _fapian$elm_html_aria$Html_Attributes_Aria$ariaLabelledby = _elm_lang$html$Html_Attributes$attribute('aria-labelledby');
var _fapian$elm_html_aria$Html_Attributes_Aria$ariaLabel = _elm_lang$html$Html_Attributes$attribute('aria-label');
var _fapian$elm_html_aria$Html_Attributes_Aria$ariaExpanded = _elm_lang$html$Html_Attributes$attribute('aria-expanded');
var _fapian$elm_html_aria$Html_Attributes_Aria$ariaDescribedby = _elm_lang$html$Html_Attributes$attribute('aria-describedby');
var _fapian$elm_html_aria$Html_Attributes_Aria$ariaChecked = _elm_lang$html$Html_Attributes$attribute('aria-checked');
var _fapian$elm_html_aria$Html_Attributes_Aria$ariaActiveDescendant = _elm_lang$html$Html_Attributes$attribute('aria-activedescendant');
var _fapian$elm_html_aria$Html_Attributes_Aria$boolAttribute = F2(
	function (name, val) {
		return A2(
			_elm_lang$html$Html_Attributes$attribute,
			name,
			A2(
				_elm_lang$core$Json_Encode$encode,
				0,
				_elm_lang$core$Json_Encode$bool(val)));
	});
var _fapian$elm_html_aria$Html_Attributes_Aria$ariaDisabled = _fapian$elm_html_aria$Html_Attributes_Aria$boolAttribute('aria-disabled');
var _fapian$elm_html_aria$Html_Attributes_Aria$ariaHidden = _fapian$elm_html_aria$Html_Attributes_Aria$boolAttribute('aria-hidden');
var _fapian$elm_html_aria$Html_Attributes_Aria$ariaPressed = _fapian$elm_html_aria$Html_Attributes_Aria$boolAttribute('aria-pressed');
var _fapian$elm_html_aria$Html_Attributes_Aria$ariaReadonly = _fapian$elm_html_aria$Html_Attributes_Aria$boolAttribute('aria-readonly');
var _fapian$elm_html_aria$Html_Attributes_Aria$ariaRequired = _fapian$elm_html_aria$Html_Attributes_Aria$boolAttribute('aria-required');

var _concourse$atc$Concourse_Cli$downloadUrl = F2(
	function (arch, platform) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'/api/v1/cli?arch=',
			A2(
				_elm_lang$core$Basics_ops['++'],
				arch,
				A2(_elm_lang$core$Basics_ops['++'], '&platform=', platform)));
	});

var _concourse$atc$NoPipeline$view = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('display-in-middle'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('h1'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('no pipelines configured'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h3,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('first, download the CLI tools:'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$ul,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('cli-downloads'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$li,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$href(
											A2(_concourse$atc$Concourse_Cli$downloadUrl, 'amd64', 'darwin')),
										_1: {
											ctor: '::',
											_0: _fapian$elm_html_aria$Html_Attributes_Aria$ariaLabel('Download OS X CLI'),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$i,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('fa fa-apple fa-5x'),
												_1: {ctor: '[]'}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$li,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href(
												A2(_concourse$atc$Concourse_Cli$downloadUrl, 'amd64', 'windows')),
											_1: {
												ctor: '::',
												_0: _fapian$elm_html_aria$Html_Attributes_Aria$ariaLabel('Download Windows CLI'),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$i,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('fa fa-windows fa-5x'),
													_1: {ctor: '[]'}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$li,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$href(
													A2(_concourse$atc$Concourse_Cli$downloadUrl, 'amd64', 'linux')),
												_1: {
													ctor: '::',
													_0: _fapian$elm_html_aria$Html_Attributes_Aria$ariaLabel('Download Linux CLI'),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$i,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('fa fa-linux fa-5x'),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$h3,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('then, use `'),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('ansi-blue-fg'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$target('_blank'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$href('https://concourse.ci/fly-set-pipeline.html'),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('fly set-pipeline'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text('` to set up your new pipeline'),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _concourse$atc$NoPipeline$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _concourse$atc$NoPipeline$subscriptions = A2(_elm_lang$core$Time$every, 10 * _elm_lang$core$Time$second, _concourse$atc$NoPipeline$Tick);

var _concourse$atc$Concourse_Info$fetch = _elm_lang$http$Http$toTask(
	A2(_elm_lang$http$Http$get, '/api/v1/info', _concourse$atc$Concourse$decodeInfo));

var _concourse$atc$Concourse_PipelineStatus$isRunning = function (status) {
	var _p0 = status;
	switch (_p0.ctor) {
		case 'PipelineStatusPending':
			return true;
		case 'PipelineStatusRunning':
			return true;
		default:
			return false;
	}
};
var _concourse$atc$Concourse_PipelineStatus$show = function (status) {
	var _p1 = status;
	switch (_p1.ctor) {
		case 'PipelineStatusAborted':
			return 'aborted';
		case 'PipelineStatusErrored':
			return 'errored';
		case 'PipelineStatusFailed':
			return 'failed';
		case 'PipelineStatusPaused':
			return 'paused';
		case 'PipelineStatusPending':
			return 'pending';
		case 'PipelineStatusRunning':
			return 'running';
		default:
			return 'succeeded';
	}
};

var _concourse$atc$DashboardPreview$jobDepths = F2(
	function (jobs, dict) {
		jobDepths:
		while (true) {
			var _p0 = jobs;
			if (_p0.ctor === '[]') {
				return dict;
			} else {
				var _p3 = _p0._1;
				var _p2 = _p0._0;
				var passedJobs = A2(
					_elm_lang$core$List$concatMap,
					function (_) {
						return _.passed;
					},
					_p2.inputs);
				var _p1 = _elm_lang$core$List$length(passedJobs);
				if (_p1 === 0) {
					var _v2 = _p3,
						_v3 = A3(_elm_lang$core$Dict$insert, _p2.name, 0, dict);
					jobs = _v2;
					dict = _v3;
					continue jobDepths;
				} else {
					var passedJobDepths = A2(
						_elm_lang$core$List$map,
						function (passedJob) {
							return A2(_elm_lang$core$Dict$get, passedJob, dict);
						},
						passedJobs);
					if (A2(_elm_lang$core$List$member, _elm_lang$core$Maybe$Nothing, passedJobDepths)) {
						var _v4 = A2(
							_elm_lang$core$List$append,
							_p3,
							{
								ctor: '::',
								_0: _p2,
								_1: {ctor: '[]'}
							}),
							_v5 = dict;
						jobs = _v4;
						dict = _v5;
						continue jobDepths;
					} else {
						var depths = A2(
							_elm_lang$core$List$map,
							function (depth) {
								return A2(_elm_lang$core$Maybe$withDefault, 0, depth);
							},
							passedJobDepths);
						var maxPassedJobDepth = A2(
							_elm_lang$core$Maybe$withDefault,
							0,
							_elm_lang$core$List$maximum(depths));
						var _v6 = _p3,
							_v7 = A3(_elm_lang$core$Dict$insert, _p2.name, maxPassedJobDepth + 1, dict);
						jobs = _v6;
						dict = _v7;
						continue jobDepths;
					}
				}
			}
		}
	});
var _concourse$atc$DashboardPreview$jobByName = F2(
	function (jobs, job) {
		var _p4 = A2(_elm_lang$core$Dict$get, job, jobs);
		if (_p4.ctor === 'Just') {
			return _p4._0;
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'DashboardPreview',
				{
					start: {line: 99, column: 5},
					end: {line: 104, column: 37}
				},
				_p4)('impossible');
		}
	});
var _concourse$atc$DashboardPreview$jobGroups = function (jobs) {
	var jobLookup = _concourse$atc$DashboardPreview$jobByName(
		A3(
			_elm_lang$core$List$foldl,
			F2(
				function (job, byName) {
					return A3(_elm_lang$core$Dict$insert, job.name, job, byName);
				}),
			_elm_lang$core$Dict$empty,
			jobs));
	return A3(
		_elm_lang$core$Dict$foldl,
		F3(
			function (jobName, depth, byDepth) {
				return A3(
					_elm_lang$core$Dict$update,
					depth,
					function (jobsA) {
						return _elm_lang$core$Maybe$Just(
							{
								ctor: '::',
								_0: jobLookup(jobName),
								_1: A2(
									_elm_lang$core$Maybe$withDefault,
									{ctor: '[]'},
									jobsA)
							});
					},
					byDepth);
			}),
		_elm_lang$core$Dict$empty,
		A2(_concourse$atc$DashboardPreview$jobDepths, jobs, _elm_lang$core$Dict$empty));
};
var _concourse$atc$DashboardPreview$viewJob = function (job) {
	var latestBuild = _elm_lang$core$Native_Utils.eq(job.nextBuild, _elm_lang$core$Maybe$Nothing) ? job.finishedBuild : job.nextBuild;
	var isJobRunning = A2(
		F2(
			function (x, y) {
				return !_elm_lang$core$Native_Utils.eq(x, y);
			}),
		job.nextBuild,
		_elm_lang$core$Maybe$Nothing);
	var jobStatus = function () {
		var _p6 = job.finishedBuild;
		if (_p6.ctor === 'Just') {
			return _concourse$atc$Concourse_BuildStatus$show(_p6._0.status);
		} else {
			return 'no-builds';
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$classList(
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: A2(_elm_lang$core$Basics_ops['++'], 'node ', jobStatus),
						_1: true
					},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'running', _1: isJobRunning},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'paused', _1: job.paused},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'data-tooltip', job.name),
				_1: {ctor: '[]'}
			}
		},
		function () {
			var _p7 = latestBuild;
			if (_p7.ctor === 'Nothing') {
				return {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(
								_concourse$atc$Format$prependBeta(job.url)),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(''),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				};
			} else {
				return {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(
								_concourse$atc$Format$prependBeta(_p7._0.url)),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(''),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				};
			}
		}());
};
var _concourse$atc$DashboardPreview$view = function (jobs) {
	var groups = _concourse$atc$DashboardPreview$jobGroups(jobs);
	var width = _elm_lang$core$Dict$size(groups);
	var height = A2(
		_elm_lang$core$Maybe$withDefault,
		0,
		_elm_lang$core$List$maximum(
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$List$length,
				_elm_lang$core$Dict$values(groups))));
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$classList(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'pipeline-grid', _1: true},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'pipeline-grid-wide',
							_1: _elm_lang$core$Native_Utils.cmp(width, 12) > 0
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'pipeline-grid-tall',
								_1: _elm_lang$core$Native_Utils.cmp(height, 12) > 0
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'pipeline-grid-super-wide',
									_1: _elm_lang$core$Native_Utils.cmp(width, 24) > 0
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'pipeline-grid-super-tall',
										_1: _elm_lang$core$Native_Utils.cmp(height, 24) > 0
									},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$List$map,
			function (jobs) {
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('parallel-grid'),
						_1: {ctor: '[]'}
					},
					A2(_elm_lang$core$List$map, _concourse$atc$DashboardPreview$viewJob, jobs));
			},
			_elm_lang$core$Dict$values(groups)));
};

var _elm_lang$mouse$Mouse_ops = _elm_lang$mouse$Mouse_ops || {};
_elm_lang$mouse$Mouse_ops['&>'] = F2(
	function (t1, t2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p0) {
				return t2;
			},
			t1);
	});
var _elm_lang$mouse$Mouse$onSelfMsg = F3(
	function (router, _p1, state) {
		var _p2 = _p1;
		var _p3 = A2(_elm_lang$core$Dict$get, _p2.category, state);
		if (_p3.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var send = function (tagger) {
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					tagger(_p2.position));
			};
			return A2(
				_elm_lang$mouse$Mouse_ops['&>'],
				_elm_lang$core$Task$sequence(
					A2(_elm_lang$core$List$map, send, _p3._0.taggers)),
				_elm_lang$core$Task$succeed(state));
		}
	});
var _elm_lang$mouse$Mouse$init = _elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty);
var _elm_lang$mouse$Mouse$categorizeHelpHelp = F2(
	function (value, maybeValues) {
		var _p4 = maybeValues;
		if (_p4.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Just(
				{
					ctor: '::',
					_0: value,
					_1: {ctor: '[]'}
				});
		} else {
			return _elm_lang$core$Maybe$Just(
				{ctor: '::', _0: value, _1: _p4._0});
		}
	});
var _elm_lang$mouse$Mouse$categorizeHelp = F2(
	function (subs, subDict) {
		categorizeHelp:
		while (true) {
			var _p5 = subs;
			if (_p5.ctor === '[]') {
				return subDict;
			} else {
				var _v4 = _p5._1,
					_v5 = A3(
					_elm_lang$core$Dict$update,
					_p5._0._0,
					_elm_lang$mouse$Mouse$categorizeHelpHelp(_p5._0._1),
					subDict);
				subs = _v4;
				subDict = _v5;
				continue categorizeHelp;
			}
		}
	});
var _elm_lang$mouse$Mouse$categorize = function (subs) {
	return A2(_elm_lang$mouse$Mouse$categorizeHelp, subs, _elm_lang$core$Dict$empty);
};
var _elm_lang$mouse$Mouse$subscription = _elm_lang$core$Native_Platform.leaf('Mouse');
var _elm_lang$mouse$Mouse$Position = F2(
	function (a, b) {
		return {x: a, y: b};
	});
var _elm_lang$mouse$Mouse$position = A3(
	_elm_lang$core$Json_Decode$map2,
	_elm_lang$mouse$Mouse$Position,
	A2(_elm_lang$core$Json_Decode$field, 'pageX', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'pageY', _elm_lang$core$Json_Decode$int));
var _elm_lang$mouse$Mouse$Watcher = F2(
	function (a, b) {
		return {taggers: a, pid: b};
	});
var _elm_lang$mouse$Mouse$Msg = F2(
	function (a, b) {
		return {category: a, position: b};
	});
var _elm_lang$mouse$Mouse$onEffects = F3(
	function (router, newSubs, oldState) {
		var rightStep = F3(
			function (category, taggers, task) {
				var tracker = A3(
					_elm_lang$dom$Dom_LowLevel$onDocument,
					category,
					_elm_lang$mouse$Mouse$position,
					function (_p6) {
						return A2(
							_elm_lang$core$Platform$sendToSelf,
							router,
							A2(_elm_lang$mouse$Mouse$Msg, category, _p6));
					});
				return A2(
					_elm_lang$core$Task$andThen,
					function (state) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (pid) {
								return _elm_lang$core$Task$succeed(
									A3(
										_elm_lang$core$Dict$insert,
										category,
										A2(_elm_lang$mouse$Mouse$Watcher, taggers, pid),
										state));
							},
							_elm_lang$core$Process$spawn(tracker));
					},
					task);
			});
		var bothStep = F4(
			function (category, _p7, taggers, task) {
				var _p8 = _p7;
				return A2(
					_elm_lang$core$Task$andThen,
					function (state) {
						return _elm_lang$core$Task$succeed(
							A3(
								_elm_lang$core$Dict$insert,
								category,
								A2(_elm_lang$mouse$Mouse$Watcher, taggers, _p8.pid),
								state));
					},
					task);
			});
		var leftStep = F3(
			function (category, _p9, task) {
				var _p10 = _p9;
				return A2(
					_elm_lang$mouse$Mouse_ops['&>'],
					_elm_lang$core$Process$kill(_p10.pid),
					task);
			});
		return A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			oldState,
			_elm_lang$mouse$Mouse$categorize(newSubs),
			_elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty));
	});
var _elm_lang$mouse$Mouse$MySub = F2(
	function (a, b) {
		return {ctor: 'MySub', _0: a, _1: b};
	});
var _elm_lang$mouse$Mouse$clicks = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'click', tagger));
};
var _elm_lang$mouse$Mouse$moves = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'mousemove', tagger));
};
var _elm_lang$mouse$Mouse$downs = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'mousedown', tagger));
};
var _elm_lang$mouse$Mouse$ups = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'mouseup', tagger));
};
var _elm_lang$mouse$Mouse$subMap = F2(
	function (func, _p11) {
		var _p12 = _p11;
		return A2(
			_elm_lang$mouse$Mouse$MySub,
			_p12._0,
			function (_p13) {
				return func(
					_p12._1(_p13));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Mouse'] = {pkg: 'elm-lang/mouse', init: _elm_lang$mouse$Mouse$init, onEffects: _elm_lang$mouse$Mouse$onEffects, onSelfMsg: _elm_lang$mouse$Mouse$onSelfMsg, tag: 'sub', subMap: _elm_lang$mouse$Mouse$subMap};

var _elm_lang$dom$Dom$blur = _elm_lang$dom$Native_Dom.blur;
var _elm_lang$dom$Dom$focus = _elm_lang$dom$Native_Dom.focus;
var _elm_lang$dom$Dom$NotFound = function (a) {
	return {ctor: 'NotFound', _0: a};
};

var _concourse$atc$Concourse_User$logOut = _lukewestby$elm_http_builder$HttpBuilder$toTask(
	A2(
		_lukewestby$elm_http_builder$HttpBuilder$withExpect,
		_elm_lang$http$Http$expectStringResponse(
			function (_p0) {
				return _elm_lang$core$Result$Ok(
					{ctor: '_Tuple0'});
			}),
		_lukewestby$elm_http_builder$HttpBuilder$get('/auth/logout')));
var _concourse$atc$Concourse_User$fetchUser = _lukewestby$elm_http_builder$HttpBuilder$toTask(
	A2(
		_lukewestby$elm_http_builder$HttpBuilder$withExpect,
		_elm_lang$http$Http$expectJson(_concourse$atc$Concourse$decodeUser),
		_lukewestby$elm_http_builder$HttpBuilder$get('/auth/userinfo')));

var _concourse$atc$NewTopBar$showUserInfo = function (model) {
	var _p0 = model.user;
	switch (_p0.ctor) {
		case 'NotAsked':
			return _elm_lang$html$Html$text('n/a');
		case 'Loading':
			return _elm_lang$html$Html$text('loading');
		case 'Success':
			return _elm_lang$html$Html$text(_p0._0.team.name);
		default:
			return _elm_lang$html$Html$text('login');
	}
};
var _concourse$atc$NewTopBar$update = F2(
	function (msg, model) {
		var _p1 = msg;
		if (_p1.ctor === 'FilterMsg') {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{query: _p1._0}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{user: _p1._0}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		}
	});
var _concourse$atc$NewTopBar$Model = F2(
	function (a, b) {
		return {user: a, query: b};
	});
var _concourse$atc$NewTopBar$FilterMsg = function (a) {
	return {ctor: 'FilterMsg', _0: a};
};
var _concourse$atc$NewTopBar$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('module-topbar'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('topbar-logo'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('logo-image-link'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href('#'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('topbar-search'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('topbar-search-form'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$input,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('search-input-field'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$id('search-input-field'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$type_('text'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$placeholder('search'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onInput(_concourse$atc$NewTopBar$FilterMsg),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$value(model.query),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('search-clear-button'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$id('search-clear-button'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(
														_concourse$atc$NewTopBar$FilterMsg('')),
													_1: {ctor: '[]'}
												}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('topbar-login'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('topbar-user-info'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _concourse$atc$NewTopBar$showUserInfo(model),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _concourse$atc$NewTopBar$UserFetched = function (a) {
	return {ctor: 'UserFetched', _0: a};
};
var _concourse$atc$NewTopBar$fetchUser = A2(
	_elm_lang$core$Platform_Cmd$map,
	_concourse$atc$NewTopBar$UserFetched,
	_krisajenkins$remotedata$RemoteData$asCmd(_concourse$atc$Concourse_User$fetchUser));
var _concourse$atc$NewTopBar$init = {
	ctor: '_Tuple2',
	_0: {user: _krisajenkins$remotedata$RemoteData$Loading, query: ''},
	_1: _concourse$atc$NewTopBar$fetchUser
};

var _concourse$atc$Dashboard$getPipelineStates = F2(
	function (model, pipelines) {
		return A2(
			_elm_lang$core$List$filter,
			function (_p0) {
				return A2(
					F2(
						function (x, y) {
							return !_elm_lang$core$Native_Utils.eq(x, y);
						}),
					_krisajenkins$remotedata$RemoteData$NotAsked,
					function (_) {
						return _.jobs;
					}(_p0));
			},
			A2(
				_elm_lang$core$List$map,
				function (pipeline) {
					return {
						pipeline: pipeline,
						jobs: A2(
							_elm_lang$core$Maybe$withDefault,
							_krisajenkins$remotedata$RemoteData$NotAsked,
							A2(_elm_lang$core$Dict$get, pipeline.id, model.jobs))
					};
				},
				pipelines));
	});
var _concourse$atc$Dashboard$filterBy = F2(
	function (term, pipelines) {
		var plist = A2(
			_elm_lang$core$List$map,
			function (p) {
				return p.pipeline;
			},
			pipelines);
		var searchStatus = A2(_elm_lang$core$String$startsWith, 'status:', term);
		var statusSearchTerm = searchStatus ? A2(_elm_lang$core$String$dropLeft, 7, term) : term;
		var filterByStatus = A3(
			_NoRedInk$elm_simple_fuzzy$Simple_Fuzzy$filter,
			function (_) {
				return _.status;
			},
			statusSearchTerm,
			pipelines);
		var searchTeams = A2(_elm_lang$core$String$startsWith, 'team:', term);
		var teamSearchTerm = searchTeams ? A2(_elm_lang$core$String$dropLeft, 5, term) : term;
		return _elm_lang$core$Native_Utils.eq(searchTeams, true) ? A3(
			_NoRedInk$elm_simple_fuzzy$Simple_Fuzzy$filter,
			function (_) {
				return _.teamName;
			},
			teamSearchTerm,
			plist) : (_elm_lang$core$Native_Utils.eq(searchStatus, true) ? A2(
			_elm_lang$core$List$map,
			function (p) {
				return p.pipeline;
			},
			filterByStatus) : A3(
			_NoRedInk$elm_simple_fuzzy$Simple_Fuzzy$filter,
			function (_) {
				return _.name;
			},
			term,
			plist));
	});
var _concourse$atc$Dashboard$containsStatus = F2(
	function (status, statuses) {
		return A2(
			_elm_lang$core$List$any,
			function (s) {
				var _p1 = s;
				if (_p1.ctor === 'Just') {
					return _elm_lang$core$Native_Utils.eq(status, _p1._0);
				} else {
					return false;
				}
			},
			statuses);
	});
var _concourse$atc$Dashboard$collectStatusesFromJobs = function (jobs) {
	return A2(
		_elm_lang$core$List$concatMap,
		function (job) {
			return {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Maybe$map,
					function (_) {
						return _.status;
					},
					job.finishedBuild),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$core$Maybe$map,
						function (_) {
							return _.status;
						},
						job.nextBuild),
					_1: {ctor: '[]'}
				}
			};
		},
		jobs);
};
var _concourse$atc$Dashboard$pipelineStatusFromJobs = function (jobs) {
	var statuses = _concourse$atc$Dashboard$collectStatusesFromJobs(jobs);
	return A2(_concourse$atc$Dashboard$containsStatus, _concourse$atc$Concourse$BuildStatusPending, statuses) ? _concourse$atc$Concourse$PipelineStatusPending : (A2(
		_elm_lang$core$List$any,
		function (job) {
			return !_elm_lang$core$Native_Utils.eq(job.nextBuild, _elm_lang$core$Maybe$Nothing);
		},
		jobs) ? _concourse$atc$Concourse$PipelineStatusRunning : (A2(_concourse$atc$Dashboard$containsStatus, _concourse$atc$Concourse$BuildStatusFailed, statuses) ? _concourse$atc$Concourse$PipelineStatusFailed : (A2(_concourse$atc$Dashboard$containsStatus, _concourse$atc$Concourse$BuildStatusErrored, statuses) ? _concourse$atc$Concourse$PipelineStatusErrored : (A2(_concourse$atc$Dashboard$containsStatus, _concourse$atc$Concourse$BuildStatusAborted, statuses) ? _concourse$atc$Concourse$PipelineStatusAborted : (A2(_concourse$atc$Dashboard$containsStatus, _concourse$atc$Concourse$BuildStatusSucceeded, statuses) ? _concourse$atc$Concourse$PipelineStatusSucceeded : _concourse$atc$Concourse$PipelineStatusPending)))));
};
var _concourse$atc$Dashboard$lastPipelineStatusFromJobs = function (jobs) {
	var statuses = _concourse$atc$Dashboard$collectStatusesFromJobs(jobs);
	return A2(_concourse$atc$Dashboard$containsStatus, _concourse$atc$Concourse$BuildStatusPending, statuses) ? _concourse$atc$Concourse$PipelineStatusPending : (A2(_concourse$atc$Dashboard$containsStatus, _concourse$atc$Concourse$BuildStatusFailed, statuses) ? _concourse$atc$Concourse$PipelineStatusFailed : (A2(_concourse$atc$Dashboard$containsStatus, _concourse$atc$Concourse$BuildStatusErrored, statuses) ? _concourse$atc$Concourse$PipelineStatusErrored : (A2(_concourse$atc$Dashboard$containsStatus, _concourse$atc$Concourse$BuildStatusAborted, statuses) ? _concourse$atc$Concourse$PipelineStatusAborted : (A2(_concourse$atc$Dashboard$containsStatus, _concourse$atc$Concourse$BuildStatusSucceeded, statuses) ? _concourse$atc$Concourse$PipelineStatusSucceeded : _concourse$atc$Concourse$PipelineStatusPending))));
};
var _concourse$atc$Dashboard$lastPipelineStatus = function (_p2) {
	var _p3 = _p2;
	if (_elm_lang$core$Native_Utils.eq(_p3.pipeline.paused, true)) {
		return _concourse$atc$Concourse$PipelineStatusPaused;
	} else {
		var _p4 = _p3.jobs;
		if (_p4.ctor === 'Success') {
			return _concourse$atc$Dashboard$lastPipelineStatusFromJobs(_p4._0);
		} else {
			return _concourse$atc$Concourse$PipelineStatusPending;
		}
	}
};
var _concourse$atc$Dashboard$pipelineStatus = function (_p5) {
	var _p6 = _p5;
	if (_elm_lang$core$Native_Utils.eq(_p6.pipeline.paused, true)) {
		return _concourse$atc$Concourse$PipelineStatusPaused;
	} else {
		var _p7 = _p6.jobs;
		if (_p7.ctor === 'Success') {
			return _concourse$atc$Dashboard$pipelineStatusFromJobs(_p7._0);
		} else {
			return _concourse$atc$Concourse$PipelineStatusPending;
		}
	}
};
var _concourse$atc$Dashboard$extendedPipelineList = F2(
	function (model, pipelines) {
		var setPipelineStatus = function (p) {
			return _concourse$atc$Concourse_PipelineStatus$show(
				_concourse$atc$Dashboard$pipelineStatus(p));
		};
		var pipelineStates = A2(_concourse$atc$Dashboard$getPipelineStates, model, pipelines);
		return A2(
			_elm_lang$core$List$map,
			function (p) {
				return {
					pipeline: p.pipeline,
					status: setPipelineStatus(p)
				};
			},
			pipelineStates);
	});
var _concourse$atc$Dashboard$searchTermList = F3(
	function (model, queryList, pipelines) {
		searchTermList:
		while (true) {
			var _p8 = queryList;
			if (_p8.ctor === '[]') {
				return pipelines;
			} else {
				var plist = A2(_concourse$atc$Dashboard$extendedPipelineList, model, pipelines);
				var _v6 = model,
					_v7 = _p8._1,
					_v8 = A2(_concourse$atc$Dashboard$filterBy, _p8._0, plist);
				model = _v6;
				queryList = _v7;
				pipelines = _v8;
				continue searchTermList;
			}
		}
	});
var _concourse$atc$Dashboard$filterModelPipelines = F2(
	function (query, model) {
		var querySplit = A2(_elm_lang$core$String$split, ' ', query);
		var _p9 = model.pipelines;
		if (_p9.ctor === 'Success') {
			return A3(_concourse$atc$Dashboard$searchTermList, model, querySplit, _p9._0);
		} else {
			return {ctor: '[]'};
		}
	});
var _concourse$atc$Dashboard$hasJobsRunning = function (jobs) {
	var _p10 = jobs;
	if (_p10.ctor === 'Success') {
		return A2(
			_elm_lang$core$List$any,
			function (job) {
				return !_elm_lang$core$Native_Utils.eq(job.nextBuild, _elm_lang$core$Maybe$Nothing);
			},
			_p10._0);
	} else {
		return false;
	}
};
var _concourse$atc$Dashboard$isPipelineJobsRunning = function (_p11) {
	var _p12 = _p11;
	var _p13 = _p12.jobs;
	if (_p13.ctor === 'Success') {
		return A2(
			_elm_lang$core$List$any,
			function (job) {
				return !_elm_lang$core$Native_Utils.eq(job.nextBuild, _elm_lang$core$Maybe$Nothing);
			},
			_p13._0);
	} else {
		return false;
	}
};
var _concourse$atc$Dashboard$isPipelineRunning = function (status) {
	var _p14 = status;
	if (_p14.ctor === 'PipelineStatusRunning') {
		return true;
	} else {
		return false;
	}
};
var _concourse$atc$Dashboard$timeSincePipelineTransitioned = F2(
	function (time, state) {
		var _p15 = state.jobs;
		if (_p15.ctor === 'Success') {
			var status = _concourse$atc$Dashboard$pipelineStatus(state);
			var transitionedJobs = A2(
				_elm_lang$core$List$filter,
				function (job) {
					return !A2(
						_elm_lang$core$Basics$xor,
						_elm_lang$core$Native_Utils.eq(status, _concourse$atc$Concourse$PipelineStatusSucceeded),
						_elm_lang$core$Native_Utils.eq(
							_elm_lang$core$Maybe$Just(_concourse$atc$Concourse$BuildStatusSucceeded),
							A2(
								_elm_lang$core$Maybe$map,
								function (_) {
									return _.status;
								},
								job.finishedBuild)));
				},
				_p15._0);
			var transitionedDurations = A2(
				_elm_lang$core$List$filterMap,
				function (job) {
					return A2(
						_elm_lang$core$Maybe$map,
						function (_) {
							return _.duration;
						},
						job.transitionBuild);
				},
				transitionedJobs);
			var sortedTransitionedDurations = A2(
				_elm_lang$core$List$sortBy,
				function (duration) {
					var _p16 = duration.startedAt;
					if (_p16.ctor === 'Just') {
						return _elm_lang$core$Time$inSeconds(
							_elm_lang$core$Date$toTime(_p16._0));
					} else {
						return 0;
					}
				},
				transitionedDurations);
			var transitionedDuration = _elm_lang$core$Native_Utils.eq(status, _concourse$atc$Concourse$PipelineStatusSucceeded) ? function (_p17) {
				return _elm_lang$core$List$head(
					_elm_lang$core$List$reverse(_p17));
			}(sortedTransitionedDurations) : _elm_lang$core$List$head(sortedTransitionedDurations);
			var _p18 = status;
			switch (_p18.ctor) {
				case 'PipelineStatusPaused':
					return A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('build-duration'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('paused'),
							_1: {ctor: '[]'}
						});
				case 'PipelineStatusPending':
					return A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('build-duration'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('pending'),
							_1: {ctor: '[]'}
						});
				case 'PipelineStatusRunning':
					return A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('build-duration'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('running'),
							_1: {ctor: '[]'}
						});
				default:
					var _p19 = {ctor: '_Tuple2', _0: time, _1: transitionedDuration};
					if (((_p19.ctor === '_Tuple2') && (_p19._0.ctor === 'Just')) && (_p19._1.ctor === 'Just')) {
						return A2(_concourse$atc$BuildDuration$show, _p19._1._0, _p19._0._0);
					} else {
						return _elm_lang$html$Html$text('');
					}
			}
		} else {
			return _elm_lang$html$Html$text('');
		}
	});
var _concourse$atc$Dashboard$setPipelineStatusClass = function (status) {
	return _concourse$atc$Dashboard$isPipelineRunning(status) ? '' : A2(
		_elm_lang$core$Basics_ops['++'],
		'dashboard-status-',
		_concourse$atc$Concourse_PipelineStatus$show(status));
};
var _concourse$atc$Dashboard$viewPipeline = F2(
	function (now, state) {
		var mJobs = function () {
			var _p20 = state.jobs;
			if (_p20.ctor === 'Success') {
				return _elm_lang$core$Maybe$Just(_p20._0);
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}();
		var mpreview = A2(_elm_lang$core$Maybe$map, _concourse$atc$DashboardPreview$view, mJobs);
		var lStatus = _concourse$atc$Dashboard$lastPipelineStatus(state);
		var pStatus = _concourse$atc$Dashboard$pipelineStatus(state);
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'dashboard-pipeline', _1: true},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'dashboard-paused', _1: state.pipeline.paused},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'dashboard-running',
									_1: _concourse$atc$Dashboard$isPipelineRunning(pStatus) || _concourse$atc$Dashboard$hasJobsRunning(state.jobs)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: _concourse$atc$Dashboard$setPipelineStatusClass(lStatus),
										_1: !state.pipeline.paused
									},
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(_elm_lang$html$Html_Attributes$attribute, 'data-pipeline-name', state.pipeline.name),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('dashboard-pipeline-banner'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('dashboard-pipeline-content'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href(
										_concourse$atc$Format$prependBeta(state.pipeline.url)),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('dashboard-pipeline-header'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('dashboard-pipeline-name'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(state.pipeline.name),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: function () {
									var _p21 = mpreview;
									if (_p21.ctor === 'Just') {
										return _p21._0;
									} else {
										return _elm_lang$html$Html$text('');
									}
								}(),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('dashboard-pipeline-footer'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('dashboard-pipeline-icon'),
													_1: {ctor: '[]'}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(_concourse$atc$Dashboard$timeSincePipelineTransitioned, now, state),
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _concourse$atc$Dashboard$viewGroup = F3(
	function (now, teamName, pipelines) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id(teamName),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('dashboard-team-group'),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'data-team-name', teamName),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('pin-wrapper'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('dashboard-team-name'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(teamName),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('dashboard-team-pipelines'),
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$List$map,
							_concourse$atc$Dashboard$viewPipeline(now),
							pipelines)),
					_1: {ctor: '[]'}
				}
			});
	});
var _concourse$atc$Dashboard$addPipelineState = F2(
	function (pipelineStates, _p22) {
		var _p23 = _p22;
		var _p28 = _p23._0;
		var _p27 = _p23._1;
		var _p24 = pipelineStates;
		if (_p24.ctor === '[]') {
			return {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _p28,
					_1: {
						ctor: '::',
						_0: _p27,
						_1: {ctor: '[]'}
					}
				},
				_1: {ctor: '[]'}
			};
		} else {
			var _p26 = _p24._1;
			var _p25 = _p24._0;
			return _elm_lang$core$Native_Utils.eq(
				_elm_lang$core$Tuple$first(_p25),
				_p28) ? {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _p28,
					_1: {
						ctor: '::',
						_0: _p27,
						_1: _elm_lang$core$Tuple$second(_p25)
					}
				},
				_1: _p26
			} : {
				ctor: '::',
				_0: _p25,
				_1: A2(
					_concourse$atc$Dashboard$addPipelineState,
					_p26,
					{ctor: '_Tuple2', _0: _p28, _1: _p27})
			};
		}
	});
var _concourse$atc$Dashboard$showTurbulenceView = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('error-message'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('message'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$img,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src(model.turbulenceImgSrc),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('seatbelt'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('experiencing turbulence'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('explanation'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _concourse$atc$Dashboard$showFooterView = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: (model.hideFooter || model.showHelp) ? _elm_lang$html$Html_Attributes$class('dashboard-footer hidden') : _elm_lang$html$Html_Attributes$class('dashboard-footer'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('dashboard-legend'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('dashboard-status-pending'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('dashboard-pipeline-icon'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text('pending'),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('dashboard-paused'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('dashboard-pipeline-icon'),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text('paused'),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('dashboard-running'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('dashboard-pipeline-icon'),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text('running'),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('dashboard-status-failed'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('dashboard-pipeline-icon'),
												_1: {ctor: '[]'}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text('failing'),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('dashboard-status-errored'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('dashboard-pipeline-icon'),
													_1: {ctor: '[]'}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html$text('errored'),
												_1: {ctor: '[]'}
											}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('dashboard-status-aborted'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('dashboard-pipeline-icon'),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html$text('aborted'),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('dashboard-status-succeeded'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('dashboard-pipeline-icon'),
															_1: {ctor: '[]'}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html$text('succeeded'),
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('concourse-version'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('version: v'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text(model.concourseVersion),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('concourse-cli'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('cli: '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$href(
											A2(_concourse$atc$Concourse_Cli$downloadUrl, 'amd64', 'darwin')),
										_1: {
											ctor: '::',
											_0: _fapian$elm_html_aria$Html_Attributes_Aria$ariaLabel('Download OS X CLI'),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$i,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('fa fa-apple'),
												_1: {ctor: '[]'}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href(
												A2(_concourse$atc$Concourse_Cli$downloadUrl, 'amd64', 'windows')),
											_1: {
												ctor: '::',
												_0: _fapian$elm_html_aria$Html_Attributes_Aria$ariaLabel('Download Windows CLI'),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$i,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('fa fa-windows'),
													_1: {ctor: '[]'}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$href(
													A2(_concourse$atc$Concourse_Cli$downloadUrl, 'amd64', 'linux')),
												_1: {
													ctor: '::',
													_0: _fapian$elm_html_aria$Html_Attributes_Aria$ariaLabel('Download Linux CLI'),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$i,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('fa fa-linux'),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _concourse$atc$Dashboard$helpView = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$classList(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'keyboard-help', _1: true},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'hidden', _1: !model.showHelp},
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('help-title'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('keyboard shortcuts'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('help-line'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('keys'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('key'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('/'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('focus search input'),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('help-line'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('keys'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('key'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('?'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text('hide/show help'),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _concourse$atc$Dashboard$showPipelinesView = F2(
	function (model, pipelines) {
		var pipelineStates = A2(_concourse$atc$Dashboard$getPipelineStates, model, pipelines);
		var pipelinesByTeam = A3(
			_elm_lang$core$List$foldl,
			F2(
				function (pipelineState, byTeam) {
					return A2(
						_concourse$atc$Dashboard$addPipelineState,
						byTeam,
						{ctor: '_Tuple2', _0: pipelineState.pipeline.teamName, _1: pipelineState});
				}),
			{ctor: '[]'},
			pipelineStates);
		var listPipelinesByTeam = A2(
			_elm_lang$core$List$map,
			function (_p29) {
				var _p30 = _p29;
				return A3(
					_concourse$atc$Dashboard$viewGroup,
					model.now,
					_p30._0,
					_elm_lang$core$List$reverse(_p30._1));
			},
			pipelinesByTeam);
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('dashboard'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('dashboard-content'),
						_1: {ctor: '[]'}
					},
					listPipelinesByTeam),
				_1: {
					ctor: '::',
					_0: _concourse$atc$Dashboard$showFooterView(model),
					_1: {
						ctor: '::',
						_0: _concourse$atc$Dashboard$helpView(model),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _concourse$atc$Dashboard$showNoResultsView = function (query) {
	var boldedQuery = A2(
		_elm_lang$html$Html$span,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('monospace-bold'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(query),
			_1: {ctor: '[]'}
		});
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('dashboard'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('dashboard-content no-results'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('No results for '),
							_1: {
								ctor: '::',
								_0: boldedQuery,
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' matched your search.'),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _concourse$atc$Dashboard$viewDashboard = function (model) {
	var isQueryEmpty = _elm_lang$core$String$isEmpty(model.topBar.query);
	var listFetchedPipelinesLength = _elm_lang$core$List$length(model.fetchedPipelines);
	var _p31 = model.pipelines;
	switch (_p31.ctor) {
		case 'Success':
			return (_elm_lang$core$Native_Utils.cmp(listFetchedPipelinesLength, 0) > 0) ? A2(_concourse$atc$Dashboard$showPipelinesView, model, model.fetchedPipelines) : ((!isQueryEmpty) ? _concourse$atc$Dashboard$showNoResultsView(
				_elm_lang$core$Basics$toString(model.topBar.query)) : A2(_concourse$atc$Dashboard$showPipelinesView, model, _p31._0));
		case 'Failure':
			return _concourse$atc$Dashboard$showTurbulenceView(model);
		default:
			return _elm_lang$html$Html$text('');
	}
};
var _concourse$atc$Dashboard$pinTeamNames = _elm_lang$core$Native_Platform.outgoingPort(
	'pinTeamNames',
	function (v) {
		return null;
	});
var _concourse$atc$Dashboard$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {topBar: a, pipelines: b, jobs: c, concourseVersion: d, turbulenceImgSrc: e, now: f, showHelp: g, hideFooter: h, hideFooterCounter: i, fetchedPipelines: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _concourse$atc$Dashboard$PipelineWithJobs = F2(
	function (a, b) {
		return {pipeline: a, jobs: b};
	});
var _concourse$atc$Dashboard$StatusPipeline = F2(
	function (a, b) {
		return {pipeline: a, status: b};
	});
var _concourse$atc$Dashboard$TopBarMsg = function (a) {
	return {ctor: 'TopBarMsg', _0: a};
};
var _concourse$atc$Dashboard$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('page'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$map,
				_concourse$atc$Dashboard$TopBarMsg,
				_concourse$atc$NewTopBar$view(model.topBar)),
			_1: {
				ctor: '::',
				_0: _concourse$atc$Dashboard$viewDashboard(model),
				_1: {ctor: '[]'}
			}
		});
};
var _concourse$atc$Dashboard$KeyPressed = function (a) {
	return {ctor: 'KeyPressed', _0: a};
};
var _concourse$atc$Dashboard$ShowFooter = {ctor: 'ShowFooter'};
var _concourse$atc$Dashboard$AutoRefresh = function (a) {
	return {ctor: 'AutoRefresh', _0: a};
};
var _concourse$atc$Dashboard$VersionFetched = function (a) {
	return {ctor: 'VersionFetched', _0: a};
};
var _concourse$atc$Dashboard$fetchVersion = A2(
	_elm_lang$core$Task$attempt,
	_concourse$atc$Dashboard$VersionFetched,
	A2(
		_elm_lang$core$Task$map,
		function (_) {
			return _.version;
		},
		_concourse$atc$Concourse_Info$fetch));
var _concourse$atc$Dashboard$ClockTick = function (a) {
	return {ctor: 'ClockTick', _0: a};
};
var _concourse$atc$Dashboard$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: A2(_elm_lang$core$Time$every, _elm_lang$core$Time$second, _concourse$atc$Dashboard$ClockTick),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Time$every, 5 * _elm_lang$core$Time$second, _concourse$atc$Dashboard$AutoRefresh),
				_1: {
					ctor: '::',
					_0: _elm_lang$mouse$Mouse$moves(
						function (_p32) {
							return _concourse$atc$Dashboard$ShowFooter;
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$mouse$Mouse$clicks(
							function (_p33) {
								return _concourse$atc$Dashboard$ShowFooter;
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$keyboard$Keyboard$presses(_concourse$atc$Dashboard$KeyPressed),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _concourse$atc$Dashboard$getCurrentTime = A2(_elm_lang$core$Task$perform, _concourse$atc$Dashboard$ClockTick, _elm_lang$core$Time$now);
var _concourse$atc$Dashboard$JobsResponse = F2(
	function (a, b) {
		return {ctor: 'JobsResponse', _0: a, _1: b};
	});
var _concourse$atc$Dashboard$fetchJobs = function (pipeline) {
	return A2(
		_elm_lang$core$Platform_Cmd$map,
		_concourse$atc$Dashboard$JobsResponse(pipeline.id),
		_krisajenkins$remotedata$RemoteData$asCmd(
			_concourse$atc$Concourse_Job$fetchJobsWithTransitionBuilds(
				{teamName: pipeline.teamName, pipelineName: pipeline.name})));
};
var _concourse$atc$Dashboard$PipelinesResponse = function (a) {
	return {ctor: 'PipelinesResponse', _0: a};
};
var _concourse$atc$Dashboard$fetchPipelines = A2(
	_elm_lang$core$Platform_Cmd$map,
	_concourse$atc$Dashboard$PipelinesResponse,
	_krisajenkins$remotedata$RemoteData$asCmd(_concourse$atc$Concourse_Pipeline$fetchPipelines));
var _concourse$atc$Dashboard$init = function (turbulencePath) {
	var _p34 = _concourse$atc$NewTopBar$init;
	var topBar = _p34._0;
	var topBarMsg = _p34._1;
	return {
		ctor: '_Tuple2',
		_0: {
			topBar: topBar,
			pipelines: _krisajenkins$remotedata$RemoteData$NotAsked,
			jobs: _elm_lang$core$Dict$empty,
			now: _elm_lang$core$Maybe$Nothing,
			turbulenceImgSrc: turbulencePath,
			concourseVersion: '',
			showHelp: false,
			hideFooter: false,
			hideFooterCounter: 0,
			fetchedPipelines: {ctor: '[]'}
		},
		_1: _elm_lang$core$Platform_Cmd$batch(
			{
				ctor: '::',
				_0: _concourse$atc$Dashboard$fetchPipelines,
				_1: {
					ctor: '::',
					_0: _concourse$atc$Dashboard$fetchVersion,
					_1: {
						ctor: '::',
						_0: _concourse$atc$Dashboard$getCurrentTime,
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$core$Platform_Cmd$map, _concourse$atc$Dashboard$TopBarMsg, topBarMsg),
							_1: {
								ctor: '::',
								_0: _concourse$atc$Dashboard$pinTeamNames(
									{ctor: '_Tuple0'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			})
	};
};
var _concourse$atc$Dashboard$Noop = {ctor: 'Noop'};
var _concourse$atc$Dashboard$handleKeyPressed = F2(
	function (key, model) {
		var _p35 = key;
		switch (_p35.valueOf()) {
			case '/':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(
						_elm_lang$core$Task$attempt,
						_elm_lang$core$Basics$always(_concourse$atc$Dashboard$Noop),
						_elm_lang$dom$Dom$focus('search-input-field'))
				};
			case '?':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{showHelp: !model.showHelp}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return A2(_concourse$atc$Dashboard$update, _concourse$atc$Dashboard$ShowFooter, model);
		}
	});
var _concourse$atc$Dashboard$update = F2(
	function (msg, model) {
		var _p36 = msg;
		switch (_p36.ctor) {
			case 'Noop':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'PipelinesResponse':
				var _p38 = _p36._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{pipelines: _p38}),
					_1: function () {
						var _p37 = _p38;
						if (_p37.ctor === 'Success') {
							return _elm_lang$core$Platform_Cmd$batch(
								A2(_elm_lang$core$List$map, _concourse$atc$Dashboard$fetchJobs, _p37._0));
						} else {
							return _elm_lang$core$Platform_Cmd$none;
						}
					}()
				};
			case 'JobsResponse':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							jobs: A3(_elm_lang$core$Dict$insert, _p36._0, _p36._1, model.jobs)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'VersionFetched':
				if (_p36._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{concourseVersion: _p36._0._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return A3(
						_elm_lang$core$Basics$flip,
						_elm_lang$core$Basics$always,
						A2(_elm_lang$core$Debug$log, 'failed to fetch version', _p36._0._0),
						{
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{concourseVersion: ''}),
							_1: _elm_lang$core$Platform_Cmd$none
						});
				}
			case 'ClockTick':
				var _p39 = _p36._0;
				return (_elm_lang$core$Native_Utils.cmp(model.hideFooterCounter + _elm_lang$core$Time$second, 5 * _elm_lang$core$Time$second) > 0) ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							now: _elm_lang$core$Maybe$Just(_p39),
							hideFooter: true
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				} : {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							now: _elm_lang$core$Maybe$Just(_p39),
							hideFooterCounter: model.hideFooterCounter + _elm_lang$core$Time$second
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'AutoRefresh':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: _concourse$atc$Dashboard$fetchPipelines,
							_1: {
								ctor: '::',
								_0: _concourse$atc$Dashboard$fetchVersion,
								_1: {
									ctor: '::',
									_0: A2(_elm_lang$core$Platform_Cmd$map, _concourse$atc$Dashboard$TopBarMsg, _concourse$atc$NewTopBar$fetchUser),
									_1: {ctor: '[]'}
								}
							}
						})
				};
			case 'KeyPressed':
				return A2(
					_concourse$atc$Dashboard$handleKeyPressed,
					_elm_lang$core$Char$fromCode(_p36._0),
					model);
			case 'ShowFooter':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{hideFooter: false, hideFooterCounter: 0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var _p42 = _p36._0;
				var _p40 = A2(_concourse$atc$NewTopBar$update, _p42, model.topBar);
				var newTopBar = _p40._0;
				var newTopBarMsg = _p40._1;
				var newModel = function () {
					var _p41 = _p42;
					if (_p41.ctor === 'FilterMsg') {
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								topBar: newTopBar,
								fetchedPipelines: A2(_concourse$atc$Dashboard$filterModelPipelines, _p41._0, model)
							});
					} else {
						return _elm_lang$core$Native_Utils.update(
							model,
							{topBar: newTopBar});
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: A2(_elm_lang$core$Platform_Cmd$map, _concourse$atc$Dashboard$TopBarMsg, newTopBarMsg)
				};
		}
	});

var _concourse$atc$Concourse_AuthMethod$fetchAll = function (teamName) {
	return function (_p0) {
		return _elm_lang$http$Http$toTask(
			A3(
				_elm_lang$core$Basics$flip,
				_elm_lang$http$Http$get,
				_elm_lang$core$Json_Decode$list(_concourse$atc$Concourse$decodeAuthMethod),
				_p0));
	}(
		A2(_elm_lang$core$Basics_ops['++'], '/auth/list_methods?team_name=', teamName));
};

var _truqu$elm_base64$BitList$partition = F2(
	function (size, list) {
		if (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(list),
			size) < 1) {
			return {
				ctor: '::',
				_0: list,
				_1: {ctor: '[]'}
			};
		} else {
			var partitionTail = F3(
				function (size, list, res) {
					partitionTail:
					while (true) {
						var _p0 = list;
						if (_p0.ctor === '[]') {
							return res;
						} else {
							var _v1 = size,
								_v2 = A2(_elm_lang$core$List$drop, size, list),
								_v3 = {
								ctor: '::',
								_0: A2(_elm_lang$core$List$take, size, list),
								_1: res
							};
							size = _v1;
							list = _v2;
							res = _v3;
							continue partitionTail;
						}
					}
				});
			return _elm_lang$core$List$reverse(
				A3(
					partitionTail,
					size,
					list,
					{ctor: '[]'}));
		}
	});
var _truqu$elm_base64$BitList$toByteReverse = function (bitList) {
	var _p1 = bitList;
	if (_p1.ctor === '[]') {
		return 0;
	} else {
		if (_p1._0.ctor === 'Off') {
			return 2 * _truqu$elm_base64$BitList$toByteReverse(_p1._1);
		} else {
			return 1 + (2 * _truqu$elm_base64$BitList$toByteReverse(_p1._1));
		}
	}
};
var _truqu$elm_base64$BitList$toByte = function (bitList) {
	return _truqu$elm_base64$BitList$toByteReverse(
		_elm_lang$core$List$reverse(bitList));
};
var _truqu$elm_base64$BitList$Off = {ctor: 'Off'};
var _truqu$elm_base64$BitList$On = {ctor: 'On'};
var _truqu$elm_base64$BitList$fromNumber = function ($int) {
	return _elm_lang$core$Native_Utils.eq($int, 0) ? {ctor: '[]'} : (_elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], $int, 2),
		1) ? A2(
		_elm_lang$core$List$append,
		_truqu$elm_base64$BitList$fromNumber(($int / 2) | 0),
		{
			ctor: '::',
			_0: _truqu$elm_base64$BitList$On,
			_1: {ctor: '[]'}
		}) : A2(
		_elm_lang$core$List$append,
		_truqu$elm_base64$BitList$fromNumber(($int / 2) | 0),
		{
			ctor: '::',
			_0: _truqu$elm_base64$BitList$Off,
			_1: {ctor: '[]'}
		}));
};
var _truqu$elm_base64$BitList$fromNumberWithSize = F2(
	function (number, size) {
		var bitList = _truqu$elm_base64$BitList$fromNumber(number);
		var paddingSize = size - _elm_lang$core$List$length(bitList);
		return A2(
			_elm_lang$core$List$append,
			A2(_elm_lang$core$List$repeat, paddingSize, _truqu$elm_base64$BitList$Off),
			bitList);
	});
var _truqu$elm_base64$BitList$fromByte = function ($byte) {
	return A2(_truqu$elm_base64$BitList$fromNumberWithSize, $byte, 8);
};

var _truqu$elm_base64$Base64$dropLast = F2(
	function (number, list) {
		return _elm_lang$core$List$reverse(
			A2(
				_elm_lang$core$List$drop,
				number,
				_elm_lang$core$List$reverse(list)));
	});
var _truqu$elm_base64$Base64$partitionBits = function (list) {
	var list_ = A3(
		_elm_lang$core$List$foldr,
		_elm_lang$core$List$append,
		{ctor: '[]'},
		A2(_elm_lang$core$List$map, _truqu$elm_base64$BitList$fromByte, list));
	return A2(
		_elm_lang$core$List$map,
		_truqu$elm_base64$BitList$toByte,
		A2(_truqu$elm_base64$BitList$partition, 6, list_));
};
var _truqu$elm_base64$Base64$base64CharsList = _elm_lang$core$String$toList('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/');
var _truqu$elm_base64$Base64$base64Map = function () {
	var insert = F2(
		function (_p0, dict) {
			var _p1 = _p0;
			return A3(_elm_lang$core$Dict$insert, _p1._1, _p1._0, dict);
		});
	return A3(
		_elm_lang$core$List$foldl,
		insert,
		_elm_lang$core$Dict$empty,
		A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			_truqu$elm_base64$Base64$base64CharsList));
}();
var _truqu$elm_base64$Base64$isValid = function (string) {
	var string_ = A2(_elm_lang$core$String$endsWith, '==', string) ? A2(_elm_lang$core$String$dropRight, 2, string) : (A2(_elm_lang$core$String$endsWith, '=', string) ? A2(_elm_lang$core$String$dropRight, 1, string) : string);
	var isBase64Char = function ($char) {
		return A2(_elm_lang$core$Dict$member, $char, _truqu$elm_base64$Base64$base64Map);
	};
	return A2(_elm_lang$core$String$all, isBase64Char, string_);
};
var _truqu$elm_base64$Base64$toBase64BitList = function (string) {
	var endingEquals = A2(_elm_lang$core$String$endsWith, '==', string) ? 2 : (A2(_elm_lang$core$String$endsWith, '=', string) ? 1 : 0);
	var stripped = _elm_lang$core$String$toList(
		A2(_elm_lang$core$String$dropRight, endingEquals, string));
	var base64ToInt = function ($char) {
		var _p2 = A2(_elm_lang$core$Dict$get, $char, _truqu$elm_base64$Base64$base64Map);
		if (_p2.ctor === 'Just') {
			return _p2._0;
		} else {
			return -1;
		}
	};
	var numberList = A2(_elm_lang$core$List$map, base64ToInt, stripped);
	return A2(
		_truqu$elm_base64$Base64$dropLast,
		endingEquals * 2,
		A2(
			_elm_lang$core$List$concatMap,
			A2(_elm_lang$core$Basics$flip, _truqu$elm_base64$BitList$fromNumberWithSize, 6),
			numberList));
};
var _truqu$elm_base64$Base64$toCharList = function (bitList) {
	var array = _elm_lang$core$Array$fromList(_truqu$elm_base64$Base64$base64CharsList);
	var toBase64Char = function (index) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_elm_lang$core$Native_Utils.chr('!'),
			A2(_elm_lang$core$Array$get, index, array));
	};
	var toChars = function (_p3) {
		var _p4 = _p3;
		var _p5 = {ctor: '_Tuple3', _0: _p4._0, _1: _p4._1, _2: _p4._2};
		if (_p5._2 === -1) {
			if (_p5._1 === -1) {
				return A2(
					_elm_lang$core$List$append,
					A2(
						_truqu$elm_base64$Base64$dropLast,
						2,
						A2(
							_elm_lang$core$List$map,
							toBase64Char,
							_truqu$elm_base64$Base64$partitionBits(
								{
									ctor: '::',
									_0: _p5._0,
									_1: {
										ctor: '::',
										_0: 0,
										_1: {
											ctor: '::',
											_0: 0,
											_1: {ctor: '[]'}
										}
									}
								}))),
					{
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.chr('='),
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.chr('='),
							_1: {ctor: '[]'}
						}
					});
			} else {
				return A2(
					_elm_lang$core$List$append,
					A2(
						_truqu$elm_base64$Base64$dropLast,
						1,
						A2(
							_elm_lang$core$List$map,
							toBase64Char,
							_truqu$elm_base64$Base64$partitionBits(
								{
									ctor: '::',
									_0: _p5._0,
									_1: {
										ctor: '::',
										_0: _p5._1,
										_1: {
											ctor: '::',
											_0: 0,
											_1: {ctor: '[]'}
										}
									}
								}))),
					{
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.chr('='),
						_1: {ctor: '[]'}
					});
			}
		} else {
			return A2(
				_elm_lang$core$List$map,
				toBase64Char,
				_truqu$elm_base64$Base64$partitionBits(
					{
						ctor: '::',
						_0: _p5._0,
						_1: {
							ctor: '::',
							_0: _p5._1,
							_1: {
								ctor: '::',
								_0: _p5._2,
								_1: {ctor: '[]'}
							}
						}
					}));
		}
	};
	return A2(_elm_lang$core$List$concatMap, toChars, bitList);
};
var _truqu$elm_base64$Base64$toTupleList = function () {
	var toTupleListHelp = F2(
		function (acc, list) {
			toTupleListHelp:
			while (true) {
				var _p6 = list;
				if (_p6.ctor === '::') {
					if (_p6._1.ctor === '::') {
						if (_p6._1._1.ctor === '::') {
							var _v5 = {
								ctor: '::',
								_0: {ctor: '_Tuple3', _0: _p6._0, _1: _p6._1._0, _2: _p6._1._1._0},
								_1: acc
							},
								_v6 = _p6._1._1._1;
							acc = _v5;
							list = _v6;
							continue toTupleListHelp;
						} else {
							return {
								ctor: '::',
								_0: {ctor: '_Tuple3', _0: _p6._0, _1: _p6._1._0, _2: -1},
								_1: acc
							};
						}
					} else {
						return {
							ctor: '::',
							_0: {ctor: '_Tuple3', _0: _p6._0, _1: -1, _2: -1},
							_1: acc
						};
					}
				} else {
					return acc;
				}
			}
		});
	return function (_p7) {
		return _elm_lang$core$List$reverse(
			A2(
				toTupleListHelp,
				{ctor: '[]'},
				_p7));
	};
}();
var _truqu$elm_base64$Base64$toCodeList = function (string) {
	return A2(
		_elm_lang$core$List$map,
		_elm_lang$core$Char$toCode,
		_elm_lang$core$String$toList(string));
};
var _truqu$elm_base64$Base64$decode = function (s) {
	if (!_truqu$elm_base64$Base64$isValid(s)) {
		return _elm_lang$core$Result$Err('Error while decoding');
	} else {
		var bitList = A2(
			_elm_lang$core$List$map,
			_truqu$elm_base64$BitList$toByte,
			A2(
				_truqu$elm_base64$BitList$partition,
				8,
				_truqu$elm_base64$Base64$toBase64BitList(s)));
		var charList = A2(_elm_lang$core$List$map, _elm_lang$core$Char$fromCode, bitList);
		return _elm_lang$core$Result$Ok(
			_elm_lang$core$String$fromList(charList));
	}
};
var _truqu$elm_base64$Base64$encode = function (s) {
	return _elm_lang$core$Result$Ok(
		_elm_lang$core$String$fromList(
			_truqu$elm_base64$Base64$toCharList(
				_truqu$elm_base64$Base64$toTupleList(
					_truqu$elm_base64$Base64$toCodeList(s)))));
};

var _concourse$atc$Concourse_Login$encodedAuthHeader = F2(
	function (username, password) {
		return A2(
			_elm_lang$http$Http$header,
			'Authorization',
			function () {
				var _p0 = _truqu$elm_base64$Base64$encode(
					A2(
						_elm_lang$core$Basics_ops['++'],
						username,
						A2(_elm_lang$core$Basics_ops['++'], ':', password)));
				if (_p0.ctor === 'Ok') {
					return A2(_elm_lang$core$Basics_ops['++'], 'Basic ', _p0._0);
				} else {
					return A2(_elm_lang$core$Basics_ops['++'], '!!! error: ', _p0._0);
				}
			}());
	});
var _concourse$atc$Concourse_Login$parseResponse = function (response) {
	var csrfToken = _concourse$atc$Concourse$retrieveCSRFToken(response.headers);
	var authToken = A2(_elm_lang$core$Json_Decode$decodeString, _concourse$atc$Concourse$decodeAuthToken, response.body);
	return A3(
		_elm_lang$core$Result$map2,
		F2(
			function (a, b) {
				return {authToken: a, csrfToken: b};
			}),
		authToken,
		csrfToken);
};
var _concourse$atc$Concourse_Login$basicAuth = F3(
	function (teamName, username, password) {
		return _elm_lang$http$Http$toTask(
			_elm_lang$http$Http$request(
				{
					method: 'GET',
					url: A2(_elm_lang$core$Basics_ops['++'], '/auth/basic/token?team_name=', teamName),
					headers: {
						ctor: '::',
						_0: A2(_concourse$atc$Concourse_Login$encodedAuthHeader, username, password),
						_1: {ctor: '[]'}
					},
					body: _elm_lang$http$Http$emptyBody,
					expect: _elm_lang$http$Http$expectStringResponse(_concourse$atc$Concourse_Login$parseResponse),
					timeout: _elm_lang$core$Maybe$Nothing,
					withCredentials: false
				}));
	});
var _concourse$atc$Concourse_Login$noAuth = function (teamName) {
	return _elm_lang$http$Http$toTask(
		_elm_lang$http$Http$request(
			{
				method: 'GET',
				url: A2(_elm_lang$core$Basics_ops['++'], '/auth/basic/token?team_name=', teamName),
				headers: {ctor: '[]'},
				body: _elm_lang$http$Http$emptyBody,
				expect: _elm_lang$http$Http$expectStringResponse(_concourse$atc$Concourse_Login$parseResponse),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			}));
};

var _concourse$atc$BetaLogin$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _concourse$atc$BetaLogin$viewOrBar = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('or-bar'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$span,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('or'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	});
var _concourse$atc$BetaLogin$loginErrMessage = function (loginFailed) {
	return loginFailed ? A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('login-error'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('login error: not authorized'),
			_1: {ctor: '[]'}
		}) : A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{ctor: '[]'});
};
var _concourse$atc$BetaLogin$viewLoading = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('loading'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$i,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('fa fa-fw fa-spin fa-circle-o-notch'),
				_1: {ctor: '[]'}
			},
			{ctor: '[]'}),
		_1: {ctor: '[]'}
	});
var _concourse$atc$BetaLogin$indexPageUrl = '/';
var _concourse$atc$BetaLogin$routeWithRedirect = F2(
	function (redirectParam, route) {
		var actualRedirect = function () {
			var _p0 = redirectParam;
			if (_p0.ctor === 'Nothing') {
				return _concourse$atc$BetaLogin$indexPageUrl;
			} else {
				return _p0._0;
			}
		}();
		return _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$List$length(
				A2(_elm_lang$core$String$split, '?', route)),
			2) ? A2(
			_elm_lang$core$Basics_ops['++'],
			route,
			A2(_elm_lang$core$Basics_ops['++'], '&redirect=', actualRedirect)) : A2(
			_elm_lang$core$Basics_ops['++'],
			route,
			A2(_elm_lang$core$Basics_ops['++'], '?redirect=', actualRedirect));
	});
var _concourse$atc$BetaLogin$viewOAuthButton = F2(
	function (redirect, method) {
		var _p1 = method;
		if (_p1.ctor === 'AuthMethodBasic') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p2 = _p1._0;
			return _elm_lang$core$Maybe$Just(
				A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('auth-method login-button'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href(
									A2(_concourse$atc$BetaLogin$routeWithRedirect, redirect, _p2.authUrl)),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									A2(_elm_lang$core$Basics_ops['++'], 'login with ', _p2.displayName)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}));
		}
	});
var _concourse$atc$BetaLogin$viewOAuthButtons = F2(
	function (redirectParam, methods) {
		var _p3 = A2(
			_elm_lang$core$List$filterMap,
			_concourse$atc$BetaLogin$viewOAuthButton(redirectParam),
			methods);
		if (_p3.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			return _elm_lang$core$Maybe$Just(
				A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('oauth-buttons'),
						_1: {ctor: '[]'}
					},
					_p3));
		}
	});
var _concourse$atc$BetaLogin$teamSelectionRoute = function (redirectParam) {
	var _p4 = redirectParam;
	if (_p4.ctor === 'Nothing') {
		return _concourse$atc$Format$prependBeta('/login');
	} else {
		return _concourse$atc$Format$prependBeta(
			A2(_elm_lang$core$Basics_ops['++'], '/login?redirect=', _p4._0));
	}
};
var _concourse$atc$BetaLogin$redirectUrl = function (redirectParam) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		_concourse$atc$Format$prependBeta('/'),
		redirectParam);
};
var _concourse$atc$BetaLogin$Ports = function (a) {
	return {title: a};
};
var _concourse$atc$BetaLogin$BasicAuthFields = F2(
	function (a, b) {
		return {username: a, password: b};
	});
var _concourse$atc$BetaLogin$Model = F6(
	function (a, b, c, d, e, f) {
		return {teamName: a, authMethods: b, hasTeamSelectionInBrowserHistory: c, redirect: d, basicAuthInput: e, loginFailed: f};
	});
var _concourse$atc$BetaLogin$GoBack = {ctor: 'GoBack'};
var _concourse$atc$BetaLogin$AuthSessionReceived = function (a) {
	return {ctor: 'AuthSessionReceived', _0: a};
};
var _concourse$atc$BetaLogin$noAuthSubmit = function (teamName) {
	return A2(
		_elm_lang$core$Task$attempt,
		_concourse$atc$BetaLogin$AuthSessionReceived,
		_concourse$atc$Concourse_Login$noAuth(teamName));
};
var _concourse$atc$BetaLogin$basicAuthSubmit = F2(
	function (teamName, fields) {
		return A2(
			_elm_lang$core$Task$attempt,
			_concourse$atc$BetaLogin$AuthSessionReceived,
			A3(_concourse$atc$Concourse_Login$basicAuth, teamName, fields.username, fields.password));
	});
var _concourse$atc$BetaLogin$update = F2(
	function (action, model) {
		var _p5 = action;
		switch (_p5.ctor) {
			case 'Noop':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'AuthFetched':
				if (_p5._0.ctor === 'Ok') {
					var _p6 = _p5._0._0;
					var newInputFields = A2(_elm_lang$core$List$member, _concourse$atc$Concourse$AuthMethodBasic, _p6) ? _elm_lang$core$Maybe$Just(
						{username: '', password: ''}) : _elm_lang$core$Maybe$Nothing;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								authMethods: _elm_lang$core$Maybe$Just(_p6),
								basicAuthInput: newInputFields
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return A3(
						_elm_lang$core$Basics$flip,
						_elm_lang$core$Basics$always,
						A2(_elm_lang$core$Debug$log, 'failed to fetch auth methods', _p5._0._0),
						{ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none});
				}
			case 'NoAuthSubmit':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _concourse$atc$BetaLogin$noAuthSubmit(model.teamName)
				};
			case 'AuthSessionReceived':
				if (_p5._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _elm_lang$navigation$Navigation$newUrl(
							_concourse$atc$BetaLogin$redirectUrl(model.redirect))
					};
				} else {
					return A3(
						_elm_lang$core$Basics$flip,
						_elm_lang$core$Basics$always,
						A2(_elm_lang$core$Debug$log, 'login failed', _p5._0._0),
						{
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{loginFailed: true}),
							_1: _elm_lang$core$Platform_Cmd$none
						});
				}
			case 'BasicAuthUsernameChanged':
				return {
					ctor: '_Tuple2',
					_0: function () {
						var _p7 = model.basicAuthInput;
						if (_p7.ctor === 'Nothing') {
							return A3(
								_elm_lang$core$Basics$flip,
								_elm_lang$core$Basics$always,
								A2(
									_elm_lang$core$Debug$log,
									'input to nonexistent UN field',
									{ctor: '_Tuple0'}),
								model);
						} else {
							return _elm_lang$core$Native_Utils.update(
								model,
								{
									basicAuthInput: _elm_lang$core$Maybe$Just(
										_elm_lang$core$Native_Utils.update(
											_p7._0,
											{username: _p5._0}))
								});
						}
					}(),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'BasicAuthPasswordChanged':
				return {
					ctor: '_Tuple2',
					_0: function () {
						var _p8 = model.basicAuthInput;
						if (_p8.ctor === 'Nothing') {
							return A3(
								_elm_lang$core$Basics$flip,
								_elm_lang$core$Basics$always,
								A2(
									_elm_lang$core$Debug$log,
									'input to nonexistent PW field',
									{ctor: '_Tuple0'}),
								model);
						} else {
							return _elm_lang$core$Native_Utils.update(
								model,
								{
									basicAuthInput: _elm_lang$core$Maybe$Just(
										_elm_lang$core$Native_Utils.update(
											_p8._0,
											{password: _p5._0}))
								});
						}
					}(),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'BasicAuthSubmit':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: function () {
						var _p9 = model.basicAuthInput;
						if (_p9.ctor === 'Nothing') {
							return A2(_elm_lang$core$Debug$log, 'tried to submit illegal basic auth', _elm_lang$core$Platform_Cmd$none);
						} else {
							return A2(_concourse$atc$BetaLogin$basicAuthSubmit, model.teamName, _p9._0);
						}
					}()
				};
			default:
				var _p10 = model.hasTeamSelectionInBrowserHistory;
				if (_p10 === true) {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _elm_lang$navigation$Navigation$back(1)
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _elm_lang$navigation$Navigation$newUrl(
							_concourse$atc$BetaLogin$teamSelectionRoute(model.redirect))
					};
				}
		}
	});
var _concourse$atc$BetaLogin$BasicAuthSubmit = {ctor: 'BasicAuthSubmit'};
var _concourse$atc$BetaLogin$BasicAuthPasswordChanged = function (a) {
	return {ctor: 'BasicAuthPasswordChanged', _0: a};
};
var _concourse$atc$BetaLogin$BasicAuthUsernameChanged = function (a) {
	return {ctor: 'BasicAuthUsernameChanged', _0: a};
};
var _concourse$atc$BetaLogin$viewBasicAuthForm = F2(
	function (methods, loginFailed) {
		return A2(_elm_lang$core$List$member, _concourse$atc$Concourse$AuthMethodBasic, methods) ? _elm_lang$core$Maybe$Just(
			A2(
				_elm_lang$html$Html$form,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('auth-method basic-auth'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$label,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$for('basic-auth-username-input'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('username'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('input-holder'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$input,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$id('basic-auth-username-input'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$type_('text'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$name('username'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onInput(_concourse$atc$BetaLogin$BasicAuthUsernameChanged),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onSubmit(_concourse$atc$BetaLogin$BasicAuthSubmit),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$label,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$for('basic-auth-password-input'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('password'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('input-holder'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$input,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$id('basic-auth-password-input'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$type_('password'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$name('password'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onInput(_concourse$atc$BetaLogin$BasicAuthPasswordChanged),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Events$onSubmit(_concourse$atc$BetaLogin$BasicAuthSubmit),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _concourse$atc$BetaLogin$loginErrMessage(loginFailed),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('login-button'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$button,
													{
														ctor: '::',
														_0: _concourse$atc$StrictEvents$onLeftClick(_concourse$atc$BetaLogin$BasicAuthSubmit),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('login'),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				})) : _elm_lang$core$Maybe$Nothing;
	});
var _concourse$atc$BetaLogin$NoAuthSubmit = {ctor: 'NoAuthSubmit'};
var _concourse$atc$BetaLogin$viewNoAuthButton = A2(
	_elm_lang$html$Html$form,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('auth-method login-button'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$button,
			{
				ctor: '::',
				_0: _concourse$atc$StrictEvents$onLeftClick(_concourse$atc$BetaLogin$NoAuthSubmit),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('login'),
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	});
var _concourse$atc$BetaLogin$loginMethods = function (model) {
	var _p11 = model.authMethods;
	if (_p11.ctor === 'Nothing') {
		return {
			ctor: '::',
			_0: _concourse$atc$BetaLogin$viewLoading,
			_1: {ctor: '[]'}
		};
	} else {
		var _p13 = _p11._0;
		var _p12 = {
			ctor: '_Tuple2',
			_0: A2(_concourse$atc$BetaLogin$viewBasicAuthForm, _p13, model.loginFailed),
			_1: A2(_concourse$atc$BetaLogin$viewOAuthButtons, model.redirect, _p13)
		};
		if (_p12._0.ctor === 'Just') {
			if (_p12._1.ctor === 'Just') {
				return {
					ctor: '::',
					_0: _p12._1._0,
					_1: {
						ctor: '::',
						_0: _concourse$atc$BetaLogin$viewOrBar,
						_1: {
							ctor: '::',
							_0: _p12._0._0,
							_1: {ctor: '[]'}
						}
					}
				};
			} else {
				return {
					ctor: '::',
					_0: _p12._0._0,
					_1: {ctor: '[]'}
				};
			}
		} else {
			if (_p12._1.ctor === 'Just') {
				return {
					ctor: '::',
					_0: _p12._1._0,
					_1: {ctor: '[]'}
				};
			} else {
				return {
					ctor: '::',
					_0: _concourse$atc$BetaLogin$viewNoAuthButton,
					_1: {ctor: '[]'}
				};
			}
		}
	}
};
var _concourse$atc$BetaLogin$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('login-page'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('small-title'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _concourse$atc$StrictEvents$onLeftClick(_concourse$atc$BetaLogin$GoBack),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href(
									_concourse$atc$BetaLogin$teamSelectionRoute(model.redirect)),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$i,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('fa fa-fw fa-chevron-left'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text('back to team selection'),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('login-box auth-methods'),
						_1: {ctor: '[]'}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('auth-methods-title'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('logging in to '),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('bright-text'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(model.teamName),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						},
						_concourse$atc$BetaLogin$loginMethods(model))),
				_1: {ctor: '[]'}
			}
		});
};
var _concourse$atc$BetaLogin$AuthFetched = function (a) {
	return {ctor: 'AuthFetched', _0: a};
};
var _concourse$atc$BetaLogin$init = F3(
	function (ports, teamName, redirect) {
		return {
			ctor: '_Tuple2',
			_0: {teamName: teamName, authMethods: _elm_lang$core$Maybe$Nothing, hasTeamSelectionInBrowserHistory: false, redirect: redirect, basicAuthInput: _elm_lang$core$Maybe$Nothing, loginFailed: false},
			_1: _elm_lang$core$Platform_Cmd$batch(
				{
					ctor: '::',
					_0: A2(
						_elm_lang$core$Task$attempt,
						_concourse$atc$BetaLogin$AuthFetched,
						_concourse$atc$Concourse_AuthMethod$fetchAll(teamName)),
					_1: {
						ctor: '::',
						_0: ports.title('Login - '),
						_1: {ctor: '[]'}
					}
				})
		};
	});
var _concourse$atc$BetaLogin$Noop = {ctor: 'Noop'};

var _elm_community$graph$Graph_Tree$pushMany = F2(
	function (vals, queue) {
		return A3(_elm_lang$core$List$foldl, _avh4$elm_fifo$Fifo$insert, queue, vals);
	});
var _elm_community$graph$Graph_Tree$listForTraversal = F2(
	function (traversal, tree) {
		var acc = _elm_lang$core$Basics$identity;
		var f = F3(
			function (label, children, rest) {
				return function (_p0) {
					return rest(
						A2(
							F2(
								function (x, y) {
									return {ctor: '::', _0: x, _1: y};
								}),
							label,
							_p0));
				};
			});
		return A4(
			traversal,
			f,
			acc,
			tree,
			{ctor: '[]'});
	});
var _elm_community$graph$Graph_Tree$size = function (tree) {
	var _p1 = tree;
	return _p1._0;
};
var _elm_community$graph$Graph_Tree$root = function (tree) {
	var _p2 = tree;
	return _p2._1;
};
var _elm_community$graph$Graph_Tree$height = function (tree) {
	var go = F2(
		function (h, t) {
			var _p3 = _elm_community$graph$Graph_Tree$root(t);
			if (_p3.ctor === 'Just') {
				return A3(
					_elm_lang$core$List$foldl,
					function (_p4) {
						return _elm_lang$core$Basics$max(
							A2(go, h + 1, _p4));
					},
					h + 1,
					_p3._0._1);
			} else {
				return h;
			}
		});
	return A2(go, 0, tree);
};
var _elm_community$graph$Graph_Tree$levelOrder = F3(
	function (visit, acc, tree) {
		var go = F2(
			function (acc, toVisit) {
				go:
				while (true) {
					var _p5 = _avh4$elm_fifo$Fifo$remove(toVisit);
					if (_p5._0.ctor === 'Nothing') {
						return acc;
					} else {
						var _p8 = _p5._1;
						var _p6 = _elm_community$graph$Graph_Tree$root(_p5._0._0);
						if (_p6.ctor === 'Nothing') {
							var _v5 = acc,
								_v6 = _p8;
							acc = _v5;
							toVisit = _v6;
							continue go;
						} else {
							var _p7 = _p6._0._1;
							var _v7 = A3(visit, _p6._0._0, _p7, acc),
								_v8 = A2(_elm_community$graph$Graph_Tree$pushMany, _p7, _p8);
							acc = _v7;
							toVisit = _v8;
							continue go;
						}
					}
				}
			});
		return A2(
			go,
			acc,
			A2(_avh4$elm_fifo$Fifo$insert, tree, _avh4$elm_fifo$Fifo$empty));
	});
var _elm_community$graph$Graph_Tree$levelOrderList = _elm_community$graph$Graph_Tree$listForTraversal(_elm_community$graph$Graph_Tree$levelOrder);
var _elm_community$graph$Graph_Tree$postOrder = F3(
	function (visit, acc, tree) {
		var folder = _elm_lang$core$Basics$flip(
			_elm_community$graph$Graph_Tree$postOrder(visit));
		var _p9 = _elm_community$graph$Graph_Tree$root(tree);
		if (_p9.ctor === 'Nothing') {
			return acc;
		} else {
			var _p10 = _p9._0._1;
			return A3(
				visit,
				_p9._0._0,
				_p10,
				A3(_elm_lang$core$List$foldl, folder, acc, _p10));
		}
	});
var _elm_community$graph$Graph_Tree$postOrderList = _elm_community$graph$Graph_Tree$listForTraversal(_elm_community$graph$Graph_Tree$postOrder);
var _elm_community$graph$Graph_Tree$preOrder = F3(
	function (visit, acc, tree) {
		var folder = _elm_lang$core$Basics$flip(
			_elm_community$graph$Graph_Tree$preOrder(visit));
		var _p11 = _elm_community$graph$Graph_Tree$root(tree);
		if (_p11.ctor === 'Nothing') {
			return acc;
		} else {
			var _p12 = _p11._0._1;
			return A3(
				_elm_lang$core$List$foldl,
				folder,
				A3(visit, _p11._0._0, _p12, acc),
				_p12);
		}
	});
var _elm_community$graph$Graph_Tree$preOrderList = _elm_community$graph$Graph_Tree$listForTraversal(_elm_community$graph$Graph_Tree$preOrder);
var _elm_community$graph$Graph_Tree$MkTree = F2(
	function (a, b) {
		return {ctor: 'MkTree', _0: a, _1: b};
	});
var _elm_community$graph$Graph_Tree$empty = A2(_elm_community$graph$Graph_Tree$MkTree, 0, _elm_lang$core$Maybe$Nothing);
var _elm_community$graph$Graph_Tree$isEmpty = function (tree) {
	return _elm_lang$core$Native_Utils.eq(tree, _elm_community$graph$Graph_Tree$empty);
};
var _elm_community$graph$Graph_Tree$inner = F2(
	function (label, children) {
		var nonEmptyChildren = A2(
			_elm_lang$core$List$filter,
			function (_p13) {
				return !_elm_community$graph$Graph_Tree$isEmpty(_p13);
			},
			children);
		var totalSize = A3(
			_elm_lang$core$List$foldl,
			function (_p14) {
				return F2(
					function (x, y) {
						return x + y;
					})(
					_elm_community$graph$Graph_Tree$size(_p14));
			},
			1,
			nonEmptyChildren);
		return A2(
			_elm_community$graph$Graph_Tree$MkTree,
			totalSize,
			_elm_lang$core$Maybe$Just(
				{ctor: '_Tuple2', _0: label, _1: nonEmptyChildren}));
	});
var _elm_community$graph$Graph_Tree$leaf = function (val) {
	return A2(
		_elm_community$graph$Graph_Tree$inner,
		val,
		{ctor: '[]'});
};
var _elm_community$graph$Graph_Tree$unfoldTree = F2(
	function (next, seed) {
		var _p15 = next(seed);
		var label = _p15._0;
		var seeds = _p15._1;
		return A2(
			_elm_community$graph$Graph_Tree$inner,
			label,
			A2(
				_elm_lang$core$List$map,
				_elm_community$graph$Graph_Tree$unfoldTree(next),
				seeds));
	});
var _elm_community$graph$Graph_Tree$unfoldForest = F2(
	function (next, seeds) {
		return A2(
			_elm_lang$core$List$map,
			_elm_community$graph$Graph_Tree$unfoldTree(next),
			seeds);
	});

var _elm_lang$core$Native_Bitwise = function() {

return {
	and: F2(function and(a, b) { return a & b; }),
	or: F2(function or(a, b) { return a | b; }),
	xor: F2(function xor(a, b) { return a ^ b; }),
	complement: function complement(a) { return ~a; },
	shiftLeftBy: F2(function(offset, a) { return a << offset; }),
	shiftRightBy: F2(function(offset, a) { return a >> offset; }),
	shiftRightZfBy: F2(function(offset, a) { return a >>> offset; })
};

}();

var _elm_lang$core$Bitwise$shiftRightZfBy = _elm_lang$core$Native_Bitwise.shiftRightZfBy;
var _elm_lang$core$Bitwise$shiftRightBy = _elm_lang$core$Native_Bitwise.shiftRightBy;
var _elm_lang$core$Bitwise$shiftLeftBy = _elm_lang$core$Native_Bitwise.shiftLeftBy;
var _elm_lang$core$Bitwise$complement = _elm_lang$core$Native_Bitwise.complement;
var _elm_lang$core$Bitwise$xor = _elm_lang$core$Native_Bitwise.xor;
var _elm_lang$core$Bitwise$or = _elm_lang$core$Native_Bitwise.or;
var _elm_lang$core$Bitwise$and = _elm_lang$core$Native_Bitwise.and;

var _elm_community$intdict$IntDict$combineBits = F3(
	function (a, b, mask) {
		return (a & (~mask)) | (b & mask);
	});
var _elm_community$intdict$IntDict$foldr = F3(
	function (f, acc, dict) {
		foldr:
		while (true) {
			var _p0 = dict;
			switch (_p0.ctor) {
				case 'Empty':
					return acc;
				case 'Leaf':
					var _p1 = _p0._0;
					return A3(f, _p1.key, _p1.value, acc);
				default:
					var _p2 = _p0._0;
					var _v1 = f,
						_v2 = A3(_elm_community$intdict$IntDict$foldr, f, acc, _p2.right),
						_v3 = _p2.left;
					f = _v1;
					acc = _v2;
					dict = _v3;
					continue foldr;
			}
		}
	});
var _elm_community$intdict$IntDict$keys = function (dict) {
	return A3(
		_elm_community$intdict$IntDict$foldr,
		F3(
			function (key, value, keyList) {
				return {ctor: '::', _0: key, _1: keyList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_community$intdict$IntDict$values = function (dict) {
	return A3(
		_elm_community$intdict$IntDict$foldr,
		F3(
			function (key, value, valueList) {
				return {ctor: '::', _0: value, _1: valueList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_community$intdict$IntDict$toList = function (dict) {
	return A3(
		_elm_community$intdict$IntDict$foldr,
		F3(
			function (key, value, list) {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: key, _1: value},
					_1: list
				};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_community$intdict$IntDict$toString = function (dict) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'IntDict.fromList ',
		_elm_lang$core$Basics$toString(
			_elm_community$intdict$IntDict$toList(dict)));
};
var _elm_community$intdict$IntDict$foldl = F3(
	function (f, acc, dict) {
		foldl:
		while (true) {
			var _p3 = dict;
			switch (_p3.ctor) {
				case 'Empty':
					return acc;
				case 'Leaf':
					var _p4 = _p3._0;
					return A3(f, _p4.key, _p4.value, acc);
				default:
					var _p5 = _p3._0;
					var _v5 = f,
						_v6 = A3(_elm_community$intdict$IntDict$foldl, f, acc, _p5.left),
						_v7 = _p5.right;
					f = _v5;
					acc = _v6;
					dict = _v7;
					continue foldl;
			}
		}
	});
var _elm_community$intdict$IntDict$findMax = function (dict) {
	findMax:
	while (true) {
		var _p6 = dict;
		switch (_p6.ctor) {
			case 'Empty':
				return _elm_lang$core$Maybe$Nothing;
			case 'Leaf':
				var _p7 = _p6._0;
				return _elm_lang$core$Maybe$Just(
					{ctor: '_Tuple2', _0: _p7.key, _1: _p7.value});
			default:
				var _v9 = _p6._0.right;
				dict = _v9;
				continue findMax;
		}
	}
};
var _elm_community$intdict$IntDict$findMin = function (dict) {
	findMin:
	while (true) {
		var _p8 = dict;
		switch (_p8.ctor) {
			case 'Empty':
				return _elm_lang$core$Maybe$Nothing;
			case 'Leaf':
				var _p9 = _p8._0;
				return _elm_lang$core$Maybe$Just(
					{ctor: '_Tuple2', _0: _p9.key, _1: _p9.value});
			default:
				var _v11 = _p8._0.left;
				dict = _v11;
				continue findMin;
		}
	}
};
var _elm_community$intdict$IntDict$size = function (dict) {
	var _p10 = dict;
	switch (_p10.ctor) {
		case 'Empty':
			return 0;
		case 'Leaf':
			return 1;
		default:
			return _p10._0.size;
	}
};
var _elm_community$intdict$IntDict$isEmpty = function (dict) {
	var _p11 = dict;
	if (_p11.ctor === 'Empty') {
		return true;
	} else {
		return false;
	}
};
var _elm_community$intdict$IntDict$highestBitSet = function (n) {
	var shiftOr = F2(
		function (i, shift) {
			return i | (i >>> shift);
		});
	var n1 = A2(shiftOr, n, 1);
	var n2 = A2(shiftOr, n1, 2);
	var n3 = A2(shiftOr, n2, 4);
	var n4 = A2(shiftOr, n3, 8);
	var n5 = A2(shiftOr, n4, 16);
	return n5 & (~(n5 >>> 1));
};
var _elm_community$intdict$IntDict$signBit = _elm_community$intdict$IntDict$highestBitSet(-1);
var _elm_community$intdict$IntDict$mostSignificantBranchingBit = F2(
	function (a, b) {
		return (_elm_lang$core$Native_Utils.eq(a, _elm_community$intdict$IntDict$signBit) || _elm_lang$core$Native_Utils.eq(b, _elm_community$intdict$IntDict$signBit)) ? _elm_community$intdict$IntDict$signBit : A2(_elm_lang$core$Basics$max, a, b);
	});
var _elm_community$intdict$IntDict$isBranchingBitSet = function (p) {
	return function (_p12) {
		return A2(
			F2(
				function (x, y) {
					return !_elm_lang$core$Native_Utils.eq(x, y);
				}),
			0,
			p.branchingBit & (_elm_community$intdict$IntDict$signBit ^ _p12));
	};
};
var _elm_community$intdict$IntDict$higherBitMask = function (branchingBit) {
	return branchingBit ^ (~(branchingBit - 1));
};
var _elm_community$intdict$IntDict$prefixMatches = F2(
	function (p, n) {
		return _elm_lang$core$Native_Utils.eq(
			n & _elm_community$intdict$IntDict$higherBitMask(p.branchingBit),
			p.prefixBits);
	});
var _elm_community$intdict$IntDict$get = F2(
	function (key, dict) {
		get:
		while (true) {
			var _p13 = dict;
			switch (_p13.ctor) {
				case 'Empty':
					return _elm_lang$core$Maybe$Nothing;
				case 'Leaf':
					var _p14 = _p13._0;
					return _elm_lang$core$Native_Utils.eq(_p14.key, key) ? _elm_lang$core$Maybe$Just(_p14.value) : _elm_lang$core$Maybe$Nothing;
				default:
					var _p15 = _p13._0;
					if (!A2(_elm_community$intdict$IntDict$prefixMatches, _p15.prefix, key)) {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						if (A2(_elm_community$intdict$IntDict$isBranchingBitSet, _p15.prefix, key)) {
							var _v15 = key,
								_v16 = _p15.right;
							key = _v15;
							dict = _v16;
							continue get;
						} else {
							var _v17 = key,
								_v18 = _p15.left;
							key = _v17;
							dict = _v18;
							continue get;
						}
					}
			}
		}
	});
var _elm_community$intdict$IntDict$member = F2(
	function (key, dict) {
		var _p16 = A2(_elm_community$intdict$IntDict$get, key, dict);
		if (_p16.ctor === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var _elm_community$intdict$IntDict$lcp = F2(
	function (x, y) {
		var diff = x ^ y;
		var branchingBit = _elm_community$intdict$IntDict$highestBitSet(diff);
		var mask = _elm_community$intdict$IntDict$higherBitMask(branchingBit);
		var prefixBits = x & mask;
		return {prefixBits: prefixBits, branchingBit: branchingBit};
	});
var _elm_community$intdict$IntDict$isValidKey = function (k) {
	return _elm_lang$core$Native_Utils.eq(k | 0, k);
};
var _elm_community$intdict$IntDict$KeyPrefix = F2(
	function (a, b) {
		return {prefixBits: a, branchingBit: b};
	});
var _elm_community$intdict$IntDict$InnerType = F4(
	function (a, b, c, d) {
		return {prefix: a, left: b, right: c, size: d};
	});
var _elm_community$intdict$IntDict$Inner = function (a) {
	return {ctor: 'Inner', _0: a};
};
var _elm_community$intdict$IntDict$inner = F3(
	function (p, l, r) {
		var _p17 = {ctor: '_Tuple2', _0: l, _1: r};
		if (_p17._0.ctor === 'Empty') {
			return r;
		} else {
			if (_p17._1.ctor === 'Empty') {
				return l;
			} else {
				return _elm_community$intdict$IntDict$Inner(
					{
						prefix: p,
						left: l,
						right: r,
						size: _elm_community$intdict$IntDict$size(l) + _elm_community$intdict$IntDict$size(r)
					});
			}
		}
	});
var _elm_community$intdict$IntDict$Leaf = function (a) {
	return {ctor: 'Leaf', _0: a};
};
var _elm_community$intdict$IntDict$leaf = F2(
	function (k, v) {
		return _elm_community$intdict$IntDict$Leaf(
			{key: k, value: v});
	});
var _elm_community$intdict$IntDict$singleton = F2(
	function (key, value) {
		return A2(_elm_community$intdict$IntDict$leaf, key, value);
	});
var _elm_community$intdict$IntDict$Empty = {ctor: 'Empty'};
var _elm_community$intdict$IntDict$empty = _elm_community$intdict$IntDict$Empty;
var _elm_community$intdict$IntDict$update = F3(
	function (key, alter, dict) {
		var join = F2(
			function (_p19, _p18) {
				var _p20 = _p19;
				var _p24 = _p20._1;
				var _p21 = _p18;
				var _p23 = _p21._1;
				var _p22 = _p21._0;
				var prefix = A2(_elm_community$intdict$IntDict$lcp, _p20._0, _p22);
				return A2(_elm_community$intdict$IntDict$isBranchingBitSet, prefix, _p22) ? A3(_elm_community$intdict$IntDict$inner, prefix, _p24, _p23) : A3(_elm_community$intdict$IntDict$inner, prefix, _p23, _p24);
			});
		var alteredNode = function (mv) {
			var _p25 = alter(mv);
			if (_p25.ctor === 'Just') {
				return A2(_elm_community$intdict$IntDict$leaf, key, _p25._0);
			} else {
				return _elm_community$intdict$IntDict$empty;
			}
		};
		var _p26 = dict;
		switch (_p26.ctor) {
			case 'Empty':
				return alteredNode(_elm_lang$core$Maybe$Nothing);
			case 'Leaf':
				var _p27 = _p26._0;
				return _elm_lang$core$Native_Utils.eq(_p27.key, key) ? alteredNode(
					_elm_lang$core$Maybe$Just(_p27.value)) : A2(
					join,
					{
						ctor: '_Tuple2',
						_0: key,
						_1: alteredNode(_elm_lang$core$Maybe$Nothing)
					},
					{ctor: '_Tuple2', _0: _p27.key, _1: dict});
			default:
				var _p28 = _p26._0;
				return A2(_elm_community$intdict$IntDict$prefixMatches, _p28.prefix, key) ? (A2(_elm_community$intdict$IntDict$isBranchingBitSet, _p28.prefix, key) ? A3(
					_elm_community$intdict$IntDict$inner,
					_p28.prefix,
					_p28.left,
					A3(_elm_community$intdict$IntDict$update, key, alter, _p28.right)) : A3(
					_elm_community$intdict$IntDict$inner,
					_p28.prefix,
					A3(_elm_community$intdict$IntDict$update, key, alter, _p28.left),
					_p28.right)) : A2(
					join,
					{
						ctor: '_Tuple2',
						_0: key,
						_1: alteredNode(_elm_lang$core$Maybe$Nothing)
					},
					{ctor: '_Tuple2', _0: _p28.prefix.prefixBits, _1: dict});
		}
	});
var _elm_community$intdict$IntDict$insert = F3(
	function (key, value, dict) {
		return A3(
			_elm_community$intdict$IntDict$update,
			key,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Maybe$Just(value)),
			dict);
	});
var _elm_community$intdict$IntDict$remove = F2(
	function (key, dict) {
		return A3(
			_elm_community$intdict$IntDict$update,
			key,
			_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			dict);
	});
var _elm_community$intdict$IntDict$filter = F2(
	function (predicate, dict) {
		var add = F3(
			function (k, v, d) {
				return A2(predicate, k, v) ? A3(_elm_community$intdict$IntDict$insert, k, v, d) : d;
			});
		return A3(_elm_community$intdict$IntDict$foldl, add, _elm_community$intdict$IntDict$empty, dict);
	});
var _elm_community$intdict$IntDict$map = F2(
	function (f, dict) {
		var _p29 = dict;
		switch (_p29.ctor) {
			case 'Empty':
				return _elm_community$intdict$IntDict$empty;
			case 'Leaf':
				var _p30 = _p29._0;
				return A2(
					_elm_community$intdict$IntDict$leaf,
					_p30.key,
					A2(f, _p30.key, _p30.value));
			default:
				var _p31 = _p29._0;
				return A3(
					_elm_community$intdict$IntDict$inner,
					_p31.prefix,
					A2(_elm_community$intdict$IntDict$map, f, _p31.left),
					A2(_elm_community$intdict$IntDict$map, f, _p31.right));
		}
	});
var _elm_community$intdict$IntDict$partition = F2(
	function (predicate, dict) {
		var add = F3(
			function (key, value, _p32) {
				var _p33 = _p32;
				var _p35 = _p33._1;
				var _p34 = _p33._0;
				return A2(predicate, key, value) ? {
					ctor: '_Tuple2',
					_0: A3(_elm_community$intdict$IntDict$insert, key, value, _p34),
					_1: _p35
				} : {
					ctor: '_Tuple2',
					_0: _p34,
					_1: A3(_elm_community$intdict$IntDict$insert, key, value, _p35)
				};
			});
		return A3(
			_elm_community$intdict$IntDict$foldl,
			add,
			{ctor: '_Tuple2', _0: _elm_community$intdict$IntDict$empty, _1: _elm_community$intdict$IntDict$empty},
			dict);
	});
var _elm_community$intdict$IntDict$fromList = function (pairs) {
	return A3(
		_elm_lang$core$List$foldl,
		_elm_lang$core$Basics$uncurry(_elm_community$intdict$IntDict$insert),
		_elm_community$intdict$IntDict$empty,
		pairs);
};
var _elm_community$intdict$IntDict$before = F2(
	function (key, dict) {
		var go = F2(
			function (def, dict) {
				go:
				while (true) {
					var _p36 = dict;
					switch (_p36.ctor) {
						case 'Empty':
							return _elm_community$intdict$IntDict$findMax(def);
						case 'Leaf':
							var _p37 = _p36._0;
							return (_elm_lang$core$Native_Utils.cmp(_p37.key, key) > -1) ? _elm_community$intdict$IntDict$findMax(def) : _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple2', _0: _p37.key, _1: _p37.value});
						default:
							var _p38 = _p36._0;
							if (!A2(_elm_community$intdict$IntDict$prefixMatches, _p38.prefix, key)) {
								return (_elm_lang$core$Native_Utils.cmp(_p38.prefix.prefixBits, key) > 0) ? _elm_community$intdict$IntDict$findMax(def) : _elm_community$intdict$IntDict$findMax(_p38.right);
							} else {
								if (A2(_elm_community$intdict$IntDict$isBranchingBitSet, _p38.prefix, key)) {
									var _v28 = _p38.left,
										_v29 = _p38.right;
									def = _v28;
									dict = _v29;
									continue go;
								} else {
									var _v30 = def,
										_v31 = _p38.left;
									def = _v30;
									dict = _v31;
									continue go;
								}
							}
					}
				}
			});
		return A2(go, _elm_community$intdict$IntDict$Empty, dict);
	});
var _elm_community$intdict$IntDict$after = F2(
	function (key, dict) {
		var go = F2(
			function (def, dict) {
				go:
				while (true) {
					var _p39 = dict;
					switch (_p39.ctor) {
						case 'Empty':
							return _elm_community$intdict$IntDict$findMin(def);
						case 'Leaf':
							var _p40 = _p39._0;
							return (_elm_lang$core$Native_Utils.cmp(_p40.key, key) < 1) ? _elm_community$intdict$IntDict$findMin(def) : _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple2', _0: _p40.key, _1: _p40.value});
						default:
							var _p41 = _p39._0;
							if (!A2(_elm_community$intdict$IntDict$prefixMatches, _p41.prefix, key)) {
								return (_elm_lang$core$Native_Utils.cmp(_p41.prefix.prefixBits, key) < 0) ? _elm_community$intdict$IntDict$findMin(def) : _elm_community$intdict$IntDict$findMin(_p41.left);
							} else {
								if (A2(_elm_community$intdict$IntDict$isBranchingBitSet, _p41.prefix, key)) {
									var _v33 = def,
										_v34 = _p41.right;
									def = _v33;
									dict = _v34;
									continue go;
								} else {
									var _v35 = _p41.right,
										_v36 = _p41.left;
									def = _v35;
									dict = _v36;
									continue go;
								}
							}
					}
				}
			});
		return A2(go, _elm_community$intdict$IntDict$Empty, dict);
	});
var _elm_community$intdict$IntDict$Right = {ctor: 'Right'};
var _elm_community$intdict$IntDict$Left = {ctor: 'Left'};
var _elm_community$intdict$IntDict$Disjunct = F2(
	function (a, b) {
		return {ctor: 'Disjunct', _0: a, _1: b};
	});
var _elm_community$intdict$IntDict$Parent = F2(
	function (a, b) {
		return {ctor: 'Parent', _0: a, _1: b};
	});
var _elm_community$intdict$IntDict$SamePrefix = {ctor: 'SamePrefix'};
var _elm_community$intdict$IntDict$determineBranchRelation = F2(
	function (l, r) {
		var childEdge = F2(
			function (prefix, c) {
				return A2(_elm_community$intdict$IntDict$isBranchingBitSet, prefix, c.prefix.prefixBits) ? _elm_community$intdict$IntDict$Right : _elm_community$intdict$IntDict$Left;
			});
		var rp = r.prefix;
		var lp = l.prefix;
		var mask = _elm_community$intdict$IntDict$highestBitSet(
			A2(_elm_community$intdict$IntDict$mostSignificantBranchingBit, lp.branchingBit, rp.branchingBit));
		var modifiedRightPrefix = A3(_elm_community$intdict$IntDict$combineBits, rp.prefixBits, ~lp.prefixBits, mask);
		var prefix = A2(_elm_community$intdict$IntDict$lcp, lp.prefixBits, modifiedRightPrefix);
		return _elm_lang$core$Native_Utils.eq(lp, rp) ? _elm_community$intdict$IntDict$SamePrefix : (_elm_lang$core$Native_Utils.eq(prefix, lp) ? A2(
			_elm_community$intdict$IntDict$Parent,
			_elm_community$intdict$IntDict$Left,
			A2(childEdge, l.prefix, r)) : (_elm_lang$core$Native_Utils.eq(prefix, rp) ? A2(
			_elm_community$intdict$IntDict$Parent,
			_elm_community$intdict$IntDict$Right,
			A2(childEdge, r.prefix, l)) : A2(
			_elm_community$intdict$IntDict$Disjunct,
			prefix,
			A2(childEdge, prefix, l))));
	});
var _elm_community$intdict$IntDict$uniteWith = F3(
	function (merger, l, r) {
		var mergeWith = F3(
			function (key, left, right) {
				var _p42 = {ctor: '_Tuple2', _0: left, _1: right};
				if (_p42._0.ctor === 'Just') {
					if (_p42._1.ctor === 'Just') {
						return _elm_lang$core$Maybe$Just(
							A3(merger, key, _p42._0._0, _p42._1._0));
					} else {
						return left;
					}
				} else {
					if (_p42._1.ctor === 'Just') {
						return right;
					} else {
						return _elm_lang$core$Native_Utils.crashCase(
							'IntDict',
							{
								start: {line: 709, column: 13},
								end: {line: 720, column: 154}
							},
							_p42)('IntDict.uniteWith: mergeWith was called with 2 Nothings. This is a bug in the implementation, please file a bug report!');
					}
				}
			});
		var _p44 = {ctor: '_Tuple2', _0: l, _1: r};
		_v38_2:
		do {
			_v38_1:
			do {
				switch (_p44._0.ctor) {
					case 'Empty':
						return r;
					case 'Leaf':
						switch (_p44._1.ctor) {
							case 'Empty':
								break _v38_1;
							case 'Leaf':
								break _v38_2;
							default:
								break _v38_2;
						}
					default:
						switch (_p44._1.ctor) {
							case 'Empty':
								break _v38_1;
							case 'Leaf':
								var _p46 = _p44._1._0;
								return A3(
									_elm_community$intdict$IntDict$update,
									_p46.key,
									function (l_) {
										return A3(
											mergeWith,
											_p46.key,
											l_,
											_elm_lang$core$Maybe$Just(_p46.value));
									},
									l);
							default:
								var _p49 = _p44._1._0;
								var _p48 = _p44._0._0;
								var _p47 = A2(_elm_community$intdict$IntDict$determineBranchRelation, _p48, _p49);
								switch (_p47.ctor) {
									case 'SamePrefix':
										return A3(
											_elm_community$intdict$IntDict$inner,
											_p48.prefix,
											A3(_elm_community$intdict$IntDict$uniteWith, merger, _p48.left, _p49.left),
											A3(_elm_community$intdict$IntDict$uniteWith, merger, _p48.right, _p49.right));
									case 'Parent':
										if (_p47._0.ctor === 'Left') {
											if (_p47._1.ctor === 'Right') {
												return A3(
													_elm_community$intdict$IntDict$inner,
													_p48.prefix,
													_p48.left,
													A3(_elm_community$intdict$IntDict$uniteWith, merger, _p48.right, r));
											} else {
												return A3(
													_elm_community$intdict$IntDict$inner,
													_p48.prefix,
													A3(_elm_community$intdict$IntDict$uniteWith, merger, _p48.left, r),
													_p48.right);
											}
										} else {
											if (_p47._1.ctor === 'Right') {
												return A3(
													_elm_community$intdict$IntDict$inner,
													_p49.prefix,
													_p49.left,
													A3(_elm_community$intdict$IntDict$uniteWith, merger, l, _p49.right));
											} else {
												return A3(
													_elm_community$intdict$IntDict$inner,
													_p49.prefix,
													A3(_elm_community$intdict$IntDict$uniteWith, merger, l, _p49.left),
													_p49.right);
											}
										}
									default:
										if (_p47._1.ctor === 'Left') {
											return A3(_elm_community$intdict$IntDict$inner, _p47._0, l, r);
										} else {
											return A3(_elm_community$intdict$IntDict$inner, _p47._0, r, l);
										}
								}
						}
				}
			} while(false);
			return l;
		} while(false);
		var _p45 = _p44._0._0;
		return A3(
			_elm_community$intdict$IntDict$update,
			_p45.key,
			function (r_) {
				return A3(
					mergeWith,
					_p45.key,
					_elm_lang$core$Maybe$Just(_p45.value),
					r_);
			},
			r);
	});
var _elm_community$intdict$IntDict$union = _elm_community$intdict$IntDict$uniteWith(
	F3(
		function (key, old, $new) {
			return old;
		}));
var _elm_community$intdict$IntDict$intersect = F2(
	function (l, r) {
		intersect:
		while (true) {
			var _p50 = {ctor: '_Tuple2', _0: l, _1: r};
			_v40_2:
			do {
				_v40_1:
				do {
					switch (_p50._0.ctor) {
						case 'Empty':
							return _elm_community$intdict$IntDict$Empty;
						case 'Leaf':
							switch (_p50._1.ctor) {
								case 'Empty':
									break _v40_1;
								case 'Leaf':
									break _v40_2;
								default:
									break _v40_2;
							}
						default:
							switch (_p50._1.ctor) {
								case 'Empty':
									break _v40_1;
								case 'Leaf':
									var _p52 = _p50._1._0;
									var _p51 = A2(_elm_community$intdict$IntDict$get, _p52.key, l);
									if (_p51.ctor === 'Just') {
										return A2(_elm_community$intdict$IntDict$leaf, _p52.key, _p51._0);
									} else {
										return _elm_community$intdict$IntDict$Empty;
									}
								default:
									var _p55 = _p50._1._0;
									var _p54 = _p50._0._0;
									var _p53 = A2(_elm_community$intdict$IntDict$determineBranchRelation, _p54, _p55);
									switch (_p53.ctor) {
										case 'SamePrefix':
											return A3(
												_elm_community$intdict$IntDict$inner,
												_p54.prefix,
												A2(_elm_community$intdict$IntDict$intersect, _p54.left, _p55.left),
												A2(_elm_community$intdict$IntDict$intersect, _p54.right, _p55.right));
										case 'Parent':
											if (_p53._0.ctor === 'Left') {
												if (_p53._1.ctor === 'Right') {
													var _v43 = _p54.right,
														_v44 = r;
													l = _v43;
													r = _v44;
													continue intersect;
												} else {
													var _v45 = _p54.left,
														_v46 = r;
													l = _v45;
													r = _v46;
													continue intersect;
												}
											} else {
												if (_p53._1.ctor === 'Right') {
													var _v47 = l,
														_v48 = _p55.right;
													l = _v47;
													r = _v48;
													continue intersect;
												} else {
													var _v49 = l,
														_v50 = _p55.left;
													l = _v49;
													r = _v50;
													continue intersect;
												}
											}
										default:
											return _elm_community$intdict$IntDict$Empty;
									}
							}
					}
				} while(false);
				return _elm_community$intdict$IntDict$Empty;
			} while(false);
			return A2(_elm_community$intdict$IntDict$member, _p50._0._0.key, r) ? l : _elm_community$intdict$IntDict$Empty;
		}
	});
var _elm_community$intdict$IntDict$diff = F2(
	function (l, r) {
		diff:
		while (true) {
			var _p56 = {ctor: '_Tuple2', _0: l, _1: r};
			_v51_2:
			do {
				_v51_1:
				do {
					switch (_p56._0.ctor) {
						case 'Empty':
							return _elm_community$intdict$IntDict$Empty;
						case 'Leaf':
							switch (_p56._1.ctor) {
								case 'Empty':
									break _v51_1;
								case 'Leaf':
									break _v51_2;
								default:
									break _v51_2;
							}
						default:
							switch (_p56._1.ctor) {
								case 'Empty':
									break _v51_1;
								case 'Leaf':
									return A2(_elm_community$intdict$IntDict$remove, _p56._1._0.key, l);
								default:
									var _p59 = _p56._1._0;
									var _p58 = _p56._0._0;
									var _p57 = A2(_elm_community$intdict$IntDict$determineBranchRelation, _p58, _p59);
									switch (_p57.ctor) {
										case 'SamePrefix':
											return A3(
												_elm_community$intdict$IntDict$inner,
												_p58.prefix,
												A2(_elm_community$intdict$IntDict$diff, _p58.left, _p59.left),
												A2(_elm_community$intdict$IntDict$diff, _p58.right, _p59.right));
										case 'Parent':
											if (_p57._0.ctor === 'Left') {
												if (_p57._1.ctor === 'Left') {
													return A3(
														_elm_community$intdict$IntDict$inner,
														_p58.prefix,
														A2(_elm_community$intdict$IntDict$diff, _p58.left, r),
														_p58.right);
												} else {
													return A3(
														_elm_community$intdict$IntDict$inner,
														_p58.prefix,
														_p58.left,
														A2(_elm_community$intdict$IntDict$diff, _p58.right, r));
												}
											} else {
												if (_p57._1.ctor === 'Left') {
													var _v53 = l,
														_v54 = _p59.left;
													l = _v53;
													r = _v54;
													continue diff;
												} else {
													var _v55 = l,
														_v56 = _p59.right;
													l = _v55;
													r = _v56;
													continue diff;
												}
											}
										default:
											return l;
									}
							}
					}
				} while(false);
				return l;
			} while(false);
			return A2(_elm_community$intdict$IntDict$member, _p56._0._0.key, r) ? _elm_community$intdict$IntDict$Empty : l;
		}
	});
var _elm_community$intdict$IntDict$merge = F6(
	function (left, both, right, l, r, acc) {
		var m = A3(_elm_community$intdict$IntDict$merge, left, both, right);
		var _p60 = {ctor: '_Tuple2', _0: l, _1: r};
		_v57_2:
		do {
			_v57_1:
			do {
				switch (_p60._0.ctor) {
					case 'Empty':
						return A3(_elm_community$intdict$IntDict$foldl, right, acc, r);
					case 'Leaf':
						switch (_p60._1.ctor) {
							case 'Empty':
								break _v57_1;
							case 'Leaf':
								break _v57_2;
							default:
								break _v57_2;
						}
					default:
						switch (_p60._1.ctor) {
							case 'Empty':
								break _v57_1;
							case 'Leaf':
								var _p64 = _p60._1._0;
								var _p63 = A2(_elm_community$intdict$IntDict$get, _p64.key, l);
								if (_p63.ctor === 'Nothing') {
									return A3(
										m,
										l,
										_elm_community$intdict$IntDict$Empty,
										A3(right, _p64.key, _p64.value, acc));
								} else {
									return A3(
										m,
										A2(_elm_community$intdict$IntDict$remove, _p64.key, l),
										_elm_community$intdict$IntDict$Empty,
										A4(both, _p64.key, _p63._0, _p64.value, acc));
								}
							default:
								var _p67 = _p60._1._0;
								var _p66 = _p60._0._0;
								var _p65 = A2(_elm_community$intdict$IntDict$determineBranchRelation, _p66, _p67);
								switch (_p65.ctor) {
									case 'SamePrefix':
										return A3(
											m,
											_p66.right,
											_p67.right,
											A3(m, _p66.left, _p67.left, acc));
									case 'Parent':
										if (_p65._0.ctor === 'Left') {
											if (_p65._1.ctor === 'Left') {
												return A3(
													m,
													_p66.right,
													_elm_community$intdict$IntDict$Empty,
													A3(m, _p66.left, r, acc));
											} else {
												return A3(
													m,
													_p66.right,
													r,
													A3(m, _p66.left, _elm_community$intdict$IntDict$Empty, acc));
											}
										} else {
											if (_p65._1.ctor === 'Left') {
												return A3(
													m,
													_elm_community$intdict$IntDict$Empty,
													_p67.right,
													A3(m, l, _p67.left, acc));
											} else {
												return A3(
													m,
													l,
													_p67.right,
													A3(m, _elm_community$intdict$IntDict$Empty, _p67.left, acc));
											}
										}
									default:
										if (_p65._1.ctor === 'Left') {
											return A3(
												m,
												_elm_community$intdict$IntDict$Empty,
												r,
												A3(m, l, _elm_community$intdict$IntDict$Empty, acc));
										} else {
											return A3(
												m,
												l,
												_elm_community$intdict$IntDict$Empty,
												A3(m, _elm_community$intdict$IntDict$Empty, r, acc));
										}
								}
						}
				}
			} while(false);
			return A3(_elm_community$intdict$IntDict$foldl, left, acc, l);
		} while(false);
		var _p62 = _p60._0._0;
		var _p61 = A2(_elm_community$intdict$IntDict$get, _p62.key, r);
		if (_p61.ctor === 'Nothing') {
			return A3(
				m,
				_elm_community$intdict$IntDict$Empty,
				r,
				A3(left, _p62.key, _p62.value, acc));
		} else {
			return A3(
				m,
				_elm_community$intdict$IntDict$Empty,
				A2(_elm_community$intdict$IntDict$remove, _p62.key, r),
				A4(both, _p62.key, _p62.value, _p61._0, acc));
		}
	});

var _elm_community$graph$Graph$ignorePath = F4(
	function (visit, path, _p0, acc) {
		var _p1 = path;
		if (_p1.ctor === '[]') {
			return _elm_lang$core$Native_Utils.crashCase(
				'Graph',
				{
					start: {line: 880, column: 3},
					end: {line: 884, column: 20}
				},
				_p1)('Graph.ignorePath: No algorithm should ever pass an empty path into this BfsNodeVisitor.');
		} else {
			return A2(visit, _p1._0, acc);
		}
	});
var _elm_community$graph$Graph$onFinish = F3(
	function (visitor, ctx, acc) {
		return {
			ctor: '_Tuple2',
			_0: acc,
			_1: visitor(ctx)
		};
	});
var _elm_community$graph$Graph$onDiscovery = F3(
	function (visitor, ctx, acc) {
		return {
			ctor: '_Tuple2',
			_0: A2(visitor, ctx, acc),
			_1: _elm_lang$core$Basics$identity
		};
	});
var _elm_community$graph$Graph$alongIncomingEdges = function (ctx) {
	return _elm_community$intdict$IntDict$keys(ctx.incoming);
};
var _elm_community$graph$Graph$alongOutgoingEdges = function (ctx) {
	return _elm_community$intdict$IntDict$keys(ctx.outgoing);
};
var _elm_community$graph$Graph$applyEdgeDiff = F3(
	function (nodeId, diff, graphRep) {
		var updateOutgoingEdge = F2(
			function (upd, node) {
				return _elm_lang$core$Native_Utils.update(
					node,
					{
						outgoing: A3(_elm_community$intdict$IntDict$update, nodeId, upd, node.outgoing)
					});
			});
		var updateIncomingEdge = F2(
			function (upd, node) {
				return _elm_lang$core$Native_Utils.update(
					node,
					{
						incoming: A3(_elm_community$intdict$IntDict$update, nodeId, upd, node.incoming)
					});
			});
		var edgeUpdateToMaybe = function (edgeUpdate) {
			var _p3 = edgeUpdate;
			if (_p3.ctor === 'Insert') {
				return _elm_lang$core$Maybe$Just(_p3._0);
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		};
		var updateAdjacency = F3(
			function (updateEdge, updatedId, edgeUpdate) {
				var updateLbl = updateEdge(
					_elm_lang$core$Basics$always(
						edgeUpdateToMaybe(edgeUpdate)));
				return A2(
					_elm_community$intdict$IntDict$update,
					updatedId,
					_elm_lang$core$Maybe$map(updateLbl));
			});
		var flippedFoldl = F3(
			function (f, dict, acc) {
				return A3(_elm_community$intdict$IntDict$foldl, f, acc, dict);
			});
		return A3(
			flippedFoldl,
			updateAdjacency(updateOutgoingEdge),
			diff.outgoing,
			A3(
				flippedFoldl,
				updateAdjacency(updateIncomingEdge),
				diff.incoming,
				graphRep));
	});
var _elm_community$graph$Graph$emptyDiff = {incoming: _elm_community$intdict$IntDict$empty, outgoing: _elm_community$intdict$IntDict$empty};
var _elm_community$graph$Graph$unGraph = function (graph) {
	var _p4 = graph;
	return _p4._0;
};
var _elm_community$graph$Graph$size = function (_p5) {
	return _elm_community$intdict$IntDict$size(
		_elm_community$graph$Graph$unGraph(_p5));
};
var _elm_community$graph$Graph$member = function (nodeId) {
	return function (_p6) {
		return A2(
			_elm_community$intdict$IntDict$member,
			nodeId,
			_elm_community$graph$Graph$unGraph(_p6));
	};
};
var _elm_community$graph$Graph$get = function (nodeId) {
	return function (_p7) {
		return A2(
			_elm_community$intdict$IntDict$get,
			nodeId,
			_elm_community$graph$Graph$unGraph(_p7));
	};
};
var _elm_community$graph$Graph$nodeIdRange = function (graph) {
	return A2(
		_elm_lang$core$Maybe$andThen,
		function (_p8) {
			var _p9 = _p8;
			return A2(
				_elm_lang$core$Maybe$andThen,
				function (_p10) {
					var _p11 = _p10;
					return _elm_lang$core$Maybe$Just(
						{ctor: '_Tuple2', _0: _p9._0, _1: _p11._0});
				},
				_elm_community$intdict$IntDict$findMax(
					_elm_community$graph$Graph$unGraph(graph)));
		},
		_elm_community$intdict$IntDict$findMin(
			_elm_community$graph$Graph$unGraph(graph)));
};
var _elm_community$graph$Graph$nodes = function (_p12) {
	return A2(
		_elm_lang$core$List$map,
		function (_) {
			return _.node;
		},
		_elm_community$intdict$IntDict$values(
			_elm_community$graph$Graph$unGraph(_p12)));
};
var _elm_community$graph$Graph$nodeIds = function (_p13) {
	return _elm_community$intdict$IntDict$keys(
		_elm_community$graph$Graph$unGraph(_p13));
};
var _elm_community$graph$Graph$edges = function (graph) {
	var flippedFoldl = F3(
		function (f, dict, list) {
			return A3(_elm_community$intdict$IntDict$foldl, f, list, dict);
		});
	var prependEdges = F2(
		function (node1, ctx) {
			return A2(
				flippedFoldl,
				F2(
					function (node2, e) {
						return F2(
							function (x, y) {
								return {ctor: '::', _0: x, _1: y};
							})(
							{to: node2, from: node1, label: e});
					}),
				ctx.outgoing);
		});
	return A3(
		flippedFoldl,
		prependEdges,
		_elm_community$graph$Graph$unGraph(graph),
		{ctor: '[]'});
};
var _elm_community$graph$Graph$toString = function (graph) {
	var edgeList = _elm_community$graph$Graph$edges(graph);
	var nodeList = _elm_community$graph$Graph$nodes(graph);
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'Graph.fromNodesAndEdges ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(nodeList),
			A2(
				_elm_lang$core$Basics_ops['++'],
				' ',
				_elm_lang$core$Basics$toString(edgeList))));
};
var _elm_community$graph$Graph$Node = F2(
	function (a, b) {
		return {id: a, label: b};
	});
var _elm_community$graph$Graph$Edge = F3(
	function (a, b, c) {
		return {from: a, to: b, label: c};
	});
var _elm_community$graph$Graph$NodeContext = F3(
	function (a, b, c) {
		return {node: a, incoming: b, outgoing: c};
	});
var _elm_community$graph$Graph$EdgeDiff = F2(
	function (a, b) {
		return {incoming: a, outgoing: b};
	});
var _elm_community$graph$Graph$Graph = function (a) {
	return {ctor: 'Graph', _0: a};
};
var _elm_community$graph$Graph$empty = _elm_community$graph$Graph$Graph(_elm_community$intdict$IntDict$empty);
var _elm_community$graph$Graph$isEmpty = function (graph) {
	return _elm_lang$core$Native_Utils.eq(graph, _elm_community$graph$Graph$empty);
};
var _elm_community$graph$Graph$fromNodesAndEdges = F2(
	function (nodes, edges) {
		var addEdge = F2(
			function (edge, rep) {
				var updateIncoming = function (ctx) {
					return _elm_lang$core$Native_Utils.update(
						ctx,
						{
							incoming: A3(_elm_community$intdict$IntDict$insert, edge.from, edge.label, ctx.incoming)
						});
				};
				var updateOutgoing = function (ctx) {
					return _elm_lang$core$Native_Utils.update(
						ctx,
						{
							outgoing: A3(_elm_community$intdict$IntDict$insert, edge.to, edge.label, ctx.outgoing)
						});
				};
				return A3(
					_elm_community$intdict$IntDict$update,
					edge.to,
					_elm_lang$core$Maybe$map(updateIncoming),
					A3(
						_elm_community$intdict$IntDict$update,
						edge.from,
						_elm_lang$core$Maybe$map(updateOutgoing),
						rep));
			});
		var nodeRep = A3(
			_elm_lang$core$List$foldl,
			function (n) {
				return A2(
					_elm_community$intdict$IntDict$insert,
					n.id,
					A3(_elm_community$graph$Graph$NodeContext, n, _elm_community$intdict$IntDict$empty, _elm_community$intdict$IntDict$empty));
			},
			_elm_community$intdict$IntDict$empty,
			nodes);
		return _elm_community$graph$Graph$Graph(
			A3(_elm_lang$core$List$foldl, addEdge, nodeRep, edges));
	});
var _elm_community$graph$Graph$fromNodeLabelsAndEdgePairs = F2(
	function (labels, edgePairs) {
		var edges = A2(
			_elm_lang$core$List$map,
			function (_p14) {
				var _p15 = _p14;
				return A3(
					_elm_community$graph$Graph$Edge,
					_p15._0,
					_p15._1,
					{ctor: '_Tuple0'});
			},
			edgePairs);
		var nodes = _elm_lang$core$Tuple$second(
			A3(
				_elm_lang$core$List$foldl,
				F2(
					function (lbl, _p16) {
						var _p17 = _p16;
						var _p18 = _p17._0;
						return {
							ctor: '_Tuple2',
							_0: _p18 + 1,
							_1: {
								ctor: '::',
								_0: A2(_elm_community$graph$Graph$Node, _p18, lbl),
								_1: _p17._1
							}
						};
					}),
				{
					ctor: '_Tuple2',
					_0: 0,
					_1: {ctor: '[]'}
				},
				labels));
		return A2(_elm_community$graph$Graph$fromNodesAndEdges, nodes, edges);
	});
var _elm_community$graph$Graph$symmetricClosure = function (edgeMerger) {
	var orderedEdgeMerger = F4(
		function (from, to, outgoing, incoming) {
			return (_elm_lang$core$Native_Utils.cmp(from, to) < 1) ? A4(edgeMerger, from, to, outgoing, incoming) : A4(edgeMerger, to, from, incoming, outgoing);
		});
	var updateContext = F2(
		function (nodeId, ctx) {
			var edges = A3(
				_elm_community$intdict$IntDict$uniteWith,
				orderedEdgeMerger(nodeId),
				ctx.outgoing,
				ctx.incoming);
			return _elm_lang$core$Native_Utils.update(
				ctx,
				{outgoing: edges, incoming: edges});
		});
	return function (_p19) {
		return _elm_community$graph$Graph$Graph(
			A2(
				_elm_community$intdict$IntDict$map,
				updateContext,
				_elm_community$graph$Graph$unGraph(_p19)));
	};
};
var _elm_community$graph$Graph$reverseEdges = function () {
	var updateContext = F2(
		function (nodeId, ctx) {
			return _elm_lang$core$Native_Utils.update(
				ctx,
				{outgoing: ctx.incoming, incoming: ctx.outgoing});
		});
	return function (_p20) {
		return _elm_community$graph$Graph$Graph(
			A2(
				_elm_community$intdict$IntDict$map,
				updateContext,
				_elm_community$graph$Graph$unGraph(_p20)));
	};
}();
var _elm_community$graph$Graph$Remove = function (a) {
	return {ctor: 'Remove', _0: a};
};
var _elm_community$graph$Graph$Insert = function (a) {
	return {ctor: 'Insert', _0: a};
};
var _elm_community$graph$Graph$computeEdgeDiff = F2(
	function (old, $new) {
		var collectUpdates = F3(
			function (edgeUpdate, updatedId, label) {
				var replaceUpdate = function (old) {
					var _p21 = {
						ctor: '_Tuple2',
						_0: old,
						_1: edgeUpdate(label)
					};
					if (_p21._0.ctor === 'Just') {
						if (_p21._0._0.ctor === 'Remove') {
							if (_p21._1.ctor === 'Insert') {
								var _p22 = _p21._1._0;
								return _elm_lang$core$Native_Utils.eq(_p21._0._0._0, _p22) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
									_elm_community$graph$Graph$Insert(_p22));
							} else {
								return _elm_lang$core$Native_Utils.crashCase(
									'Graph',
									{
										start: {line: 189, column: 11},
										end: {line: 199, column: 22}
									},
									_p21)('Graph.computeEdgeDiff: Collected two removals for the same edge. This is an error in the implementation of Graph and you should file a bug report!');
							}
						} else {
							return _elm_lang$core$Native_Utils.crashCase(
								'Graph',
								{
									start: {line: 189, column: 11},
									end: {line: 199, column: 22}
								},
								_p21)('Graph.computeEdgeDiff: Collected inserts before removals. This is an error in the implementation of Graph and you should file a bug report!');
						}
					} else {
						return _elm_lang$core$Maybe$Just(_p21._1);
					}
				};
				return A2(_elm_community$intdict$IntDict$update, updatedId, replaceUpdate);
			});
		var collect = F3(
			function (edgeUpdate, adj, updates) {
				return A3(
					_elm_community$intdict$IntDict$foldl,
					collectUpdates(edgeUpdate),
					updates,
					adj);
			});
		var _p25 = {ctor: '_Tuple2', _0: old, _1: $new};
		if (_p25._0.ctor === 'Nothing') {
			if (_p25._1.ctor === 'Nothing') {
				return _elm_community$graph$Graph$emptyDiff;
			} else {
				var _p27 = _p25._1._0;
				return {
					outgoing: A3(collect, _elm_community$graph$Graph$Insert, _p27.incoming, _elm_community$intdict$IntDict$empty),
					incoming: A3(collect, _elm_community$graph$Graph$Insert, _p27.outgoing, _elm_community$intdict$IntDict$empty)
				};
			}
		} else {
			if (_p25._1.ctor === 'Nothing') {
				var _p26 = _p25._0._0;
				return {
					outgoing: A3(collect, _elm_community$graph$Graph$Remove, _p26.incoming, _elm_community$intdict$IntDict$empty),
					incoming: A3(collect, _elm_community$graph$Graph$Remove, _p26.outgoing, _elm_community$intdict$IntDict$empty)
				};
			} else {
				var _p29 = _p25._0._0;
				var _p28 = _p25._1._0;
				return _elm_lang$core$Native_Utils.eq(_p29, _p28) ? _elm_community$graph$Graph$emptyDiff : {
					outgoing: A3(
						collect,
						_elm_community$graph$Graph$Insert,
						_p28.incoming,
						A3(collect, _elm_community$graph$Graph$Remove, _p29.incoming, _elm_community$intdict$IntDict$empty)),
					incoming: A3(
						collect,
						_elm_community$graph$Graph$Insert,
						_p28.outgoing,
						A3(collect, _elm_community$graph$Graph$Remove, _p29.outgoing, _elm_community$intdict$IntDict$empty))
				};
			}
		}
	});
var _elm_community$graph$Graph$update = F2(
	function (nodeId, updater) {
		var wrappedUpdater = function (rep) {
			var filterInvalidEdges = function (ctx) {
				return _elm_community$intdict$IntDict$filter(
					F2(
						function (id, _p30) {
							return _elm_lang$core$Native_Utils.eq(id, ctx.node.id) || A2(_elm_community$intdict$IntDict$member, id, rep);
						}));
			};
			var cleanUpEdges = function (ctx) {
				return _elm_lang$core$Native_Utils.update(
					ctx,
					{
						incoming: A2(filterInvalidEdges, ctx, ctx.incoming),
						outgoing: A2(filterInvalidEdges, ctx, ctx.outgoing)
					});
			};
			var old = A2(_elm_community$intdict$IntDict$get, nodeId, rep);
			var $new = A2(
				_elm_lang$core$Maybe$map,
				cleanUpEdges,
				updater(old));
			var diff = A2(_elm_community$graph$Graph$computeEdgeDiff, old, $new);
			return A3(
				_elm_community$intdict$IntDict$update,
				nodeId,
				_elm_lang$core$Basics$always($new),
				A3(_elm_community$graph$Graph$applyEdgeDiff, nodeId, diff, rep));
		};
		return function (_p31) {
			return _elm_community$graph$Graph$Graph(
				wrappedUpdater(
					_elm_community$graph$Graph$unGraph(_p31)));
		};
	});
var _elm_community$graph$Graph$insert = F2(
	function (nodeContext, graph) {
		return A3(
			_elm_community$graph$Graph$update,
			nodeContext.node.id,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Maybe$Just(nodeContext)),
			graph);
	});
var _elm_community$graph$Graph$inducedSubgraph = F2(
	function (nodeIds, graph) {
		var insertContextById = F2(
			function (nodeId, acc) {
				var _p32 = A2(_elm_community$graph$Graph$get, nodeId, graph);
				if (_p32.ctor === 'Just') {
					return A2(_elm_community$graph$Graph$insert, _p32._0, acc);
				} else {
					return acc;
				}
			});
		return A3(_elm_lang$core$List$foldl, insertContextById, _elm_community$graph$Graph$empty, nodeIds);
	});
var _elm_community$graph$Graph$remove = F2(
	function (nodeId, graph) {
		return A3(
			_elm_community$graph$Graph$update,
			nodeId,
			_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			graph);
	});
var _elm_community$graph$Graph$fold = F3(
	function (f, acc, graph) {
		var go = F2(
			function (acc, graph1) {
				go:
				while (true) {
					var maybeContext = A2(
						_elm_lang$core$Maybe$andThen,
						function (id) {
							return A2(_elm_community$graph$Graph$get, id, graph);
						},
						A2(
							_elm_lang$core$Maybe$map,
							_elm_lang$core$Tuple$first,
							_elm_community$graph$Graph$nodeIdRange(graph1)));
					var _p33 = maybeContext;
					if (_p33.ctor === 'Just') {
						var _p34 = _p33._0;
						var _v11 = A2(f, _p34, acc),
							_v12 = A2(_elm_community$graph$Graph$remove, _p34.node.id, graph1);
						acc = _v11;
						graph1 = _v12;
						continue go;
					} else {
						return acc;
					}
				}
			});
		return A2(go, acc, graph);
	});
var _elm_community$graph$Graph$mapContexts = function (f) {
	return A2(
		_elm_community$graph$Graph$fold,
		function (ctx) {
			return _elm_community$graph$Graph$insert(
				f(ctx));
		},
		_elm_community$graph$Graph$empty);
};
var _elm_community$graph$Graph$mapNodes = function (f) {
	return A2(
		_elm_community$graph$Graph$fold,
		function (ctx) {
			return _elm_community$graph$Graph$insert(
				_elm_lang$core$Native_Utils.update(
					ctx,
					{
						node: {
							id: ctx.node.id,
							label: f(ctx.node.label)
						}
					}));
		},
		_elm_community$graph$Graph$empty);
};
var _elm_community$graph$Graph$mapEdges = function (f) {
	return A2(
		_elm_community$graph$Graph$fold,
		function (ctx) {
			return _elm_community$graph$Graph$insert(
				_elm_lang$core$Native_Utils.update(
					ctx,
					{
						outgoing: A2(
							_elm_community$intdict$IntDict$map,
							F2(
								function (n, e) {
									return f(e);
								}),
							ctx.outgoing),
						incoming: A2(
							_elm_community$intdict$IntDict$map,
							F2(
								function (n, e) {
									return f(e);
								}),
							ctx.incoming)
					}));
		},
		_elm_community$graph$Graph$empty);
};
var _elm_community$graph$Graph$guidedDfs = F5(
	function (selectNeighbors, visitNode, seeds, acc, graph) {
		var go = F3(
			function (seeds, acc, graph) {
				go:
				while (true) {
					var _p35 = seeds;
					if (_p35.ctor === '[]') {
						return {ctor: '_Tuple2', _0: acc, _1: graph};
					} else {
						var _p41 = _p35._1;
						var _p40 = _p35._0;
						var _p36 = A2(_elm_community$graph$Graph$get, _p40, graph);
						if (_p36.ctor === 'Nothing') {
							var _v15 = _p41,
								_v16 = acc,
								_v17 = graph;
							seeds = _v15;
							acc = _v16;
							graph = _v17;
							continue go;
						} else {
							var _p39 = _p36._0;
							var _p37 = A2(visitNode, _p39, acc);
							var accAfterDiscovery = _p37._0;
							var finishNode = _p37._1;
							var _p38 = A3(
								go,
								selectNeighbors(_p39),
								accAfterDiscovery,
								A2(_elm_community$graph$Graph$remove, _p40, graph));
							var accBeforeFinish = _p38._0;
							var graph1 = _p38._1;
							var accAfterFinish = finishNode(accBeforeFinish);
							var _v18 = _p41,
								_v19 = accAfterFinish,
								_v20 = graph1;
							seeds = _v18;
							acc = _v19;
							graph = _v20;
							continue go;
						}
					}
				}
			});
		return A3(go, seeds, acc, graph);
	});
var _elm_community$graph$Graph$dfs = F3(
	function (visitNode, acc, graph) {
		return _elm_lang$core$Tuple$first(
			A5(
				_elm_community$graph$Graph$guidedDfs,
				_elm_community$graph$Graph$alongOutgoingEdges,
				visitNode,
				_elm_community$graph$Graph$nodeIds(graph),
				acc,
				graph));
	});
var _elm_community$graph$Graph$dfsForest = F2(
	function (seeds, graph) {
		var visitNode = F2(
			function (ctx, trees) {
				return {
					ctor: '_Tuple2',
					_0: {ctor: '[]'},
					_1: function (children) {
						return {
							ctor: '::',
							_0: A2(_elm_community$graph$Graph_Tree$inner, ctx, children),
							_1: trees
						};
					}
				};
			});
		return _elm_lang$core$List$reverse(
			_elm_lang$core$Tuple$first(
				A5(
					_elm_community$graph$Graph$guidedDfs,
					_elm_community$graph$Graph$alongOutgoingEdges,
					visitNode,
					seeds,
					{ctor: '[]'},
					graph)));
	});
var _elm_community$graph$Graph$dfsTree = F2(
	function (seed, graph) {
		var _p42 = A2(
			_elm_community$graph$Graph$dfsForest,
			{
				ctor: '::',
				_0: seed,
				_1: {ctor: '[]'}
			},
			graph);
		if (_p42.ctor === '[]') {
			return _elm_community$graph$Graph_Tree$empty;
		} else {
			if (_p42._1.ctor === '[]') {
				return _p42._0;
			} else {
				return _elm_lang$core$Native_Utils.crashCase(
					'Graph',
					{
						start: {line: 822, column: 3},
						end: {line: 828, column: 120}
					},
					_p42)('dfsTree: There can\'t be more than one DFS tree. This invariant is violated, please report this bug.');
			}
		}
	});
var _elm_community$graph$Graph$topologicalSort = function (graph) {
	return A2(
		_elm_lang$core$List$concatMap,
		_elm_community$graph$Graph_Tree$preOrderList,
		_elm_lang$core$List$reverse(
			A2(
				_elm_community$graph$Graph$dfsForest,
				_elm_community$graph$Graph$nodeIds(graph),
				graph)));
};
var _elm_community$graph$Graph$stronglyConnectedComponents = function (graph) {
	var timestamps = A3(
		_elm_community$graph$Graph$dfs,
		_elm_community$graph$Graph$onFinish(
			function (_p44) {
				return F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					})(
					function (_) {
						return _.id;
					}(
						function (_) {
							return _.node;
						}(_p44)));
			}),
		{ctor: '[]'},
		graph);
	var forest = A2(
		_elm_community$graph$Graph$dfsForest,
		timestamps,
		_elm_community$graph$Graph$reverseEdges(graph));
	var components = A2(
		_elm_lang$core$List$map,
		function (_p45) {
			return _elm_community$graph$Graph$reverseEdges(
				A3(
					_elm_lang$core$List$foldr,
					_elm_community$graph$Graph$insert,
					_elm_community$graph$Graph$empty,
					_elm_community$graph$Graph_Tree$preOrderList(_p45)));
		},
		forest);
	return components;
};
var _elm_community$graph$Graph$guidedBfs = F5(
	function (selectNeighbors, visitNode, seeds, acc, graph) {
		var enqueueMany = F4(
			function (distance, parentPath, nodeIds, queue) {
				return A3(
					_elm_lang$core$List$foldl,
					_avh4$elm_fifo$Fifo$insert,
					queue,
					A2(
						_elm_lang$core$List$map,
						function (id) {
							return {ctor: '_Tuple3', _0: id, _1: parentPath, _2: distance};
						},
						nodeIds));
			});
		var go = F3(
			function (seeds, acc, graph) {
				go:
				while (true) {
					var _p46 = _avh4$elm_fifo$Fifo$remove(seeds);
					if (_p46._0.ctor === 'Nothing') {
						return {ctor: '_Tuple2', _0: acc, _1: graph};
					} else {
						var _p51 = _p46._1;
						var _p50 = _p46._0._0._0;
						var _p49 = _p46._0._0._2;
						var _p47 = A2(_elm_community$graph$Graph$get, _p50, graph);
						if (_p47.ctor === 'Nothing') {
							var _v24 = _p51,
								_v25 = acc,
								_v26 = graph;
							seeds = _v24;
							acc = _v25;
							graph = _v26;
							continue go;
						} else {
							var _p48 = _p47._0;
							var path = {ctor: '::', _0: _p48, _1: _p46._0._0._1};
							var accAfterVisit = A3(visitNode, path, _p49, acc);
							var seeds2 = A4(
								enqueueMany,
								_p49 + 1,
								path,
								selectNeighbors(_p48),
								_p51);
							var _v27 = seeds2,
								_v28 = accAfterVisit,
								_v29 = A2(_elm_community$graph$Graph$remove, _p50, graph);
							seeds = _v27;
							acc = _v28;
							graph = _v29;
							continue go;
						}
					}
				}
			});
		return A3(
			go,
			A4(
				enqueueMany,
				0,
				{ctor: '[]'},
				seeds,
				_avh4$elm_fifo$Fifo$empty),
			acc,
			graph);
	});
var _elm_community$graph$Graph$bfs = F3(
	function (visitNode, acc, graph) {
		bfs:
		while (true) {
			var _p52 = _elm_community$graph$Graph$nodeIdRange(graph);
			if (_p52.ctor === 'Nothing') {
				return acc;
			} else {
				var _p53 = A5(
					_elm_community$graph$Graph$guidedBfs,
					_elm_community$graph$Graph$alongOutgoingEdges,
					visitNode,
					{
						ctor: '::',
						_0: _p52._0._0,
						_1: {ctor: '[]'}
					},
					acc,
					graph);
				var finalAcc = _p53._0;
				var restgraph1 = _p53._1;
				var _v31 = visitNode,
					_v32 = finalAcc,
					_v33 = restgraph1;
				visitNode = _v31;
				acc = _v32;
				graph = _v33;
				continue bfs;
			}
		}
	});
var _elm_community$graph$Graph$heightLevels = function (graph) {
	var subtract = F2(
		function (a, b) {
			return b - a;
		});
	var decrementAndNoteSources = F3(
		function (id, _p55, _p54) {
			var _p56 = _p54;
			var _p60 = _p56._0;
			var indegreesDec = A3(
				_elm_community$intdict$IntDict$update,
				id,
				_elm_lang$core$Maybe$map(
					subtract(1)),
				_p56._1);
			var _p57 = A2(_elm_community$intdict$IntDict$get, id, indegreesDec);
			if ((_p57.ctor === 'Just') && (_p57._0 === 0)) {
				var _p58 = A2(_elm_community$graph$Graph$get, id, graph);
				if (_p58.ctor === 'Just') {
					return {
						ctor: '_Tuple2',
						_0: {ctor: '::', _0: _p58._0, _1: _p60},
						_1: indegreesDec
					};
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'Graph',
						{
							start: {line: 1001, column: 13},
							end: {line: 1003, column: 154}
						},
						_p58)('Graph.heightLevels: Could not get a node of a graph which should be there by invariants. Please file a bug report!');
				}
			} else {
				return {ctor: '_Tuple2', _0: _p60, _1: indegreesDec};
			}
		});
	var decrementIndegrees = F3(
		function (source, nextLevel, indegrees) {
			return A3(
				_elm_community$intdict$IntDict$foldl,
				decrementAndNoteSources,
				{ctor: '_Tuple2', _0: nextLevel, _1: indegrees},
				source.outgoing);
		});
	var go = F4(
		function (currentLevel, nextLevel, indegrees, graph) {
			var _p61 = {ctor: '_Tuple2', _0: currentLevel, _1: nextLevel};
			if (_p61._0.ctor === '[]') {
				if (_p61._1.ctor === '[]') {
					return {
						ctor: '::',
						_0: {ctor: '[]'},
						_1: {ctor: '[]'}
					};
				} else {
					return {
						ctor: '::',
						_0: {ctor: '[]'},
						_1: A4(
							go,
							nextLevel,
							{ctor: '[]'},
							indegrees,
							graph)
					};
				}
			} else {
				var _p65 = _p61._0._0;
				var _p62 = A3(decrementIndegrees, _p65, nextLevel, indegrees);
				var nextLevel1 = _p62._0;
				var indegrees1 = _p62._1;
				var _p63 = A4(
					go,
					_p61._0._1,
					nextLevel1,
					indegrees1,
					A2(_elm_community$graph$Graph$remove, _p65.node.id, graph));
				if (_p63.ctor === '[]') {
					return _elm_lang$core$Native_Utils.crashCase(
						'Graph',
						{
							start: {line: 1020, column: 13},
							end: {line: 1024, column: 44}
						},
						_p63)('Graph.heightLevels: Reached a branch which is impossible by invariants. Please file a bug report!');
				} else {
					return {
						ctor: '::',
						_0: {ctor: '::', _0: _p65, _1: _p63._0},
						_1: _p63._1
					};
				}
			}
		});
	var countIndegrees = A2(
		_elm_community$graph$Graph$fold,
		function (ctx) {
			return A2(
				_elm_community$intdict$IntDict$insert,
				ctx.node.id,
				_elm_community$intdict$IntDict$size(ctx.incoming));
		},
		_elm_community$intdict$IntDict$empty);
	var sources = A3(
		_elm_community$graph$Graph$fold,
		F2(
			function (ctx, acc) {
				return _elm_community$intdict$IntDict$isEmpty(ctx.incoming) ? {ctor: '::', _0: ctx, _1: acc} : acc;
			}),
		{ctor: '[]'},
		graph);
	return A4(
		go,
		sources,
		{ctor: '[]'},
		countIndegrees(graph),
		graph);
};

var _concourse$atc$Grid$nodes = function (grid) {
	var _p0 = grid;
	switch (_p0.ctor) {
		case 'End':
			return _elm_lang$core$Set$empty;
		case 'Parallel':
			return A3(
				_elm_lang$core$List$foldl,
				F2(
					function (g, s) {
						return A2(
							_elm_lang$core$Set$union,
							s,
							_concourse$atc$Grid$nodes(g));
					}),
				_elm_lang$core$Set$empty,
				_p0._0);
		case 'Serial':
			return A2(
				_elm_lang$core$Set$union,
				_concourse$atc$Grid$nodes(_p0._0),
				_concourse$atc$Grid$nodes(_p0._1));
		default:
			return _elm_lang$core$Set$singleton(_p0._0.node.id);
	}
};
var _concourse$atc$Grid$terminals = function (grid) {
	var _p1 = grid;
	switch (_p1.ctor) {
		case 'End':
			return _elm_lang$core$Set$empty;
		case 'Parallel':
			var _p3 = _p1._0;
			return A2(
				_elm_lang$core$List$any,
				function (_p2) {
					return _elm_lang$core$Set$isEmpty(
						_concourse$atc$Grid$terminals(_p2));
				},
				_p3) ? _elm_lang$core$Set$empty : A3(
				_elm_lang$core$List$foldl,
				F2(
					function (g, s) {
						return A2(
							_elm_lang$core$Set$union,
							s,
							_concourse$atc$Grid$terminals(g));
					}),
				_elm_lang$core$Set$empty,
				_p3);
		case 'Serial':
			var _p4 = _p1._1;
			var bNodes = _concourse$atc$Grid$nodes(_p4);
			var bTerms = _concourse$atc$Grid$terminals(_p4);
			var aTerms = _concourse$atc$Grid$terminals(_p1._0);
			var joined = A2(_elm_lang$core$Set$union, aTerms, bTerms);
			return A2(_elm_lang$core$Set$diff, joined, bNodes);
		default:
			return _elm_lang$core$Set$fromList(
				_elm_community$intdict$IntDict$keys(_p1._0.outgoing));
	}
};
var _concourse$atc$Grid$comesDirectlyFrom = F2(
	function (up, grid) {
		comesDirectlyFrom:
		while (true) {
			var _p5 = grid;
			switch (_p5.ctor) {
				case 'End':
					return false;
				case 'Parallel':
					return A2(
						_elm_lang$core$List$any,
						_concourse$atc$Grid$comesDirectlyFrom(up),
						_p5._0);
				case 'Serial':
					var _v3 = up,
						_v4 = _p5._0;
					up = _v3;
					grid = _v4;
					continue comesDirectlyFrom;
				default:
					return A2(
						_elm_lang$core$Set$member,
						_p5._0.node.id,
						_concourse$atc$Grid$terminals(up));
			}
		}
	});
var _concourse$atc$Grid$leadsTo = F2(
	function (nc, grid) {
		var _p6 = grid;
		switch (_p6.ctor) {
			case 'End':
				return false;
			case 'Parallel':
				return A2(
					_elm_lang$core$List$any,
					_concourse$atc$Grid$leadsTo(nc),
					_p6._0);
			case 'Serial':
				return A2(_concourse$atc$Grid$leadsTo, nc, _p6._0) || A2(_concourse$atc$Grid$leadsTo, nc, _p6._1);
			default:
				return A2(_elm_community$intdict$IntDict$member, nc.node.id, _p6._0.outgoing);
		}
	});
var _concourse$atc$Grid$height = F2(
	function (nh, grid) {
		var _p7 = grid;
		switch (_p7.ctor) {
			case 'End':
				return 0;
			case 'Serial':
				return A2(
					_elm_lang$core$Basics$max,
					A2(_concourse$atc$Grid$height, nh, _p7._0),
					A2(_concourse$atc$Grid$height, nh, _p7._1));
			case 'Parallel':
				return _elm_lang$core$List$sum(
					A2(
						_elm_lang$core$List$map,
						_concourse$atc$Grid$height(nh),
						_p7._0));
			default:
				return nh(_p7._0);
		}
	});
var _concourse$atc$Grid$width = function (grid) {
	var _p8 = grid;
	switch (_p8.ctor) {
		case 'End':
			return 0;
		case 'Serial':
			return _concourse$atc$Grid$width(_p8._0) + _concourse$atc$Grid$width(_p8._1);
		case 'Parallel':
			return A2(
				_elm_lang$core$Maybe$withDefault,
				0,
				_elm_lang$core$List$maximum(
					A2(_elm_lang$core$List$map, _concourse$atc$Grid$width, _p8._0)));
		default:
			return 1;
	}
};
var _concourse$atc$Grid$showMatrix = function (m) {
	var showCell = function (c) {
		var _p9 = c;
		switch (_p9.ctor) {
			case 'MatrixSpacer':
				return '  ';
			case 'MatrixFilled':
				return '--';
			default:
				var _p10 = _p9._0;
				return (_elm_lang$core$Native_Utils.cmp(_p10.node.id, 10) < 0) ? A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					_elm_lang$core$Basics$toString(_p10.node.id)) : _elm_lang$core$Basics$toString(_p10.node.id);
		}
	};
	return A2(
		_elm_lang$core$String$join,
		'\n',
		A2(
			_elm_lang$core$List$map,
			function (r) {
				return A2(
					_elm_lang$core$String$join,
					'|',
					A2(_elm_lang$core$List$map, showCell, r));
			},
			_chendrix$elm_matrix$Matrix$toList(m)));
};
var _concourse$atc$Grid$End = {ctor: 'End'};
var _concourse$atc$Grid$Parallel = function (a) {
	return {ctor: 'Parallel', _0: a};
};
var _concourse$atc$Grid$addToStart = F2(
	function (a, b) {
		var _p11 = b;
		switch (_p11.ctor) {
			case 'End':
				return a;
			case 'Parallel':
				var _p13 = _p11._0;
				var _p12 = a;
				if (_p12.ctor === 'Parallel') {
					return _concourse$atc$Grid$Parallel(
						A2(_elm_lang$core$Basics_ops['++'], _p13, _p12._0));
				} else {
					return _concourse$atc$Grid$Parallel(
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p13,
							{
								ctor: '::',
								_0: a,
								_1: {ctor: '[]'}
							}));
				}
			default:
				var _p14 = a;
				if (_p14.ctor === 'Parallel') {
					return _concourse$atc$Grid$Parallel(
						{ctor: '::', _0: b, _1: _p14._0});
				} else {
					return _concourse$atc$Grid$Parallel(
						{
							ctor: '::',
							_0: b,
							_1: {
								ctor: '::',
								_0: a,
								_1: {ctor: '[]'}
							}
						});
				}
		}
	});
var _concourse$atc$Grid$extractExclusiveUpstreams = F2(
	function (target, grid) {
		var _p15 = grid;
		switch (_p15.ctor) {
			case 'End':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Maybe$Just(grid),
					_1: {ctor: '[]'}
				};
			case 'Parallel':
				var recurse = A2(
					_elm_lang$core$List$map,
					_concourse$atc$Grid$extractExclusiveUpstreams(target),
					_p15._0);
				var remainders = A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, recurse);
				var exclusives = A2(_elm_lang$core$List$concatMap, _elm_lang$core$Tuple$second, recurse);
				return A2(
					_elm_lang$core$List$all,
					F2(
						function (x, y) {
							return _elm_lang$core$Native_Utils.eq(x, y);
						})(_elm_lang$core$Maybe$Nothing),
					remainders) ? {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: exclusives} : {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Maybe$Just(
						_concourse$atc$Grid$Parallel(
							A2(_elm_lang$core$List$filterMap, _elm_lang$core$Basics$identity, remainders))),
					_1: exclusives
				};
			case 'Serial':
				var terms = _concourse$atc$Grid$terminals(grid);
				return (_elm_lang$core$Native_Utils.eq(
					_elm_lang$core$Set$size(terms),
					1) && A2(_elm_lang$core$Set$member, target.node.id, terms)) ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Maybe$Nothing,
					_1: {
						ctor: '::',
						_0: grid,
						_1: {ctor: '[]'}
					}
				} : {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Maybe$Just(grid),
					_1: {ctor: '[]'}
				};
			default:
				var _p16 = _p15._0;
				return (_elm_lang$core$Native_Utils.eq(
					_elm_community$intdict$IntDict$size(_p16.outgoing),
					1) && A2(_elm_community$intdict$IntDict$member, target.node.id, _p16.outgoing)) ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Maybe$Nothing,
					_1: {
						ctor: '::',
						_0: grid,
						_1: {ctor: '[]'}
					}
				} : {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Maybe$Just(grid),
					_1: {ctor: '[]'}
				};
		}
	});
var _concourse$atc$Grid$Serial = F2(
	function (a, b) {
		return {ctor: 'Serial', _0: a, _1: b};
	});
var _concourse$atc$Grid$addBeforeDownstream = F2(
	function (up, grid) {
		var _p17 = grid;
		switch (_p17.ctor) {
			case 'End':
				return _concourse$atc$Grid$End;
			case 'Parallel':
				return A2(_concourse$atc$Grid$comesDirectlyFrom, up, grid) ? _elm_lang$core$Native_Utils.crash(
					'Grid',
					{
						start: {line: 228, column: 17},
						end: {line: 228, column: 28}
					})('too late to add in front of Parallel') : _concourse$atc$Grid$Parallel(
					A2(
						_elm_lang$core$List$map,
						_concourse$atc$Grid$addBeforeDownstream(up),
						_p17._0));
			case 'Serial':
				var _p19 = _p17._1;
				var _p18 = _p17._0;
				return A2(_concourse$atc$Grid$comesDirectlyFrom, up, _p18) ? _elm_lang$core$Native_Utils.crash(
					'Grid',
					{
						start: {line: 234, column: 17},
						end: {line: 234, column: 28}
					})('too late to add in front of Serial') : (A2(_concourse$atc$Grid$comesDirectlyFrom, up, _p19) ? A2(
					_concourse$atc$Grid$Serial,
					A2(_concourse$atc$Grid$addToStart, up, _p18),
					_p19) : A2(
					_concourse$atc$Grid$Serial,
					_p18,
					A2(_concourse$atc$Grid$addBeforeDownstream, up, _p19)));
			default:
				return A2(_concourse$atc$Grid$comesDirectlyFrom, up, grid) ? _elm_lang$core$Native_Utils.crash(
					'Grid',
					{
						start: {line: 242, column: 17},
						end: {line: 242, column: 28}
					})('too late to add in front of Cell') : grid;
		}
	});
var _concourse$atc$Grid$checkAndAddBeforeDownstream = F2(
	function (up, grid) {
		var after = A2(_concourse$atc$Grid$addBeforeDownstream, up, grid);
		return _elm_lang$core$Native_Utils.eq(after, grid) ? _elm_lang$core$Native_Utils.crash(
			'Grid',
			{
				start: {line: 215, column: 13},
				end: {line: 215, column: 24}
			})(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'failed to add: ',
				_elm_lang$core$Basics$toString(up))) : after;
	});
var _concourse$atc$Grid$Cell = function (a) {
	return {ctor: 'Cell', _0: a};
};
var _concourse$atc$Grid$addAfterMixedUpstreamsAndReinsertExclusiveOnes = F2(
	function (nc, dependent) {
		var _p20 = A2(
			_concourse$atc$Grid$extractExclusiveUpstreams,
			nc,
			_concourse$atc$Grid$Parallel(dependent));
		var remainder = _p20._0;
		var exclusives = _p20._1;
		var _p21 = {ctor: '_Tuple2', _0: remainder, _1: exclusives};
		if (_p21._0.ctor === 'Nothing') {
			if (_p21._1.ctor === '[]') {
				return _elm_lang$core$Native_Utils.crashCase(
					'Grid',
					{
						start: {line: 191, column: 9},
						end: {line: 205, column: 31}
					},
					_p21)('impossible');
			} else {
				return A2(
					_concourse$atc$Grid$Serial,
					_concourse$atc$Grid$Parallel(exclusives),
					_concourse$atc$Grid$Cell(nc));
			}
		} else {
			if (_p21._1.ctor === '[]') {
				return A2(
					_concourse$atc$Grid$Serial,
					_concourse$atc$Grid$Parallel(dependent),
					_concourse$atc$Grid$Cell(nc));
			} else {
				return A3(
					_elm_lang$core$List$foldr,
					_concourse$atc$Grid$checkAndAddBeforeDownstream,
					A2(_concourse$atc$Grid$addAfterUpstreams, nc, _p21._0._0),
					exclusives);
			}
		}
	});
var _concourse$atc$Grid$addAfterUpstreams = F2(
	function (nc, grid) {
		var _p23 = grid;
		switch (_p23.ctor) {
			case 'End':
				return _concourse$atc$Grid$End;
			case 'Parallel':
				var _p24 = A2(
					_elm_lang$core$List$partition,
					_concourse$atc$Grid$leadsTo(nc),
					_p23._0);
				var dependent = _p24._0;
				var rest = _p24._1;
				var _p25 = dependent;
				if (_p25.ctor === '[]') {
					return grid;
				} else {
					if (_p25._1.ctor === '[]') {
						return _concourse$atc$Grid$Parallel(
							{
								ctor: '::',
								_0: A2(_concourse$atc$Grid$addAfterUpstreams, nc, _p25._0),
								_1: rest
							});
					} else {
						return A2(
							_concourse$atc$Grid$addToStart,
							_concourse$atc$Grid$Parallel(rest),
							A2(_concourse$atc$Grid$addAfterMixedUpstreamsAndReinsertExclusiveOnes, nc, dependent));
					}
				}
			case 'Serial':
				var _p27 = _p23._1;
				var _p26 = _p23._0;
				return A2(_concourse$atc$Grid$leadsTo, nc, _p26) ? A2(
					_concourse$atc$Grid$Serial,
					_p26,
					A2(
						_concourse$atc$Grid$addToStart,
						_concourse$atc$Grid$Cell(nc),
						_p27)) : A2(
					_concourse$atc$Grid$Serial,
					_p26,
					A2(_concourse$atc$Grid$addAfterUpstreams, nc, _p27));
			default:
				return A2(_elm_community$intdict$IntDict$member, nc.node.id, _p23._0.outgoing) ? A2(
					_concourse$atc$Grid$Serial,
					grid,
					_concourse$atc$Grid$Cell(nc)) : grid;
		}
	});
var _concourse$atc$Grid$insert = F2(
	function (nc, grid) {
		var _p28 = _elm_community$intdict$IntDict$size(nc.incoming);
		if (_p28 === 0) {
			return A2(
				_concourse$atc$Grid$addToStart,
				_concourse$atc$Grid$Cell(nc),
				grid);
		} else {
			return A2(_concourse$atc$Grid$addAfterUpstreams, nc, grid);
		}
	});
var _concourse$atc$Grid$fromGraph = function (graph) {
	return A3(
		_elm_lang$core$List$foldl,
		_concourse$atc$Grid$insert,
		_concourse$atc$Grid$End,
		_elm_lang$core$List$concat(
			_elm_community$graph$Graph$heightLevels(graph)));
};
var _concourse$atc$Grid$MatrixFilled = {ctor: 'MatrixFilled'};
var _concourse$atc$Grid$clearHeight = F4(
	function (row, col, height, matrix) {
		clearHeight:
		while (true) {
			if (_elm_lang$core$Native_Utils.eq(height, 0)) {
				return matrix;
			} else {
				var _v18 = row,
					_v19 = col,
					_v20 = height - 1,
					_v21 = A3(
					_chendrix$elm_matrix$Matrix$set,
					{ctor: '_Tuple2', _0: row + height, _1: col},
					_concourse$atc$Grid$MatrixFilled,
					matrix);
				row = _v18;
				col = _v19;
				height = _v20;
				matrix = _v21;
				continue clearHeight;
			}
		}
	});
var _concourse$atc$Grid$MatrixSpacer = {ctor: 'MatrixSpacer'};
var _concourse$atc$Grid$MatrixNode = function (a) {
	return {ctor: 'MatrixNode', _0: a};
};
var _concourse$atc$Grid$toMatrix_ = F5(
	function (nh, row, col, matrix, grid) {
		toMatrix_:
		while (true) {
			var _p29 = grid;
			switch (_p29.ctor) {
				case 'End':
					return matrix;
				case 'Serial':
					var _p30 = _p29._0;
					var _v23 = nh,
						_v24 = row,
						_v25 = col + _concourse$atc$Grid$width(_p30),
						_v26 = A5(_concourse$atc$Grid$toMatrix_, nh, row, col, matrix, _p30),
						_v27 = _p29._1;
					nh = _v23;
					row = _v24;
					col = _v25;
					matrix = _v26;
					grid = _v27;
					continue toMatrix_;
				case 'Parallel':
					return _elm_lang$core$Tuple$first(
						A3(
							_elm_lang$core$List$foldl,
							F2(
								function (g, _p31) {
									var _p32 = _p31;
									var _p33 = _p32._1;
									return {
										ctor: '_Tuple2',
										_0: A5(_concourse$atc$Grid$toMatrix_, nh, _p33, col, _p32._0, g),
										_1: _p33 + A2(_concourse$atc$Grid$height, nh, g)
									};
								}),
							{ctor: '_Tuple2', _0: matrix, _1: row},
							_p29._0));
				default:
					var _p34 = _p29._0;
					return A3(
						_chendrix$elm_matrix$Matrix$set,
						{ctor: '_Tuple2', _0: row, _1: col},
						_concourse$atc$Grid$MatrixNode(_p34),
						A4(
							_concourse$atc$Grid$clearHeight,
							row,
							col,
							nh(_p34) - 1,
							matrix));
			}
		}
	});
var _concourse$atc$Grid$toMatrix = F2(
	function (nh, grid) {
		return A5(
			_concourse$atc$Grid$toMatrix_,
			nh,
			0,
			0,
			A3(
				_chendrix$elm_matrix$Matrix$matrix,
				A2(_concourse$atc$Grid$height, nh, grid),
				_concourse$atc$Grid$width(grid),
				_elm_lang$core$Basics$always(_concourse$atc$Grid$MatrixSpacer)),
			grid);
	});

var _concourse$atc$BetaPipeline$queryGroupsForRoute = function (route) {
	return A2(_Bogdanp$elm_querystring$QueryString$all, 'groups', route.queries);
};
var _concourse$atc$BetaPipeline$outputNodes = F2(
	function (job, _p0) {
		var _p1 = _p0;
		return {ctor: '[]'};
	});
var _concourse$atc$BetaPipeline$viewOutputNode = function (resourceName) {
	return A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$href('#'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(resourceName),
			_1: {ctor: '[]'}
		});
};
var _concourse$atc$BetaPipeline$viewConstrainedInputNode = function (resourceName) {
	return A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$href('#'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(resourceName),
			_1: {ctor: '[]'}
		});
};
var _concourse$atc$BetaPipeline$viewInputNode = function (resourceName) {
	return A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$href('#'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(resourceName),
			_1: {ctor: '[]'}
		});
};
var _concourse$atc$BetaPipeline$jobResources = function (_p2) {
	var _p3 = _p2;
	return _elm_lang$core$Set$size(
		_elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_elm_lang$core$List$map,
					function (_) {
						return _.resource;
					},
					_p3.inputs),
				A2(
					_elm_lang$core$List$map,
					function (_) {
						return _.resource;
					},
					_p3.outputs))));
};
var _concourse$atc$BetaPipeline$viewJobNode = function (job) {
	var _p4 = function () {
		var _p5 = {ctor: '_Tuple3', _0: job.paused, _1: job.finishedBuild, _2: job.nextBuild};
		if (_p5._0 === true) {
			if (_p5._2.ctor === 'Nothing') {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$html$Html_Attributes$class('job paused'),
					_1: job.url
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$html$Html_Attributes$class('job paused started'),
					_1: _p5._2._0.url
				};
			}
		} else {
			if (_p5._1.ctor === 'Just') {
				if (_p5._2.ctor === 'Just') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$html$Html_Attributes$class(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'job ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_concourse$atc$Concourse_BuildStatus$show(_p5._1._0.status),
									' started'))),
						_1: _p5._2._0.url
					};
				} else {
					var _p6 = _p5._1._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$html$Html_Attributes$class(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'job ',
								_concourse$atc$Concourse_BuildStatus$show(_p6.status))),
						_1: _p6.url
					};
				}
			} else {
				if (_p5._2.ctor === 'Just') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$html$Html_Attributes$class('job no-builds started'),
						_1: _p5._2._0.url
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$html$Html_Attributes$class('job no-builds'),
						_1: job.url
					};
				}
			}
		}
	}();
	var classes = _p4._0;
	var linkTarget = _p4._1;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: classes,
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('job-name'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$href(
							_concourse$atc$Format$prependBeta(linkTarget)),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(job.name),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('job-status'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(
								_concourse$atc$Format$prependBeta(linkTarget)),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		});
};
var _concourse$atc$BetaPipeline$viewNode = function (_p7) {
	var _p8 = _p7;
	var idAttr = _elm_lang$html$Html_Attributes$id(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'node-',
			_elm_lang$core$Basics$toString(_p8.id)));
	var _p9 = _p8.label;
	switch (_p9.ctor) {
		case 'JobNode':
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('node'),
					_1: {
						ctor: '::',
						_0: idAttr,
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _concourse$atc$BetaPipeline$viewJobNode(_p9._0),
					_1: {ctor: '[]'}
				});
		case 'InputNode':
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('node input'),
					_1: {
						ctor: '::',
						_0: idAttr,
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _concourse$atc$BetaPipeline$viewInputNode(_p9._0.resourceName),
					_1: {ctor: '[]'}
				});
		case 'ConstrainedInputNode':
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('node input constrained'),
					_1: {
						ctor: '::',
						_0: idAttr,
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _concourse$atc$BetaPipeline$viewConstrainedInputNode(_p9._0.resourceName),
					_1: {ctor: '[]'}
				});
		default:
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('node output'),
					_1: {
						ctor: '::',
						_0: idAttr,
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _concourse$atc$BetaPipeline$viewOutputNode(_p9._0.resourceName),
					_1: {ctor: '[]'}
				});
	}
};
var _concourse$atc$BetaPipeline$viewGrid = function (grid) {
	var _p10 = grid;
	switch (_p10.ctor) {
		case 'Cell':
			return _concourse$atc$BetaPipeline$viewNode(_p10._0.node);
		case 'Serial':
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('serial-grid'),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					_concourse$atc$BetaPipeline$viewSerial(_p10._0),
					_concourse$atc$BetaPipeline$viewSerial(_p10._1)));
		case 'Parallel':
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('parallel-grid'),
					_1: {ctor: '[]'}
				},
				A2(_elm_lang$core$List$map, _concourse$atc$BetaPipeline$viewGrid, _p10._0));
		default:
			return _elm_lang$html$Html$text('');
	}
};
var _concourse$atc$BetaPipeline$viewSerial = function (grid) {
	var _p11 = grid;
	if (_p11.ctor === 'Serial') {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_concourse$atc$BetaPipeline$viewSerial(_p11._0),
			_concourse$atc$BetaPipeline$viewSerial(_p11._1));
	} else {
		return {
			ctor: '::',
			_0: _concourse$atc$BetaPipeline$viewGrid(grid),
			_1: {ctor: '[]'}
		};
	}
};
var _concourse$atc$BetaPipeline$nodeHeight = function (_p12) {
	var _p13 = _p12;
	var _p14 = _p13.label;
	if (_p14.ctor === 'JobNode') {
		return A2(
			_elm_lang$core$Basics$max,
			1,
			_concourse$atc$BetaPipeline$jobResources(_p14._0));
	} else {
		return 1;
	}
};
var _concourse$atc$BetaPipeline$viewMatrixCell = function (mnode) {
	var _p15 = mnode;
	switch (_p15.ctor) {
		case 'MatrixSpacer':
			return A2(
				_elm_lang$html$Html$td,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('spacer'),
					_1: {ctor: '[]'}
				},
				{ctor: '[]'});
		case 'MatrixNode':
			var _p16 = _p15._0.node;
			return A2(
				_elm_lang$html$Html$td,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$rowspan(
						_concourse$atc$BetaPipeline$nodeHeight(_p16)),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _concourse$atc$BetaPipeline$viewNode(_p16),
					_1: {ctor: '[]'}
				});
		default:
			return _elm_lang$html$Html$text('');
	}
};
var _concourse$atc$BetaPipeline$viewRow = function (row) {
	return A2(
		_elm_lang$html$Html$tr,
		{ctor: '[]'},
		A2(_elm_lang$core$List$map, _concourse$atc$BetaPipeline$viewMatrixCell, row));
};
var _concourse$atc$BetaPipeline$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _concourse$atc$BetaPipeline$update = F2(
	function (msg, model) {
		var _p17 = msg;
		if (_p17.ctor === 'Noop') {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		} else {
			if (_p17._0.ctor === 'Ok') {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{jobs: _p17._0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							error: _elm_lang$core$Maybe$Just(
								_elm_lang$core$Basics$toString(_p17._0._0))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			}
		}
	});
var _concourse$atc$BetaPipeline$Model = F6(
	function (a, b, c, d, e, f) {
		return {ports: a, pipelineLocator: b, jobs: c, error: d, selectedGroups: e, turbulenceImgSrc: f};
	});
var _concourse$atc$BetaPipeline$Ports = function (a) {
	return {title: a};
};
var _concourse$atc$BetaPipeline$Flags = F4(
	function (a, b, c, d) {
		return {teamName: a, pipelineName: b, turbulenceImgSrc: c, route: d};
	});
var _concourse$atc$BetaPipeline$ConstrainedInputNode = function (a) {
	return {ctor: 'ConstrainedInputNode', _0: a};
};
var _concourse$atc$BetaPipeline$constrainedInputNode = F4(
	function (jobs, resourceName, dependentJob, upstreamJobName) {
		return _concourse$atc$BetaPipeline$ConstrainedInputNode(
			{
				resourceName: resourceName,
				dependentJob: dependentJob,
				upstreamJob: A2(_elm_lang$core$Dict$get, upstreamJobName, jobs)
			});
	});
var _concourse$atc$BetaPipeline$OutputNode = function (a) {
	return {ctor: 'OutputNode', _0: a};
};
var _concourse$atc$BetaPipeline$InputNode = function (a) {
	return {ctor: 'InputNode', _0: a};
};
var _concourse$atc$BetaPipeline$inputNodes = F3(
	function (jobs, job, _p18) {
		var _p19 = _p18;
		var _p21 = _p19.resource;
		var _p20 = _p19.passed;
		return _elm_lang$core$List$isEmpty(_p20) ? {
			ctor: '::',
			_0: _concourse$atc$BetaPipeline$InputNode(
				{resourceName: _p21, dependentJob: job}),
			_1: {ctor: '[]'}
		} : A2(
			_elm_lang$core$List$map,
			A3(_concourse$atc$BetaPipeline$constrainedInputNode, jobs, _p21, job),
			_p20);
	});
var _concourse$atc$BetaPipeline$jobResourceNodes = F2(
	function (jobs, job) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			A2(
				_elm_lang$core$List$concatMap,
				A2(_concourse$atc$BetaPipeline$inputNodes, jobs, job),
				job.inputs),
			A2(
				_elm_lang$core$List$concatMap,
				_concourse$atc$BetaPipeline$outputNodes(job),
				job.outputs));
	});
var _concourse$atc$BetaPipeline$JobNode = function (a) {
	return {ctor: 'JobNode', _0: a};
};
var _concourse$atc$BetaPipeline$jobId = F2(
	function (nodes, job) {
		var _p23 = A2(
			_elm_lang$core$List$filter,
			function (_p22) {
				return A2(
					F2(
						function (x, y) {
							return _elm_lang$core$Native_Utils.eq(x, y);
						}),
					_concourse$atc$BetaPipeline$JobNode(job),
					function (_) {
						return _.label;
					}(_p22));
			},
			nodes);
		if (_p23.ctor === '::') {
			return _p23._0.id;
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'BetaPipeline',
				{
					start: {line: 364, column: 5},
					end: {line: 369, column: 58}
				},
				_p23)('impossible: job index not found');
		}
	});
var _concourse$atc$BetaPipeline$nodeEdges = F2(
	function (allNodes, _p25) {
		var _p26 = _p25;
		var _p29 = _p26.id;
		var _p27 = _p26.label;
		switch (_p27.ctor) {
			case 'JobNode':
				return {ctor: '[]'};
			case 'InputNode':
				return {
					ctor: '::',
					_0: A3(
						_elm_community$graph$Graph$Edge,
						_p29,
						A2(_concourse$atc$BetaPipeline$jobId, allNodes, _p27._0.dependentJob),
						{ctor: '_Tuple0'}),
					_1: {ctor: '[]'}
				};
			case 'ConstrainedInputNode':
				return {
					ctor: '::',
					_0: A3(
						_elm_community$graph$Graph$Edge,
						_p29,
						A2(_concourse$atc$BetaPipeline$jobId, allNodes, _p27._0.dependentJob),
						{ctor: '_Tuple0'}),
					_1: function () {
						var _p28 = _p27._0.upstreamJob;
						if (_p28.ctor === 'Just') {
							return {
								ctor: '::',
								_0: A3(
									_elm_community$graph$Graph$Edge,
									A2(_concourse$atc$BetaPipeline$jobId, allNodes, _p28._0),
									_p29,
									{ctor: '_Tuple0'}),
								_1: {ctor: '[]'}
							};
						} else {
							return {ctor: '[]'};
						}
					}()
				};
			default:
				return {
					ctor: '::',
					_0: A3(
						_elm_community$graph$Graph$Edge,
						A2(_concourse$atc$BetaPipeline$jobId, allNodes, _p27._0.upstreamJob),
						_p29,
						{ctor: '_Tuple0'}),
					_1: {ctor: '[]'}
				};
		}
	});
var _concourse$atc$BetaPipeline$initGraph = function (jobs) {
	var jobsByName = A3(
		_elm_lang$core$List$foldl,
		F2(
			function (job, dict) {
				return A3(_elm_lang$core$Dict$insert, job.name, job, dict);
			}),
		_elm_lang$core$Dict$empty,
		jobs);
	var resourceNodes = A2(
		_elm_lang$core$List$concatMap,
		_concourse$atc$BetaPipeline$jobResourceNodes(jobsByName),
		jobs);
	var jobNodes = A2(_elm_lang$core$List$map, _concourse$atc$BetaPipeline$JobNode, jobs);
	var graphNodes = A2(
		_elm_lang$core$List$indexedMap,
		_elm_community$graph$Graph$Node,
		_elm_lang$core$List$concat(
			{
				ctor: '::',
				_0: jobNodes,
				_1: {
					ctor: '::',
					_0: resourceNodes,
					_1: {ctor: '[]'}
				}
			}));
	return A2(
		_elm_community$graph$Graph$fromNodesAndEdges,
		graphNodes,
		A2(
			_elm_lang$core$List$concatMap,
			_concourse$atc$BetaPipeline$nodeEdges(graphNodes),
			graphNodes));
};
var _concourse$atc$BetaPipeline$view = function (model) {
	var _p30 = model.error;
	if (_p30.ctor === 'Just') {
		return _elm_lang$html$Html$text(
			A2(_elm_lang$core$Basics_ops['++'], 'error: ', _p30._0));
	} else {
		var filtered = _elm_lang$core$List$isEmpty(model.selectedGroups) ? model.jobs : A2(
			_elm_lang$core$List$filter,
			function (_p31) {
				return A2(
					_elm_lang$core$List$any,
					A2(_elm_lang$core$Basics$flip, _elm_lang$core$List$member, model.selectedGroups),
					function (_) {
						return _.groups;
					}(_p31));
			},
			model.jobs);
		var graph = _concourse$atc$BetaPipeline$initGraph(filtered);
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('pipeline-grid'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _concourse$atc$BetaPipeline$viewGrid(
					_concourse$atc$Grid$fromGraph(graph)),
				_1: {ctor: '[]'}
			});
	}
};
var _concourse$atc$BetaPipeline$JobsFetched = function (a) {
	return {ctor: 'JobsFetched', _0: a};
};
var _concourse$atc$BetaPipeline$fetchJobs = function (pid) {
	return A2(
		_elm_lang$core$Task$attempt,
		_concourse$atc$BetaPipeline$JobsFetched,
		_concourse$atc$Concourse_Job$fetchJobs(pid));
};
var _concourse$atc$BetaPipeline$init = F2(
	function (ports, flags) {
		var model = {
			ports: ports,
			pipelineLocator: {teamName: flags.teamName, pipelineName: flags.pipelineName},
			jobs: {ctor: '[]'},
			error: _elm_lang$core$Maybe$Nothing,
			selectedGroups: _concourse$atc$BetaPipeline$queryGroupsForRoute(flags.route),
			turbulenceImgSrc: flags.turbulenceImgSrc
		};
		return {
			ctor: '_Tuple2',
			_0: model,
			_1: _concourse$atc$BetaPipeline$fetchJobs(model.pipelineLocator)
		};
	});
var _concourse$atc$BetaPipeline$changeToPipelineAndGroups = F2(
	function (flags, model) {
		var pid = {teamName: flags.teamName, pipelineName: flags.pipelineName};
		return _elm_lang$core$Native_Utils.eq(model.pipelineLocator, pid) ? {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{
					selectedGroups: _concourse$atc$BetaPipeline$queryGroupsForRoute(flags.route)
				}),
			_1: _elm_lang$core$Platform_Cmd$none
		} : A2(_concourse$atc$BetaPipeline$init, model.ports, flags);
	});
var _concourse$atc$BetaPipeline$Noop = {ctor: 'Noop'};

var _concourse$atc$Concourse_Resource$fetchCausality = function (vrid) {
	return _elm_lang$http$Http$toTask(
		A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$http$Http$get,
			_elm_lang$core$Json_Decode$list(_concourse$atc$Concourse$decodeCause),
			A2(
				_elm_lang$core$Basics_ops['++'],
				'/api/v1/teams/',
				A2(
					_elm_lang$core$Basics_ops['++'],
					vrid.teamName,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'/pipelines/',
						A2(
							_elm_lang$core$Basics_ops['++'],
							vrid.pipelineName,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'/resources/',
								A2(
									_elm_lang$core$Basics_ops['++'],
									vrid.resourceName,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'/versions/',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_elm_lang$core$Basics$toString(vrid.versionID),
											'/causality'))))))))));
};
var _concourse$atc$Concourse_Resource$fetchInputOutput = F2(
	function (action, vrid) {
		return function (_p0) {
			return _elm_lang$http$Http$toTask(
				A3(
					_elm_lang$core$Basics$flip,
					_elm_lang$http$Http$get,
					_elm_lang$core$Json_Decode$list(_concourse$atc$Concourse$decodeBuild),
					_p0));
		}(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'/api/v1/teams/',
				A2(
					_elm_lang$core$Basics_ops['++'],
					vrid.teamName,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'/pipelines/',
						A2(
							_elm_lang$core$Basics_ops['++'],
							vrid.pipelineName,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'/resources/',
								A2(
									_elm_lang$core$Basics_ops['++'],
									vrid.resourceName,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'/versions/',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_elm_lang$core$Basics$toString(vrid.versionID),
											A2(_elm_lang$core$Basics_ops['++'], '/', action))))))))));
	});
var _concourse$atc$Concourse_Resource$fetchOutputOf = _concourse$atc$Concourse_Resource$fetchInputOutput('output_of');
var _concourse$atc$Concourse_Resource$fetchInputTo = _concourse$atc$Concourse_Resource$fetchInputOutput('input_to');
var _concourse$atc$Concourse_Resource$enableDisableVersionedResource = F3(
	function (enable, vrid, csrfToken) {
		var action = enable ? 'enable' : 'disable';
		return _elm_lang$http$Http$toTask(
			_elm_lang$http$Http$request(
				{
					method: 'PUT',
					url: A2(
						_elm_lang$core$Basics_ops['++'],
						'/api/v1/teams/',
						A2(
							_elm_lang$core$Basics_ops['++'],
							vrid.teamName,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'/pipelines/',
								A2(
									_elm_lang$core$Basics_ops['++'],
									vrid.pipelineName,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'/resources/',
										A2(
											_elm_lang$core$Basics_ops['++'],
											vrid.resourceName,
											A2(
												_elm_lang$core$Basics_ops['++'],
												'/versions/',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Basics$toString(vrid.versionID),
													A2(_elm_lang$core$Basics_ops['++'], '/', action))))))))),
					headers: {
						ctor: '::',
						_0: A2(_elm_lang$http$Http$header, _concourse$atc$Concourse$csrfTokenHeaderName, csrfToken),
						_1: {ctor: '[]'}
					},
					body: _elm_lang$http$Http$emptyBody,
					expect: _elm_lang$http$Http$expectStringResponse(
						function (_p1) {
							return _elm_lang$core$Result$Ok(
								{ctor: '_Tuple0'});
						}),
					timeout: _elm_lang$core$Maybe$Nothing,
					withCredentials: false
				}));
	});
var _concourse$atc$Concourse_Resource$disableVersionedResource = _concourse$atc$Concourse_Resource$enableDisableVersionedResource(false);
var _concourse$atc$Concourse_Resource$enableVersionedResource = _concourse$atc$Concourse_Resource$enableDisableVersionedResource(true);
var _concourse$atc$Concourse_Resource$fetchVersionedResources = F2(
	function (rid, page) {
		var url = A2(
			_elm_lang$core$Basics_ops['++'],
			'/api/v1/teams/',
			A2(
				_elm_lang$core$Basics_ops['++'],
				rid.teamName,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'/pipelines/',
					A2(
						_elm_lang$core$Basics_ops['++'],
						rid.pipelineName,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'/resources/',
							A2(_elm_lang$core$Basics_ops['++'], rid.resourceName, '/versions'))))));
		return A3(_concourse$atc$Concourse_Pagination$fetch, _concourse$atc$Concourse$decodeVersionedResource, url, page);
	});
var _concourse$atc$Concourse_Resource$fetchVersionedResource = function (vrid) {
	return function (_p2) {
		return _elm_lang$http$Http$toTask(
			A3(_elm_lang$core$Basics$flip, _elm_lang$http$Http$get, _concourse$atc$Concourse$decodeVersionedResource, _p2));
	}(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'/api/v1/teams/',
			A2(
				_elm_lang$core$Basics_ops['++'],
				vrid.teamName,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'/pipelines/',
					A2(
						_elm_lang$core$Basics_ops['++'],
						vrid.pipelineName,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'/resources/',
							A2(
								_elm_lang$core$Basics_ops['++'],
								vrid.resourceName,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'/versions/',
									_elm_lang$core$Basics$toString(vrid.versionID)))))))));
};
var _concourse$atc$Concourse_Resource$pauseUnpause = F3(
	function (pause, rid, csrfToken) {
		var action = pause ? 'pause' : 'unpause';
		return _elm_lang$http$Http$toTask(
			_elm_lang$http$Http$request(
				{
					method: 'PUT',
					url: A2(
						_elm_lang$core$Basics_ops['++'],
						'/api/v1/teams/',
						A2(
							_elm_lang$core$Basics_ops['++'],
							rid.teamName,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'/pipelines/',
								A2(
									_elm_lang$core$Basics_ops['++'],
									rid.pipelineName,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'/resources/',
										A2(
											_elm_lang$core$Basics_ops['++'],
											rid.resourceName,
											A2(_elm_lang$core$Basics_ops['++'], '/', action))))))),
					headers: {
						ctor: '::',
						_0: A2(_elm_lang$http$Http$header, _concourse$atc$Concourse$csrfTokenHeaderName, csrfToken),
						_1: {ctor: '[]'}
					},
					body: _elm_lang$http$Http$emptyBody,
					expect: _elm_lang$http$Http$expectStringResponse(
						function (_p3) {
							return _elm_lang$core$Result$Ok(
								{ctor: '_Tuple0'});
						}),
					timeout: _elm_lang$core$Maybe$Nothing,
					withCredentials: false
				}));
	});
var _concourse$atc$Concourse_Resource$unpause = _concourse$atc$Concourse_Resource$pauseUnpause(false);
var _concourse$atc$Concourse_Resource$pause = _concourse$atc$Concourse_Resource$pauseUnpause(true);
var _concourse$atc$Concourse_Resource$fetchResourcesRaw = function (pi) {
	return _elm_lang$http$Http$toTask(
		A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$http$Http$get,
			_elm_lang$core$Json_Decode$value,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'/api/v1/teams/',
				A2(
					_elm_lang$core$Basics_ops['++'],
					pi.teamName,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'/pipelines/',
						A2(_elm_lang$core$Basics_ops['++'], pi.pipelineName, '/resources'))))));
};
var _concourse$atc$Concourse_Resource$fetchResource = function (rid) {
	return function (_p4) {
		return _elm_lang$http$Http$toTask(
			A3(_elm_lang$core$Basics$flip, _elm_lang$http$Http$get, _concourse$atc$Concourse$decodeResource, _p4));
	}(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'/api/v1/teams/',
			A2(
				_elm_lang$core$Basics_ops['++'],
				rid.teamName,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'/pipelines/',
					A2(
						_elm_lang$core$Basics_ops['++'],
						rid.pipelineName,
						A2(_elm_lang$core$Basics_ops['++'], '/resources/', rid.resourceName))))));
};

var _sporto$erl$Erl$appendPathSegments = F2(
	function (segments, url) {
		var newPath = A2(_elm_lang$core$List$append, url.path, segments);
		return _elm_lang$core$Native_Utils.update(
			url,
			{path: newPath});
	});
var _sporto$erl$Erl$getQueryValuesForKey = F2(
	function (key, url) {
		return A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$second,
			A2(
				_elm_lang$core$List$filter,
				function (_p0) {
					var _p1 = _p0;
					return _elm_lang$core$Native_Utils.eq(_p1._0, key);
				},
				url.query));
	});
var _sporto$erl$Erl$removeQuery = F2(
	function (key, url) {
		var updated = A2(
			_elm_lang$core$List$filter,
			function (_p2) {
				var _p3 = _p2;
				return !_elm_lang$core$Native_Utils.eq(_p3._0, key);
			},
			url.query);
		return _elm_lang$core$Native_Utils.update(
			url,
			{query: updated});
	});
var _sporto$erl$Erl$addQuery = F3(
	function (key, val, url) {
		var updated = _elm_lang$core$List$reverse(
			A2(
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				{ctor: '_Tuple2', _0: key, _1: val},
				_elm_lang$core$List$reverse(url.query)));
		return _elm_lang$core$Native_Utils.update(
			url,
			{query: updated});
	});
var _sporto$erl$Erl$setQuery = F3(
	function (key, val, url) {
		var without = A2(_sporto$erl$Erl$removeQuery, key, url);
		return A3(_sporto$erl$Erl$addQuery, key, val, without);
	});
var _sporto$erl$Erl$clearQuery = function (url) {
	return _elm_lang$core$Native_Utils.update(
		url,
		{
			query: {ctor: '[]'}
		});
};
var _sporto$erl$Erl$new = {
	protocol: '',
	username: '',
	password: '',
	host: {ctor: '[]'},
	path: {ctor: '[]'},
	hasLeadingSlash: false,
	hasTrailingSlash: false,
	port_: 0,
	hash: '',
	query: {ctor: '[]'}
};
var _sporto$erl$Erl$hashToString = function (url) {
	return _elm_lang$core$String$isEmpty(url.hash) ? '' : A2(_elm_lang$core$Basics_ops['++'], '#', url.hash);
};
var _sporto$erl$Erl$trailingSlashComponent = function (url) {
	return _elm_lang$core$Native_Utils.eq(url.hasTrailingSlash, true) ? '/' : '';
};
var _sporto$erl$Erl$portComponent = function (url) {
	var _p4 = url.port_;
	switch (_p4) {
		case 0:
			return '';
		case 80:
			return '';
		default:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				':',
				_elm_lang$core$Basics$toString(url.port_));
	}
};
var _sporto$erl$Erl$hostComponent = function (url) {
	return _elm_lang$http$Http$encodeUri(
		A2(_elm_lang$core$String$join, '.', url.host));
};
var _sporto$erl$Erl$pathComponent = function (url) {
	var leadingSlash = ((!_elm_lang$core$Native_Utils.eq(
		_sporto$erl$Erl$hostComponent(url),
		'')) || url.hasLeadingSlash) ? '/' : '';
	var encoded = A2(_elm_lang$core$List$map, _elm_lang$http$Http$encodeUri, url.path);
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(url.path),
		0) ? '' : A2(
		_elm_lang$core$Basics_ops['++'],
		leadingSlash,
		A2(_elm_lang$core$String$join, '/', encoded));
};
var _sporto$erl$Erl$protocolComponent = function (url) {
	var _p5 = url.protocol;
	if (_p5 === '') {
		return '';
	} else {
		return A2(_elm_lang$core$Basics_ops['++'], url.protocol, '://');
	}
};
var _sporto$erl$Erl$queryToString = function (url) {
	var encodedTuples = A2(
		_elm_lang$core$List$map,
		function (_p6) {
			var _p7 = _p6;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$http$Http$encodeUri(_p7._0),
				_1: _elm_lang$http$Http$encodeUri(_p7._1)
			};
		},
		url.query);
	var parts = A2(
		_elm_lang$core$List$map,
		function (_p8) {
			var _p9 = _p8;
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p9._0,
				A2(_elm_lang$core$Basics_ops['++'], '=', _p9._1));
		},
		encodedTuples);
	return _elm_lang$core$List$isEmpty(url.query) ? '' : A2(
		_elm_lang$core$Basics_ops['++'],
		'?',
		A2(_elm_lang$core$String$join, '&', parts));
};
var _sporto$erl$Erl$toString = function (url) {
	var hash = _sporto$erl$Erl$hashToString(url);
	var query_ = _sporto$erl$Erl$queryToString(url);
	var trailingSlash_ = _sporto$erl$Erl$trailingSlashComponent(url);
	var path_ = _sporto$erl$Erl$pathComponent(url);
	var port_ = _sporto$erl$Erl$portComponent(url);
	var host_ = _sporto$erl$Erl$hostComponent(url);
	var protocol_ = _sporto$erl$Erl$protocolComponent(url);
	return A2(
		_elm_lang$core$Basics_ops['++'],
		protocol_,
		A2(
			_elm_lang$core$Basics_ops['++'],
			host_,
			A2(
				_elm_lang$core$Basics_ops['++'],
				port_,
				A2(
					_elm_lang$core$Basics_ops['++'],
					path_,
					A2(
						_elm_lang$core$Basics_ops['++'],
						trailingSlash_,
						A2(_elm_lang$core$Basics_ops['++'], query_, hash))))));
};
var _sporto$erl$Erl$queryStringElementToTuple = function (element) {
	var splitted = A2(_elm_lang$core$String$split, '=', element);
	var first = A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$core$List$head(splitted));
	var firstDecoded = A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$http$Http$decodeUri(first));
	var second = A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$core$List$head(
			A2(_elm_lang$core$List$drop, 1, splitted)));
	var secondDecoded = A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$http$Http$decodeUri(second));
	return {ctor: '_Tuple2', _0: firstDecoded, _1: secondDecoded};
};
var _sporto$erl$Erl$parseQuery = function (queryString) {
	var splitted = A2(_elm_lang$core$String$split, '&', queryString);
	return _elm_lang$core$String$isEmpty(queryString) ? {ctor: '[]'} : A2(_elm_lang$core$List$map, _sporto$erl$Erl$queryStringElementToTuple, splitted);
};
var _sporto$erl$Erl$extractQuery = function (str) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$core$List$head(
			A2(
				_elm_lang$core$String$split,
				'#',
				A2(
					_elm_lang$core$Maybe$withDefault,
					'',
					_elm_lang$core$List$head(
						A2(
							_elm_lang$core$List$drop,
							1,
							A2(_elm_lang$core$String$split, '?', str)))))));
};
var _sporto$erl$Erl$queryFromAll = function (all) {
	return _sporto$erl$Erl$parseQuery(
		_sporto$erl$Erl$extractQuery(all));
};
var _sporto$erl$Erl$extractHash = function (str) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$core$List$head(
			A2(
				_elm_lang$core$List$drop,
				1,
				A2(_elm_lang$core$String$split, '#', str))));
};
var _sporto$erl$Erl$hashFromAll = function (str) {
	return _sporto$erl$Erl$extractHash(str);
};
var _sporto$erl$Erl$parseHost = function (str) {
	return A2(_elm_lang$core$String$split, '.', str);
};
var _sporto$erl$Erl$extractProtocol = function (str) {
	var parts = A2(_elm_lang$core$String$split, '://', str);
	var _p10 = _elm_lang$core$List$length(parts);
	if (_p10 === 1) {
		return '';
	} else {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_elm_lang$core$List$head(parts));
	}
};
var _sporto$erl$Erl$extractPort = function (str) {
	var rx = _elm_lang$core$Regex$regex(':\\d+');
	var res = A3(
		_elm_lang$core$Regex$find,
		_elm_lang$core$Regex$AtMost(1),
		rx,
		str);
	return function (result) {
		var _p11 = result;
		if (_p11.ctor === 'Ok') {
			return _p11._0;
		} else {
			var _p12 = _sporto$erl$Erl$extractProtocol(str);
			switch (_p12) {
				case 'http':
					return 80;
				case 'https':
					return 443;
				case 'ftp':
					return 21;
				case 'sftp':
					return 22;
				default:
					return 0;
			}
		}
	}(
		_elm_lang$core$String$toInt(
			A2(
				_elm_lang$core$String$dropLeft,
				1,
				A2(
					_elm_lang$core$Maybe$withDefault,
					'',
					_elm_lang$core$List$head(
						A2(
							_elm_lang$core$List$map,
							function (_) {
								return _.match;
							},
							res))))));
};
var _sporto$erl$Erl$leftFrom = F2(
	function (delimiter, str) {
		var parts = A2(_elm_lang$core$String$split, delimiter, str);
		var head = _elm_lang$core$List$head(parts);
		var _p13 = _elm_lang$core$List$length(parts);
		switch (_p13) {
			case 0:
				return '';
			case 1:
				return '';
			default:
				return A2(_elm_lang$core$Maybe$withDefault, '', head);
		}
	});
var _sporto$erl$Erl$leftFromOrSame = F2(
	function (delimiter, str) {
		var parts = A2(_elm_lang$core$String$split, delimiter, str);
		return A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_elm_lang$core$List$head(parts));
	});
var _sporto$erl$Erl$rightFromOrSame = F2(
	function (delimiter, str) {
		var parts = A2(_elm_lang$core$String$split, delimiter, str);
		return A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_elm_lang$core$List$head(
				_elm_lang$core$List$reverse(parts)));
	});
var _sporto$erl$Erl$extractHost = function (str) {
	if (A2(_elm_lang$core$String$contains, '//', str)) {
		return A2(
			_sporto$erl$Erl$leftFromOrSame,
			':',
			A2(
				_sporto$erl$Erl$leftFromOrSame,
				'/',
				A2(_sporto$erl$Erl$rightFromOrSame, '//', str)));
	} else {
		var rx = '((\\w|-)+\\.)+(\\w|-)+';
		return A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_elm_lang$core$List$head(
				A2(
					_elm_lang$core$List$map,
					function (_) {
						return _.match;
					},
					A3(
						_elm_lang$core$Regex$find,
						_elm_lang$core$Regex$AtMost(1),
						_elm_lang$core$Regex$regex(rx),
						A2(
							_sporto$erl$Erl$leftFromOrSame,
							'/',
							A2(_sporto$erl$Erl$rightFromOrSame, '//', str))))));
	}
};
var _sporto$erl$Erl$host = function (str) {
	return _sporto$erl$Erl$parseHost(
		_sporto$erl$Erl$extractHost(str));
};
var _sporto$erl$Erl$extractPath = function (str) {
	var host = _sporto$erl$Erl$extractHost(str);
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$AtMost(1),
		_elm_lang$core$Regex$regex(':\\d+'),
		function (_p14) {
			return '';
		},
		A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$AtMost(1),
			_elm_lang$core$Regex$regex(host),
			function (_p15) {
				return '';
			},
			A2(
				_sporto$erl$Erl$leftFromOrSame,
				'#',
				A2(
					_sporto$erl$Erl$leftFromOrSame,
					'?',
					A2(_sporto$erl$Erl$rightFromOrSame, '//', str)))));
};
var _sporto$erl$Erl$hasLeadingSlashFromAll = function (str) {
	return A2(
		_elm_lang$core$Regex$contains,
		_elm_lang$core$Regex$regex('^/'),
		_sporto$erl$Erl$extractPath(str));
};
var _sporto$erl$Erl$hasTrailingSlashFromAll = function (str) {
	return A2(
		_elm_lang$core$Regex$contains,
		_elm_lang$core$Regex$regex('/$'),
		_sporto$erl$Erl$extractPath(str));
};
var _sporto$erl$Erl$rightFrom = F2(
	function (delimiter, str) {
		var parts = A2(_elm_lang$core$String$split, delimiter, str);
		var _p16 = _elm_lang$core$List$length(parts);
		switch (_p16) {
			case 0:
				return '';
			case 1:
				return '';
			default:
				return A2(
					_elm_lang$core$Maybe$withDefault,
					'',
					_elm_lang$core$List$head(
						_elm_lang$core$List$reverse(parts)));
		}
	});
var _sporto$erl$Erl$notEmpty = function (str) {
	return !_elm_lang$core$String$isEmpty(str);
};
var _sporto$erl$Erl$parsePath = function (str) {
	return A2(
		_elm_lang$core$List$map,
		_elm_lang$core$Maybe$withDefault(''),
		A2(
			_elm_lang$core$List$map,
			_elm_lang$http$Http$decodeUri,
			A2(
				_elm_lang$core$List$filter,
				_sporto$erl$Erl$notEmpty,
				A2(_elm_lang$core$String$split, '/', str))));
};
var _sporto$erl$Erl$pathFromAll = function (str) {
	return _sporto$erl$Erl$parsePath(
		_sporto$erl$Erl$extractPath(str));
};
var _sporto$erl$Erl$parse = function (str) {
	return {
		host: _sporto$erl$Erl$host(str),
		hash: _sporto$erl$Erl$hashFromAll(str),
		password: '',
		path: _sporto$erl$Erl$pathFromAll(str),
		hasLeadingSlash: _sporto$erl$Erl$hasLeadingSlashFromAll(str),
		hasTrailingSlash: _sporto$erl$Erl$hasTrailingSlashFromAll(str),
		port_: _sporto$erl$Erl$extractPort(str),
		protocol: _sporto$erl$Erl$extractProtocol(str),
		query: _sporto$erl$Erl$queryFromAll(str),
		username: ''
	};
};
var _sporto$erl$Erl$Url = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {protocol: a, username: b, password: c, host: d, port_: e, path: f, hasLeadingSlash: g, hasTrailingSlash: h, hash: i, query: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};

var _concourse$atc$BetaResource$isExpanded = F2(
	function (states, versionedResource) {
		var state = A2(_elm_lang$core$Dict$get, versionedResource.id, states);
		var _p0 = state;
		if (_p0.ctor === 'Nothing') {
			return false;
		} else {
			return _p0._0.expanded;
		}
	});
var _concourse$atc$BetaResource$listToMap = function (builds) {
	var insertBuild = F2(
		function (build, dict) {
			var jobName = function () {
				var _p1 = build.job;
				if (_p1.ctor === 'Nothing') {
					return A2(
						_elm_lang$core$Native_Utils.crash(
							'BetaResource',
							{
								start: {line: 883, column: 33},
								end: {line: 883, column: 44}
							}),
						'Jobless builds shouldn\'t appear on this page!',
						'');
				} else {
					return _p1._0.jobName;
				}
			}();
			var oldList = A2(_elm_lang$core$Dict$get, jobName, dict);
			var newList = function () {
				var _p2 = oldList;
				if (_p2.ctor === 'Nothing') {
					return {
						ctor: '::',
						_0: build,
						_1: {ctor: '[]'}
					};
				} else {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_p2._0,
						{
							ctor: '::',
							_0: build,
							_1: {ctor: '[]'}
						});
				}
			}();
			return A3(_elm_lang$core$Dict$insert, jobName, newList, dict);
		});
	return A3(_elm_lang$core$List$foldr, insertBuild, _elm_lang$core$Dict$empty, builds);
};
var _concourse$atc$BetaResource$viewMetadataField = function (field) {
	return {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$dt,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(field.name),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$dd,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$pre,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('metadata-field'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(field.value),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	};
};
var _concourse$atc$BetaResource$viewMetadata = function (metadata) {
	return A2(
		_elm_lang$html$Html$dl,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('build-metadata'),
			_1: {ctor: '[]'}
		},
		A2(_elm_lang$core$List$concatMap, _concourse$atc$BetaResource$viewMetadataField, metadata));
};
var _concourse$atc$BetaResource$getData = F2(
	function (a, dict) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_krisajenkins$remotedata$RemoteData$NotAsked,
			A2(_elm_lang$core$Dict$get, a, dict));
	});
var _concourse$atc$BetaResource$viewVersion = function (version) {
	return function (_p3) {
		return _concourse$atc$DictView$view(
			A2(
				_elm_lang$core$Dict$map,
				F2(
					function (_p4, s) {
						return _elm_lang$html$Html$text(s);
					}),
				_p3));
	}(version);
};
var _concourse$atc$BetaResource$viewVersionCausality = function (vr) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('causality-resource'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$span,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('resource-name'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(vr.resourceName),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text(' @ '),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: _concourse$atc$BetaResource$viewVersion(vr.version),
				_1: {ctor: '[]'}
			}
		});
};
var _concourse$atc$BetaResource$viewCauseVersion = F2(
	function (model, versionedResourceID) {
		var _p5 = A2(_concourse$atc$BetaResource$getData, versionedResourceID, model.causalityVersions);
		if (_p5.ctor === 'Success') {
			return _concourse$atc$BetaResource$viewVersionCausality(_p5._0);
		} else {
			return _elm_lang$html$Html$text(
				_elm_lang$core$Basics$toString(_p5));
		}
	});
var _concourse$atc$BetaResource$setState = F3(
	function (versionID, newState, states) {
		return A3(_elm_lang$core$Dict$insert, versionID, newState, states);
	});
var _concourse$atc$BetaResource$getState = F2(
	function (versionID, states) {
		var resourceState = A2(_elm_lang$core$Dict$get, versionID, states);
		var _p6 = resourceState;
		if (_p6.ctor === 'Nothing') {
			return {changingErrored: false, expanded: false};
		} else {
			return _p6._0;
		}
	});
var _concourse$atc$BetaResource$pipelineForCausality = F3(
	function (model, causality, betaPipelineModel) {
		var setJobBuild = F2(
			function (_p7, jobs) {
				var _p8 = _p7;
				var _p9 = A2(_concourse$atc$BetaResource$getData, _p8.buildID, model.causalityBuilds);
				if (_p9.ctor === 'Success') {
					var _p11 = _p9._0;
					var _p10 = _p11.job;
					if (_p10.ctor === 'Just') {
						return A3(
							_elm_lang$core$Basics$flip,
							_elm_lang$core$List$map,
							jobs,
							function (job) {
								return _elm_lang$core$Native_Utils.eq(job.name, _p10._0.jobName) ? (_concourse$atc$Concourse_BuildStatus$isRunning(_p11.status) ? _elm_lang$core$Native_Utils.update(
									job,
									{
										nextBuild: _elm_lang$core$Maybe$Just(_p11)
									}) : _elm_lang$core$Native_Utils.update(
									job,
									{
										finishedBuild: _elm_lang$core$Maybe$Just(_p11)
									})) : job;
							});
					} else {
						return jobs;
					}
				} else {
					return jobs;
				}
			});
		var resetJobState = _elm_lang$core$List$map(
			function (job) {
				return _elm_lang$core$Native_Utils.update(
					job,
					{nextBuild: _elm_lang$core$Maybe$Nothing, finishedBuild: _elm_lang$core$Maybe$Nothing});
			});
		return _elm_lang$core$Native_Utils.update(
			betaPipelineModel,
			{
				jobs: A3(
					_elm_lang$core$List$foldl,
					setJobBuild,
					resetJobState(betaPipelineModel.jobs),
					causality)
			});
	});
var _concourse$atc$BetaResource$switchEnabled = F2(
	function (versionID, versionedResource) {
		var wasEnabled = versionedResource.enabled;
		return _elm_lang$core$Native_Utils.eq(versionID, versionedResource.id) ? _elm_lang$core$Native_Utils.update(
			versionedResource,
			{enabled: !wasEnabled}) : versionedResource;
	});
var _concourse$atc$BetaResource$updateMatchingMember = F2(
	function (versionID, versionedResources) {
		return A2(
			_elm_lang$core$List$map,
			_concourse$atc$BetaResource$switchEnabled(versionID),
			versionedResources);
	});
var _concourse$atc$BetaResource$checkForVersionID = F2(
	function (versionID, versionedResource) {
		return _elm_lang$core$Native_Utils.eq(versionID, versionedResource.id);
	});
var _concourse$atc$BetaResource$paginationRoute = F2(
	function (rid, page) {
		var parsedRoute = _sporto$erl$Erl$parse(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'/teams/',
				A2(
					_elm_lang$core$Basics_ops['++'],
					rid.teamName,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'/pipelines/',
						A2(
							_elm_lang$core$Basics_ops['++'],
							rid.pipelineName,
							A2(_elm_lang$core$Basics_ops['++'], '/resources/', rid.resourceName))))));
		var _p12 = function () {
			var _p13 = page.direction;
			switch (_p13.ctor) {
				case 'Since':
					return {
						ctor: '_Tuple2',
						_0: 'since',
						_1: _elm_lang$core$Basics$toString(_p13._0)
					};
				case 'Until':
					return {
						ctor: '_Tuple2',
						_0: 'until',
						_1: _elm_lang$core$Basics$toString(_p13._0)
					};
				case 'From':
					return {
						ctor: '_Tuple2',
						_0: 'from',
						_1: _elm_lang$core$Basics$toString(_p13._0)
					};
				default:
					return {
						ctor: '_Tuple2',
						_0: 'to',
						_1: _elm_lang$core$Basics$toString(_p13._0)
					};
			}
		}();
		var param = _p12._0;
		var boundary = _p12._1;
		var newParsedRoute = A3(
			_sporto$erl$Erl$addQuery,
			param,
			boundary,
			A3(
				_sporto$erl$Erl$addQuery,
				'limit',
				_elm_lang$core$Basics$toString(page.limit),
				parsedRoute));
		return _sporto$erl$Erl$toString(newParsedRoute);
	});
var _concourse$atc$BetaResource$permalink = function (versionedResources) {
	var _p14 = _elm_lang$core$List$head(versionedResources);
	if (_p14.ctor === 'Nothing') {
		return {
			direction: _concourse$atc$Concourse_Pagination$Since(0),
			limit: 100
		};
	} else {
		return {
			direction: _concourse$atc$Concourse_Pagination$From(_p14._0.id),
			limit: _elm_lang$core$List$length(versionedResources)
		};
	}
};
var _concourse$atc$BetaResource$versionIdentifier = F2(
	function (model, versionedResourceID) {
		return {teamName: model.resourceIdentifier.teamName, pipelineName: model.resourceIdentifier.pipelineName, resourceName: model.resourceIdentifier.resourceName, versionID: versionedResourceID};
	});
var _concourse$atc$BetaResource$Ports = function (a) {
	return {title: a};
};
var _concourse$atc$BetaResource$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return {ports: a, resourceIdentifier: b, resource: c, pausedChanging: d, versionedResources: e, currentPage: f, csrfToken: g, versionedUIStates: h, causality: i, causalityBuilds: j, causalityVersions: k, betaPipelineModel: l};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _concourse$atc$BetaResource$VersionUIState = F2(
	function (a, b) {
		return {changingErrored: a, expanded: b};
	});
var _concourse$atc$BetaResource$Flags = F5(
	function (a, b, c, d, e) {
		return {teamName: a, pipelineName: b, resourceName: c, paging: d, csrfToken: e};
	});
var _concourse$atc$BetaResource$Errored = {ctor: 'Errored'};
var _concourse$atc$BetaResource$Changing = {ctor: 'Changing'};
var _concourse$atc$BetaResource$Stable = {ctor: 'Stable'};
var _concourse$atc$BetaResource$BetaPipelineMsg = function (a) {
	return {ctor: 'BetaPipelineMsg', _0: a};
};
var _concourse$atc$BetaResource$NavTo = function (a) {
	return {ctor: 'NavTo', _0: a};
};
var _concourse$atc$BetaResource$viewBuildCausality = function (build) {
	var jobName = A2(
		_elm_lang$core$Maybe$withDefault,
		'one-off',
		A2(
			_elm_lang$core$Maybe$map,
			function (_) {
				return _.jobName;
			},
			build.job));
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'causality-build ',
					_concourse$atc$Concourse_BuildStatus$show(build.status))),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _concourse$atc$StrictEvents$onLeftClick(
						_concourse$atc$BetaResource$NavTo(build.url)),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$href(build.url),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							jobName,
							A2(_elm_lang$core$Basics_ops['++'], ' #', build.name))),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _concourse$atc$BetaResource$viewCauseBuild = F2(
	function (model, buildID) {
		var _p15 = A2(_concourse$atc$BetaResource$getData, buildID, model.causalityBuilds);
		if (_p15.ctor === 'Success') {
			return _concourse$atc$BetaResource$viewBuildCausality(_p15._0);
		} else {
			return _elm_lang$html$Html$text(
				_elm_lang$core$Basics$toString(_p15));
		}
	});
var _concourse$atc$BetaResource$viewCauses = F4(
	function (model, causes, seenVersions, seenBuilds) {
		var _p16 = causes;
		if (_p16.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p19 = _p16._0.versionedResourceID;
			var _p18 = _p16._0.buildID;
			var viewRest = A4(
				_concourse$atc$BetaResource$viewCauses,
				model,
				_p16._1,
				A2(_elm_lang$core$Set$insert, _p19, seenVersions),
				A2(_elm_lang$core$Set$insert, _p18, seenBuilds));
			var version = A2(_concourse$atc$BetaResource$viewCauseVersion, model, _p19);
			var build = A2(_concourse$atc$BetaResource$viewCauseBuild, model, _p18);
			var _p17 = {
				ctor: '_Tuple2',
				_0: A2(_elm_lang$core$Set$member, _p19, seenVersions),
				_1: A2(_elm_lang$core$Set$member, _p18, seenBuilds)
			};
			if (_p17._0 === true) {
				if (_p17._1 === true) {
					return viewRest;
				} else {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: build,
							_1: {ctor: '[]'}
						},
						viewRest);
				}
			} else {
				if (_p17._1 === true) {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: version,
							_1: {ctor: '[]'}
						},
						viewRest);
				} else {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: version,
							_1: {
								ctor: '::',
								_0: build,
								_1: {ctor: '[]'}
							}
						},
						viewRest);
				}
			}
		}
	});
var _concourse$atc$BetaResource$viewCausality = F2(
	function (model, causality) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('causality-sequence'),
				_1: {ctor: '[]'}
			},
			A4(_concourse$atc$BetaResource$viewCauses, model, causality, _elm_lang$core$Set$empty, _elm_lang$core$Set$empty));
	});
var _concourse$atc$BetaResource$viewBuildsByJob = F2(
	function (buildDict, jobName) {
		var oneBuildToLi = function (build) {
			var link = function () {
				var _p20 = build.job;
				if (_p20.ctor === 'Nothing') {
					return '';
				} else {
					var _p21 = _p20._0;
					return A2(
						_elm_lang$core$Basics_ops['++'],
						'/teams/',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p21.teamName,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'/pipelines/',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p21.pipelineName,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'/jobs/',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_p21.jobName,
											A2(_elm_lang$core$Basics_ops['++'], '/builds/', build.name)))))));
				}
			}();
			return A2(
				_elm_lang$html$Html$li,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class(
						_concourse$atc$Concourse_BuildStatus$show(build.status)),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _concourse$atc$StrictEvents$onLeftClick(
								_concourse$atc$BetaResource$NavTo(link)),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href(link),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								A2(_elm_lang$core$Basics_ops['++'], '#', build.name)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				});
		};
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h3,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('man pas ansi-bright-black-bg'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(jobName),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$ul,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('builds-list'),
						_1: {ctor: '[]'}
					},
					function () {
						var _p22 = A2(_elm_lang$core$Dict$get, jobName, buildDict);
						if (_p22.ctor === 'Nothing') {
							return {ctor: '[]'};
						} else {
							return A2(_elm_lang$core$List$map, oneBuildToLi, _p22._0);
						}
					}()),
				_1: {ctor: '[]'}
			}
		};
	});
var _concourse$atc$BetaResource$viewBuilds = function (buildDict) {
	return A2(
		_elm_lang$core$List$concatMap,
		_concourse$atc$BetaResource$viewBuildsByJob(buildDict),
		_elm_lang$core$Dict$keys(buildDict));
};
var _concourse$atc$BetaResource$VersionedResourceFetched = F2(
	function (a, b) {
		return {ctor: 'VersionedResourceFetched', _0: a, _1: b};
	});
var _concourse$atc$BetaResource$fetchVersionedResource = function (versionedResourceIdentifier) {
	return function (_p23) {
		return A2(
			_elm_lang$core$Platform_Cmd$map,
			_concourse$atc$BetaResource$VersionedResourceFetched(versionedResourceIdentifier.versionID),
			_krisajenkins$remotedata$RemoteData$asCmd(_p23));
	}(
		_concourse$atc$Concourse_Resource$fetchVersionedResource(versionedResourceIdentifier));
};
var _concourse$atc$BetaResource$conditionallyFetchVersion = F2(
	function (id, _p24) {
		var _p25 = _p24;
		var _p28 = _p25._0;
		var _p27 = _p25._1;
		var _p26 = A2(_concourse$atc$BetaResource$getData, id, _p28.causalityVersions);
		if (_p26.ctor === 'NotAsked') {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					_p28,
					{
						causalityVersions: A3(_elm_lang$core$Dict$insert, id, _krisajenkins$remotedata$RemoteData$Loading, _p28.causalityVersions)
					}),
				_1: _elm_lang$core$Platform_Cmd$batch(
					{
						ctor: '::',
						_0: _concourse$atc$BetaResource$fetchVersionedResource(
							A2(_concourse$atc$BetaResource$versionIdentifier, _p28, id)),
						_1: {
							ctor: '::',
							_0: _p27,
							_1: {ctor: '[]'}
						}
					})
			};
		} else {
			return {ctor: '_Tuple2', _0: _p28, _1: _p27};
		}
	});
var _concourse$atc$BetaResource$BuildFetched = F2(
	function (a, b) {
		return {ctor: 'BuildFetched', _0: a, _1: b};
	});
var _concourse$atc$BetaResource$fetchBuild = function (buildID) {
	return function (_p29) {
		return A2(
			_elm_lang$core$Platform_Cmd$map,
			_concourse$atc$BetaResource$BuildFetched(buildID),
			_krisajenkins$remotedata$RemoteData$asCmd(_p29));
	}(
		_concourse$atc$Concourse_Build$fetch(buildID));
};
var _concourse$atc$BetaResource$conditionallyFetchBuild = F2(
	function (id, _p30) {
		var _p31 = _p30;
		var _p34 = _p31._0;
		var _p33 = _p31._1;
		var _p32 = A2(_concourse$atc$BetaResource$getData, id, _p34.causalityBuilds);
		switch (_p32.ctor) {
			case 'Success':
				return _concourse$atc$Concourse_BuildStatus$isRunning(_p32._0.status) ? {
					ctor: '_Tuple2',
					_0: _p34,
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: _concourse$atc$BetaResource$fetchBuild(id),
							_1: {
								ctor: '::',
								_0: _p33,
								_1: {ctor: '[]'}
							}
						})
				} : {ctor: '_Tuple2', _0: _p34, _1: _p33};
			case 'NotAsked':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						_p34,
						{
							causalityBuilds: A3(_elm_lang$core$Dict$insert, id, _krisajenkins$remotedata$RemoteData$Loading, _p34.causalityBuilds)
						}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: _concourse$atc$BetaResource$fetchBuild(id),
							_1: {
								ctor: '::',
								_0: _p33,
								_1: {ctor: '[]'}
							}
						})
				};
			default:
				return {ctor: '_Tuple2', _0: _p34, _1: _p33};
		}
	});
var _concourse$atc$BetaResource$CausalityFetched = F2(
	function (a, b) {
		return {ctor: 'CausalityFetched', _0: a, _1: b};
	});
var _concourse$atc$BetaResource$fetchCausality = function (versionedResourceIdentifier) {
	return A2(
		_elm_lang$core$Platform_Cmd$map,
		_concourse$atc$BetaResource$CausalityFetched(versionedResourceIdentifier.versionID),
		_krisajenkins$remotedata$RemoteData$asCmd(
			_concourse$atc$Concourse_Resource$fetchCausality(versionedResourceIdentifier)));
};
var _concourse$atc$BetaResource$fetchVersionCausality = F2(
	function (model, versionedResource) {
		return _concourse$atc$BetaResource$fetchCausality(
			A2(_concourse$atc$BetaResource$versionIdentifier, model, versionedResource.id));
	});
var _concourse$atc$BetaResource$updateExpandedProperties = function (model) {
	var filteredList = A2(
		_elm_lang$core$List$filter,
		_concourse$atc$BetaResource$isExpanded(model.versionedUIStates),
		model.versionedResources.content);
	return _elm_lang$core$Platform_Cmd$batch(
		A2(
			_elm_lang$core$List$map,
			_concourse$atc$BetaResource$fetchVersionCausality(model),
			filteredList));
};
var _concourse$atc$BetaResource$ExpandVersionedResource = function (a) {
	return {ctor: 'ExpandVersionedResource', _0: a};
};
var _concourse$atc$BetaResource$VersionedResourceToggled = F2(
	function (a, b) {
		return {ctor: 'VersionedResourceToggled', _0: a, _1: b};
	});
var _concourse$atc$BetaResource$enableVersionedResource = F2(
	function (versionedResourceIdentifier, csrfToken) {
		return A2(
			_elm_lang$core$Task$attempt,
			_concourse$atc$BetaResource$VersionedResourceToggled(versionedResourceIdentifier.versionID),
			A2(_concourse$atc$Concourse_Resource$enableVersionedResource, versionedResourceIdentifier, csrfToken));
	});
var _concourse$atc$BetaResource$disableVersionedResource = F2(
	function (versionedResourceIdentifier, csrfToken) {
		return A2(
			_elm_lang$core$Task$attempt,
			_concourse$atc$BetaResource$VersionedResourceToggled(versionedResourceIdentifier.versionID),
			A2(_concourse$atc$Concourse_Resource$disableVersionedResource, versionedResourceIdentifier, csrfToken));
	});
var _concourse$atc$BetaResource$ToggleVersionedResource = function (a) {
	return {ctor: 'ToggleVersionedResource', _0: a};
};
var _concourse$atc$BetaResource$viewVersionedResource = F3(
	function (model, states, versionedResource) {
		var resourceState = A2(_concourse$atc$BetaResource$getState, versionedResource.id, states);
		var expanded = resourceState.expanded ? ' expanded' : '';
		var liEnabled = A2(
			_elm_lang$core$Basics_ops['++'],
			resourceState.changingErrored ? 'errored ' : '',
			A2(
				_elm_lang$core$Basics_ops['++'],
				versionedResource.enabled ? 'enabled' : 'disabled',
				expanded));
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					A2(_elm_lang$core$Basics_ops['++'], 'list-collapsable-item clearfix ', liEnabled)),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('fl btn-power-toggle fa fa-power-off mrm'),
						_1: {
							ctor: '::',
							_0: _fapian$elm_html_aria$Html_Attributes_Aria$ariaLabel('Toggle Resource Version'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									_concourse$atc$BetaResource$ToggleVersionedResource(versionedResource.id)),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('list-collapsable-title'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									_concourse$atc$BetaResource$ExpandVersionedResource(versionedResource.id)),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _concourse$atc$BetaResource$viewVersion(versionedResource.version),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('list-collapsable-content clearfix'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('causality'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: function () {
											var _p35 = A2(_concourse$atc$BetaResource$getData, versionedResource.id, model.causality);
											if (_p35.ctor === 'Success') {
												return A2(_concourse$atc$BetaResource$viewCausality, model, _p35._0);
											} else {
												return _elm_lang$html$Html$text(
													_elm_lang$core$Basics$toString(_p35));
											}
										}(),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('pipeline'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: function () {
												var _p36 = A2(_concourse$atc$BetaResource$getData, versionedResource.id, model.causality);
												if (_p36.ctor === 'Success') {
													return A2(
														_elm_lang$html$Html$map,
														_concourse$atc$BetaResource$BetaPipelineMsg,
														_concourse$atc$BetaPipeline$view(
															A3(_concourse$atc$BetaResource$pipelineForCausality, model, _p36._0, model.betaPipelineModel)));
												} else {
													return _elm_lang$html$Html$text(
														_elm_lang$core$Basics$toString(_p36));
												}
											}(),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('vri metadata-container'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('list-collapsable-title'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('metadata'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: _concourse$atc$BetaResource$viewMetadata(versionedResource.metadata),
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _concourse$atc$BetaResource$viewVersionedResources = F3(
	function (model, versionedResources, states) {
		return A2(
			_elm_lang$html$Html$ul,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('list list-collapsable list-enableDisable resource-versions'),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$List$map,
				A2(_concourse$atc$BetaResource$viewVersionedResource, model, states),
				versionedResources));
	});
var _concourse$atc$BetaResource$LoadPage = function (a) {
	return {ctor: 'LoadPage', _0: a};
};
var _concourse$atc$BetaResource$VersionedResourcesFetched = F2(
	function (a, b) {
		return {ctor: 'VersionedResourcesFetched', _0: a, _1: b};
	});
var _concourse$atc$BetaResource$fetchVersionedResources = F2(
	function (resourceIdentifier, page) {
		return A2(
			_elm_lang$core$Task$attempt,
			_concourse$atc$BetaResource$VersionedResourcesFetched(page),
			A2(_concourse$atc$Concourse_Resource$fetchVersionedResources, resourceIdentifier, page));
	});
var _concourse$atc$BetaResource$changeToResource = F2(
	function (flags, model) {
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{
					currentPage: flags.paging,
					versionedResources: {
						content: {ctor: '[]'},
						pagination: {previousPage: _elm_lang$core$Maybe$Nothing, nextPage: _elm_lang$core$Maybe$Nothing}
					}
				}),
			_1: A2(_concourse$atc$BetaResource$fetchVersionedResources, model.resourceIdentifier, flags.paging)
		};
	});
var _concourse$atc$BetaResource$PausedToggled = function (a) {
	return {ctor: 'PausedToggled', _0: a};
};
var _concourse$atc$BetaResource$pauseResource = F2(
	function (resourceIdentifier, csrfToken) {
		return A2(
			_elm_lang$core$Task$attempt,
			_concourse$atc$BetaResource$PausedToggled,
			A2(_concourse$atc$Concourse_Resource$pause, resourceIdentifier, csrfToken));
	});
var _concourse$atc$BetaResource$unpauseResource = F2(
	function (resourceIdentifier, csrfToken) {
		return A2(
			_elm_lang$core$Task$attempt,
			_concourse$atc$BetaResource$PausedToggled,
			A2(_concourse$atc$Concourse_Resource$unpause, resourceIdentifier, csrfToken));
	});
var _concourse$atc$BetaResource$TogglePaused = {ctor: 'TogglePaused'};
var _concourse$atc$BetaResource$ResourceFetched = function (a) {
	return {ctor: 'ResourceFetched', _0: a};
};
var _concourse$atc$BetaResource$fetchResource = function (resourceIdentifier) {
	return A2(
		_elm_lang$core$Task$attempt,
		_concourse$atc$BetaResource$ResourceFetched,
		_concourse$atc$Concourse_Resource$fetchResource(resourceIdentifier));
};
var _concourse$atc$BetaResource$init = F2(
	function (ports, flags) {
		var _p37 = A2(
			_concourse$atc$BetaPipeline$init,
			{
				title: _elm_lang$core$Basics$always(_elm_lang$core$Platform_Cmd$none)
			},
			{
				teamName: flags.teamName,
				pipelineName: flags.pipelineName,
				turbulenceImgSrc: 'boring.png',
				route: {logical: _concourse$atc$BetaRoutes$BetaHome, queries: _Bogdanp$elm_querystring$QueryString$empty, page: _elm_lang$core$Maybe$Nothing, hash: ''}
			});
		var betaPipelineModel = _p37._0;
		var betaPipelineCmd = _p37._1;
		var _p38 = A2(
			_concourse$atc$BetaResource$changeToResource,
			flags,
			{
				resourceIdentifier: {teamName: flags.teamName, pipelineName: flags.pipelineName, resourceName: flags.resourceName},
				resource: _krisajenkins$remotedata$RemoteData$NotAsked,
				pausedChanging: _concourse$atc$BetaResource$Stable,
				currentPage: _elm_lang$core$Maybe$Nothing,
				versionedResources: {
					content: {ctor: '[]'},
					pagination: {previousPage: _elm_lang$core$Maybe$Nothing, nextPage: _elm_lang$core$Maybe$Nothing}
				},
				versionedUIStates: _elm_lang$core$Dict$empty,
				ports: ports,
				csrfToken: flags.csrfToken,
				causality: _elm_lang$core$Dict$empty,
				causalityBuilds: _elm_lang$core$Dict$empty,
				causalityVersions: _elm_lang$core$Dict$empty,
				betaPipelineModel: betaPipelineModel
			});
		var model = _p38._0;
		var cmd = _p38._1;
		return {
			ctor: '_Tuple2',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$batch(
				{
					ctor: '::',
					_0: _concourse$atc$BetaResource$fetchResource(model.resourceIdentifier),
					_1: {
						ctor: '::',
						_0: cmd,
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$core$Platform_Cmd$map, _concourse$atc$BetaResource$BetaPipelineMsg, betaPipelineCmd),
							_1: {ctor: '[]'}
						}
					}
				})
		};
	});
var _concourse$atc$BetaResource$update = F2(
	function (action, model) {
		var _p39 = action;
		switch (_p39.ctor) {
			case 'Noop':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'AutoupdateTimerTicked':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: _concourse$atc$BetaResource$fetchResource(model.resourceIdentifier),
							_1: {
								ctor: '::',
								_0: A2(_concourse$atc$BetaResource$fetchVersionedResources, model.resourceIdentifier, model.currentPage),
								_1: {
									ctor: '::',
									_0: _concourse$atc$BetaResource$updateExpandedProperties(model),
									_1: {ctor: '[]'}
								}
							}
						})
				};
			case 'ResourceFetched':
				if (_p39._0.ctor === 'Ok') {
					var _p40 = _p39._0._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								resource: _krisajenkins$remotedata$RemoteData$Success(_p40)
							}),
						_1: model.ports.title(
							A2(_elm_lang$core$Basics_ops['++'], _p40.name, ' - '))
					};
				} else {
					var _p43 = _p39._0._0;
					var _p41 = A2(_elm_lang$core$Debug$log, 'failed to fetch resource', _p43);
					if (_p41.ctor === 'BadStatus') {
						var _p42 = _p41._0.status;
						return _elm_lang$core$Native_Utils.eq(_p42.code, 401) ? {
							ctor: '_Tuple2',
							_0: model,
							_1: _concourse$atc$LoginRedirect$requestLoginRedirect('')
						} : (_elm_lang$core$Native_Utils.eq(_p42.code, 404) ? {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									resource: _krisajenkins$remotedata$RemoteData$Failure(_p43)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none});
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				}
			case 'TogglePaused':
				var _p44 = _krisajenkins$remotedata$RemoteData$toMaybe(model.resource);
				if (_p44.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					var _p45 = _p44._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								pausedChanging: _concourse$atc$BetaResource$Changing,
								resource: _krisajenkins$remotedata$RemoteData$Success(
									_elm_lang$core$Native_Utils.update(
										_p45,
										{paused: !_p45.paused}))
							}),
						_1: _p45.paused ? A2(_concourse$atc$BetaResource$unpauseResource, model.resourceIdentifier, model.csrfToken) : A2(_concourse$atc$BetaResource$pauseResource, model.resourceIdentifier, model.csrfToken)
					};
				}
			case 'PausedToggled':
				if (_p39._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{pausedChanging: _concourse$atc$BetaResource$Stable}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p46 = _p39._0._0;
					if (_p46.ctor === 'BadStatus') {
						return _elm_lang$core$Native_Utils.eq(_p46._0.status.code, 401) ? {
							ctor: '_Tuple2',
							_0: model,
							_1: _concourse$atc$LoginRedirect$requestLoginRedirect('')
						} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						var _p47 = _krisajenkins$remotedata$RemoteData$toMaybe(model.resource);
						if (_p47.ctor === 'Nothing') {
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
						} else {
							var _p48 = _p47._0;
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{
										pausedChanging: _concourse$atc$BetaResource$Errored,
										resource: _krisajenkins$remotedata$RemoteData$Success(
											_elm_lang$core$Native_Utils.update(
												_p48,
												{paused: !_p48.paused}))
									}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						}
					}
				}
			case 'VersionedResourcesFetched':
				if (_p39._1.ctor === 'Ok') {
					var _p52 = _p39._0;
					var _p51 = _p39._1._0;
					var newModel = function (newPage) {
						return _elm_lang$core$Native_Utils.update(
							model,
							{versionedResources: _p51, currentPage: newPage});
					};
					var fetchedPage = _concourse$atc$BetaResource$permalink(_p51.content);
					var chosenModelWith = function (requestedPageUnwrapped) {
						var _p49 = model.currentPage;
						if (_p49.ctor === 'Nothing') {
							return newModel(
								_elm_lang$core$Maybe$Just(fetchedPage));
						} else {
							return A2(_concourse$atc$Concourse_Pagination$equal, _p49._0, requestedPageUnwrapped) ? newModel(_p52) : model;
						}
					};
					var _p50 = _p52;
					if (_p50.ctor === 'Nothing') {
						return {
							ctor: '_Tuple2',
							_0: newModel(
								_elm_lang$core$Maybe$Just(fetchedPage)),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: chosenModelWith(_p50._0),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				} else {
					return A3(
						_elm_lang$core$Basics$flip,
						_elm_lang$core$Basics$always,
						A2(_elm_lang$core$Debug$log, 'failed to fetch versioned resources', _p39._1._0),
						{ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none});
				}
			case 'LoadPage':
				var _p53 = _p39._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							currentPage: _elm_lang$core$Maybe$Just(_p53)
						}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: A2(
								_concourse$atc$BetaResource$fetchVersionedResources,
								model.resourceIdentifier,
								_elm_lang$core$Maybe$Just(_p53)),
							_1: {
								ctor: '::',
								_0: _elm_lang$navigation$Navigation$newUrl(
									A2(_concourse$atc$BetaResource$paginationRoute, model.resourceIdentifier, _p53)),
								_1: {ctor: '[]'}
							}
						})
				};
			case 'ToggleVersionedResource':
				var _p55 = _p39._0;
				var versionedResource = _elm_lang$core$List$head(
					A2(
						_elm_lang$core$List$filter,
						_concourse$atc$BetaResource$checkForVersionID(_p55),
						model.versionedResources.content));
				var versionedResourceIdentifier = A2(_concourse$atc$BetaResource$versionIdentifier, model, _p55);
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: function () {
						var _p54 = versionedResource;
						if (_p54.ctor === 'Just') {
							return _p54._0.enabled ? A2(_concourse$atc$BetaResource$disableVersionedResource, versionedResourceIdentifier, model.csrfToken) : A2(_concourse$atc$BetaResource$enableVersionedResource, versionedResourceIdentifier, model.csrfToken);
						} else {
							return _elm_lang$core$Platform_Cmd$none;
						}
					}()
				};
			case 'VersionedResourceToggled':
				if (_p39._1.ctor === 'Ok') {
					var _p56 = _p39._0;
					var oldContent = model.versionedResources.content;
					var oldVRs = model.versionedResources;
					var oldState = A2(_concourse$atc$BetaResource$getState, _p56, model.versionedUIStates);
					var newState = _elm_lang$core$Native_Utils.update(
						oldState,
						{changingErrored: false});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								versionedResources: _elm_lang$core$Native_Utils.update(
									oldVRs,
									{
										content: A2(_concourse$atc$BetaResource$updateMatchingMember, _p56, oldContent)
									}),
								versionedUIStates: A3(_concourse$atc$BetaResource$setState, _p56, newState, model.versionedUIStates)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p58 = _p39._0;
					var _p57 = _p39._1._0;
					if (_p57.ctor === 'BadStatus') {
						return _elm_lang$core$Native_Utils.eq(_p57._0.status.code, 401) ? {
							ctor: '_Tuple2',
							_0: model,
							_1: _concourse$atc$LoginRedirect$requestLoginRedirect('')
						} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						var oldState = A2(_concourse$atc$BetaResource$getState, _p58, model.versionedUIStates);
						var newState = _elm_lang$core$Native_Utils.update(
							oldState,
							{expanded: !oldState.expanded, changingErrored: true});
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									versionedUIStates: A3(_concourse$atc$BetaResource$setState, _p58, newState, model.versionedUIStates)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				}
			case 'ExpandVersionedResource':
				var _p59 = _p39._0;
				var oldState = A2(_concourse$atc$BetaResource$getState, _p59, model.versionedUIStates);
				var newState = _elm_lang$core$Native_Utils.update(
					oldState,
					{expanded: !oldState.expanded});
				var versionedResourceIdentifier = A2(_concourse$atc$BetaResource$versionIdentifier, model, _p59);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							versionedUIStates: A3(_concourse$atc$BetaResource$setState, _p59, newState, model.versionedUIStates)
						}),
					_1: newState.expanded ? _concourse$atc$BetaResource$fetchCausality(versionedResourceIdentifier) : _elm_lang$core$Platform_Cmd$none
				};
			case 'CausalityFetched':
				var _p63 = _p39._1;
				var fetchCausalityDependents = F2(
					function (cause, _p60) {
						var _p61 = _p60;
						return A2(
							_concourse$atc$BetaResource$conditionallyFetchBuild,
							cause.buildID,
							A2(
								_concourse$atc$BetaResource$conditionallyFetchVersion,
								cause.versionedResourceID,
								{ctor: '_Tuple2', _0: _p61._0, _1: _p61._1}));
					});
				var withCausality = _elm_lang$core$Native_Utils.update(
					model,
					{
						causality: A3(_elm_lang$core$Dict$insert, _p39._0, _p63, model.causality)
					});
				var _p62 = _p63;
				if (_p62.ctor === 'Success') {
					return A3(
						_elm_lang$core$List$foldl,
						fetchCausalityDependents,
						{ctor: '_Tuple2', _0: withCausality, _1: _elm_lang$core$Platform_Cmd$none},
						_p62._0);
				} else {
					return {ctor: '_Tuple2', _0: withCausality, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'BuildFetched':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							causalityBuilds: A3(_elm_lang$core$Dict$insert, _p39._0, _p39._1, model.causalityBuilds)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'VersionedResourceFetched':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							causalityVersions: A3(_elm_lang$core$Dict$insert, _p39._0, _p39._1, model.causalityVersions)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'BetaPipelineMsg':
				var _p64 = A2(_concourse$atc$BetaPipeline$update, _p39._0, model.betaPipelineModel);
				var betaPipelineModel = _p64._0;
				var betaPipelineCmd = _p64._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{betaPipelineModel: betaPipelineModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _concourse$atc$BetaResource$BetaPipelineMsg, betaPipelineCmd)
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _elm_lang$navigation$Navigation$newUrl(_p39._0)
				};
		}
	});
var _concourse$atc$BetaResource$updateWithMessage = F2(
	function (message, model) {
		var _p65 = A2(_concourse$atc$BetaResource$update, message, model);
		var mdl = _p65._0;
		var msg = _p65._1;
		var _p66 = mdl.resource;
		if (_p66.ctor === 'Failure') {
			return {
				ctor: '_Tuple3',
				_0: mdl,
				_1: msg,
				_2: _elm_lang$core$Maybe$Just(_concourse$atc$UpdateMsg$NotFound)
			};
		} else {
			return {ctor: '_Tuple3', _0: mdl, _1: msg, _2: _elm_lang$core$Maybe$Nothing};
		}
	});
var _concourse$atc$BetaResource$AutoupdateTimerTicked = function (a) {
	return {ctor: 'AutoupdateTimerTicked', _0: a};
};
var _concourse$atc$BetaResource$subscriptions = function (model) {
	return A2(_elm_lang$core$Time$every, 5 * _elm_lang$core$Time$second, _concourse$atc$BetaResource$AutoupdateTimerTicked);
};
var _concourse$atc$BetaResource$Noop = {ctor: 'Noop'};
var _concourse$atc$BetaResource$view = function (model) {
	var _p67 = _krisajenkins$remotedata$RemoteData$toMaybe(model.resource);
	if (_p67.ctor === 'Just') {
		var _p75 = _p67._0;
		var _p68 = function () {
			var _p69 = model.versionedResources.pagination.nextPage;
			if (_p69.ctor === 'Nothing') {
				return {ctor: '_Tuple2', _0: 'btn-page-link disabled', _1: _concourse$atc$BetaResource$Noop};
			} else {
				var updatedPage = _elm_lang$core$Native_Utils.update(
					_p69._0,
					{limit: 100});
				return {
					ctor: '_Tuple2',
					_0: 'btn-page-link',
					_1: _concourse$atc$BetaResource$LoadPage(updatedPage)
				};
			}
		}();
		var nextButtonClass = _p68._0;
		var nextButtonEvent = _p68._1;
		var _p70 = function () {
			var _p71 = model.versionedResources.pagination.previousPage;
			if (_p71.ctor === 'Nothing') {
				return {ctor: '_Tuple2', _0: 'btn-page-link disabled', _1: _concourse$atc$BetaResource$Noop};
			} else {
				return {
					ctor: '_Tuple2',
					_0: 'btn-page-link',
					_1: _concourse$atc$BetaResource$LoadPage(_p71._0)
				};
			}
		}();
		var previousButtonClass = _p70._0;
		var previousButtonEvent = _p70._1;
		var _p72 = function () {
			var _p73 = {ctor: '_Tuple2', _0: _p75.paused, _1: model.pausedChanging};
			switch (_p73._1.ctor) {
				case 'Changing':
					return {ctor: '_Tuple4', _0: 'loading', _1: 'fa-spin fa-circle-o-notch', _2: '', _3: _concourse$atc$BetaResource$Noop};
				case 'Errored':
					if (_p73._0 === true) {
						return {ctor: '_Tuple4', _0: 'errored', _1: 'fa-play', _2: 'Resume Resource Checking', _3: _concourse$atc$BetaResource$TogglePaused};
					} else {
						return {ctor: '_Tuple4', _0: 'errored', _1: 'fa-pause', _2: 'Pause Resource Checking', _3: _concourse$atc$BetaResource$TogglePaused};
					}
				default:
					if (_p73._0 === true) {
						return {ctor: '_Tuple4', _0: 'enabled', _1: 'fa-play', _2: 'Resume Resource Checking', _3: _concourse$atc$BetaResource$TogglePaused};
					} else {
						return {ctor: '_Tuple4', _0: 'disabled', _1: 'fa-pause', _2: 'Pause Resource Checking', _3: _concourse$atc$BetaResource$TogglePaused};
					}
			}
		}();
		var paused = _p72._0;
		var pausedIcon = _p72._1;
		var aria = _p72._2;
		var onClickEvent = _p72._3;
		var _p74 = _p75.failingToCheck ? {
			ctor: '_Tuple3',
			_0: 'fr errored fa fa-fw fa-exclamation-triangle',
			_1: 'checking failed',
			_2: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('step-body'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$pre,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(_p75.checkError),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		} : {
			ctor: '_Tuple3',
			_0: 'fr succeeded fa fa-fw fa-check',
			_1: 'checking successfully',
			_2: {ctor: '[]'}
		};
		var checkStatus = _p74._0;
		var checkMessage = _p74._1;
		var stepBody = _p74._2;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('with-fixed-header'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('fixed-header'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('pagination-header'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('pagination fr'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class(previousButtonClass),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(previousButtonEvent),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$a,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('arrow'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$i,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('fa fa-arrow-left'),
																_1: {ctor: '[]'}
															},
															{ctor: '[]'}),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class(nextButtonClass),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(nextButtonEvent),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$a,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('arrow'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$i,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('fa fa-arrow-right'),
																	_1: {ctor: '[]'}
																},
																{ctor: '[]'}),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$h1,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(_p75.name),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('scrollable-body'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('resource-check-status'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('build-step'),
											_1: {ctor: '[]'}
										},
										A2(
											_elm_lang$core$List$append,
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('header'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$span,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class(
																	A2(_elm_lang$core$Basics_ops['++'], 'btn-pause fl ', paused)),
																_1: {
																	ctor: '::',
																	_0: _fapian$elm_html_aria$Html_Attributes_Aria$ariaLabel(aria),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onClick(onClickEvent),
																		_1: {ctor: '[]'}
																	}
																}
															},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$i,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$class(
																			A2(_elm_lang$core$Basics_ops['++'], 'fa fa-fw ', pausedIcon)),
																		_1: {ctor: '[]'}
																	},
																	{ctor: '[]'}),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$h3,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(checkMessage),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$i,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$class(checkStatus),
																		_1: {ctor: '[]'}
																	},
																	{ctor: '[]'}),
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											stepBody)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A3(_concourse$atc$BetaResource$viewVersionedResources, model, model.versionedResources.content, model.versionedUIStates),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	} else {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '[]'});
	}
};

var _concourse$atc$Concourse_Team$fetchTeams = _elm_lang$http$Http$toTask(
	A2(
		_elm_lang$http$Http$get,
		'/api/v1/teams',
		_elm_lang$core$Json_Decode$list(_concourse$atc$Concourse$decodeTeam)));

var _concourse$atc$BetaTeamSelection$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _concourse$atc$BetaTeamSelection$teamNameStartsWithSensitive = F2(
	function (substring, team) {
		return A2(_elm_lang$core$String$startsWith, substring, team.name);
	});
var _concourse$atc$BetaTeamSelection$teamNameStartsWith = F2(
	function (substring, team) {
		return A2(
			_elm_lang$core$String$startsWith,
			substring,
			_elm_lang$core$String$toLower(team.name));
	});
var _concourse$atc$BetaTeamSelection$teamNameContains = F2(
	function (substring, team) {
		return A2(
			_elm_lang$core$String$contains,
			substring,
			_elm_lang$core$String$toLower(team.name));
	});
var _concourse$atc$BetaTeamSelection$filterTeams = F2(
	function (teamFilter, teams) {
		var filteredList = A2(
			_elm_lang$core$List$filter,
			_concourse$atc$BetaTeamSelection$teamNameContains(
				_elm_lang$core$String$toLower(teamFilter)),
			teams);
		var _p0 = A2(
			_elm_lang$core$List$partition,
			_concourse$atc$BetaTeamSelection$teamNameStartsWith(
				_elm_lang$core$String$toLower(teamFilter)),
			filteredList);
		var startingTeams = _p0._0;
		var notStartingTeams = _p0._1;
		var _p1 = A2(
			_elm_lang$core$List$partition,
			_concourse$atc$BetaTeamSelection$teamNameStartsWithSensitive(teamFilter),
			startingTeams);
		var caseSensitive = _p1._0;
		var notCaseSensitive = _p1._1;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			caseSensitive,
			A2(_elm_lang$core$Basics_ops['++'], notCaseSensitive, notStartingTeams));
	});
var _concourse$atc$BetaTeamSelection$viewLoading = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('loading'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$i,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('fa fa-fw fa-spin fa-circle-o-notch'),
				_1: {ctor: '[]'}
			},
			{ctor: '[]'}),
		_1: {ctor: '[]'}
	});
var _concourse$atc$BetaTeamSelection$indexPageUrl = '/';
var _concourse$atc$BetaTeamSelection$routeMaybeRedirect = F2(
	function (redirect, route) {
		if (!_elm_lang$core$Native_Utils.eq(redirect, '')) {
			var parsedRoute = _sporto$erl$Erl$parse(route);
			var newParsedRoute = A3(_sporto$erl$Erl$addQuery, 'redirect', redirect, parsedRoute);
			return _sporto$erl$Erl$toString(newParsedRoute);
		} else {
			return route;
		}
	});
var _concourse$atc$BetaTeamSelection$loginRoute = F2(
	function (redirect, teamName) {
		return A2(
			_concourse$atc$BetaTeamSelection$routeMaybeRedirect,
			redirect,
			_concourse$atc$Format$prependBeta(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'/teams/',
					A2(_elm_lang$core$Basics_ops['++'], teamName, '/login'))));
	});
var _concourse$atc$BetaTeamSelection$update = F2(
	function (action, model) {
		var _p2 = action;
		switch (_p2.ctor) {
			case 'Noop':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'FilterTeams':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{teamFilter: _p2._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'TeamsFetched':
				if (_p2._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								teams: _elm_lang$core$Maybe$Just(_p2._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return A3(
						_elm_lang$core$Basics$flip,
						_elm_lang$core$Basics$always,
						A2(_elm_lang$core$Debug$log, 'failed to fetch teams', _p2._0._0),
						{ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none});
				}
			default:
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _elm_lang$navigation$Navigation$newUrl(
						A2(_concourse$atc$BetaTeamSelection$loginRoute, model.redirect, _p2._0))
				};
		}
	});
var _concourse$atc$BetaTeamSelection$Ports = function (a) {
	return {title: a};
};
var _concourse$atc$BetaTeamSelection$Model = F3(
	function (a, b, c) {
		return {teamFilter: a, teams: b, redirect: c};
	});
var _concourse$atc$BetaTeamSelection$SelectTeam = function (a) {
	return {ctor: 'SelectTeam', _0: a};
};
var _concourse$atc$BetaTeamSelection$viewTeam = F2(
	function (redirect, team) {
		return A2(
			_elm_lang$html$Html$a,
			{
				ctor: '::',
				_0: _concourse$atc$StrictEvents$onLeftClick(
					_concourse$atc$BetaTeamSelection$SelectTeam(team.name)),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$href(
						A2(_concourse$atc$BetaTeamSelection$loginRoute, redirect, team.name)),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(team.name),
				_1: {ctor: '[]'}
			});
	});
var _concourse$atc$BetaTeamSelection$TeamsFetched = function (a) {
	return {ctor: 'TeamsFetched', _0: a};
};
var _concourse$atc$BetaTeamSelection$init = F2(
	function (ports, redirect) {
		return {
			ctor: '_Tuple2',
			_0: {teamFilter: '', teams: _elm_lang$core$Maybe$Nothing, redirect: redirect},
			_1: _elm_lang$core$Platform_Cmd$batch(
				{
					ctor: '::',
					_0: A2(_elm_lang$core$Task$attempt, _concourse$atc$BetaTeamSelection$TeamsFetched, _concourse$atc$Concourse_Team$fetchTeams),
					_1: {
						ctor: '::',
						_0: ports.title('Login - '),
						_1: {ctor: '[]'}
					}
				})
		};
	});
var _concourse$atc$BetaTeamSelection$FilterTeams = function (a) {
	return {ctor: 'FilterTeams', _0: a};
};
var _concourse$atc$BetaTeamSelection$Noop = {ctor: 'Noop'};
var _concourse$atc$BetaTeamSelection$view = function (model) {
	var filteredTeams = A2(
		_concourse$atc$BetaTeamSelection$filterTeams,
		model.teamFilter,
		A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			model.teams));
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('login-page'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('small-title'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('select a team to login'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('login-box team-selection'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$form,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onSubmit(
									function () {
										var _p3 = {
											ctor: '_Tuple2',
											_0: _elm_lang$core$List$head(filteredTeams),
											_1: model.teamFilter
										};
										if (_p3._0.ctor === 'Nothing') {
											return _concourse$atc$BetaTeamSelection$Noop;
										} else {
											if (_p3._1 === '') {
												return _concourse$atc$BetaTeamSelection$Noop;
											} else {
												return _concourse$atc$BetaTeamSelection$SelectTeam(_p3._0._0.name);
											}
										}
									}()),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('filter-form input-holder'),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$i,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('fa fa-fw fa-search search-icon'),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$input,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('search-input'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$placeholder('filter teams'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$autofocus(true),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$required(true),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onInput(_concourse$atc$BetaTeamSelection$FilterTeams),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$button,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('clear-button'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$type_('reset'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$tabindex(-1),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onClick(
																_concourse$atc$BetaTeamSelection$FilterTeams('')),
															_1: {ctor: '[]'}
														}
													}
												}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$i,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('fa fa-fw fa-times-circle'),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: function () {
								var _p4 = model.teams;
								if (_p4.ctor === 'Nothing') {
									return _concourse$atc$BetaTeamSelection$viewLoading;
								} else {
									return A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('teams-list'),
											_1: {ctor: '[]'}
										},
										A2(
											_elm_lang$core$List$map,
											_concourse$atc$BetaTeamSelection$viewTeam(model.redirect),
											filteredTeams));
								}
							}(),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};

var _concourse$atc$BetaSubPage$queryGroupsForRoute = function (route) {
	return A2(_Bogdanp$elm_querystring$QueryString$all, 'groups', route.queries);
};
var _concourse$atc$BetaSubPage$superDupleWrap = F2(
	function (_p1, _p0) {
		var _p2 = _p1;
		var _p3 = _p0;
		return {
			ctor: '_Tuple2',
			_0: _p2._0(_p3._0),
			_1: A2(_elm_lang$core$Platform_Cmd$map, _p2._1, _p3._1)
		};
	});
var _concourse$atc$BetaSubPage$renderPipeline = _elm_lang$core$Native_Platform.outgoingPort(
	'renderPipeline',
	function (v) {
		return [v._0, v._1];
	});
var _concourse$atc$BetaSubPage$setTitle = _elm_lang$core$Native_Platform.outgoingPort(
	'setTitle',
	function (v) {
		return v;
	});
var _concourse$atc$BetaSubPage$BetaSelectTeamModel = function (a) {
	return {ctor: 'BetaSelectTeamModel', _0: a};
};
var _concourse$atc$BetaSubPage$BetaResourceModel = function (a) {
	return {ctor: 'BetaResourceModel', _0: a};
};
var _concourse$atc$BetaSubPage$BetaPipelineModel = function (a) {
	return {ctor: 'BetaPipelineModel', _0: a};
};
var _concourse$atc$BetaSubPage$BetaLoginModel = function (a) {
	return {ctor: 'BetaLoginModel', _0: a};
};
var _concourse$atc$BetaSubPage$BetaJobModel = function (a) {
	return {ctor: 'BetaJobModel', _0: a};
};
var _concourse$atc$BetaSubPage$BetaBuildModel = function (a) {
	return {ctor: 'BetaBuildModel', _0: a};
};
var _concourse$atc$BetaSubPage$DashboardModel = function (a) {
	return {ctor: 'DashboardModel', _0: a};
};
var _concourse$atc$BetaSubPage$NotFoundModel = function (a) {
	return {ctor: 'NotFoundModel', _0: a};
};
var _concourse$atc$BetaSubPage$handleNotFound = F3(
	function (notFound, _p5, _p4) {
		var _p6 = _p5;
		var _p7 = _p4;
		var _p8 = _p7._2;
		if (_p8.ctor === 'Just') {
			return {
				ctor: '_Tuple2',
				_0: _concourse$atc$BetaSubPage$NotFoundModel(
					{notFoundImgSrc: notFound}),
				_1: _concourse$atc$BetaSubPage$setTitle('Not Found ')
			};
		} else {
			return A2(
				_concourse$atc$BetaSubPage$superDupleWrap,
				{ctor: '_Tuple2', _0: _p6._0, _1: _p6._1},
				{ctor: '_Tuple2', _0: _p7._0, _1: _p7._1});
		}
	});
var _concourse$atc$BetaSubPage$NoPipelineModel = {ctor: 'NoPipelineModel'};
var _concourse$atc$BetaSubPage$WaitingModel = function (a) {
	return {ctor: 'WaitingModel', _0: a};
};
var _concourse$atc$BetaSubPage$NewCSRFToken = function (a) {
	return {ctor: 'NewCSRFToken', _0: a};
};
var _concourse$atc$BetaSubPage$BetaSelectTeamMsg = function (a) {
	return {ctor: 'BetaSelectTeamMsg', _0: a};
};
var _concourse$atc$BetaSubPage$BetaResourceMsg = function (a) {
	return {ctor: 'BetaResourceMsg', _0: a};
};
var _concourse$atc$BetaSubPage$BetaPipelineMsg = function (a) {
	return {ctor: 'BetaPipelineMsg', _0: a};
};
var _concourse$atc$BetaSubPage$BetaLoginMsg = function (a) {
	return {ctor: 'BetaLoginMsg', _0: a};
};
var _concourse$atc$BetaSubPage$BetaJobMsg = function (a) {
	return {ctor: 'BetaJobMsg', _0: a};
};
var _concourse$atc$BetaSubPage$BetaBuildMsg = function (a) {
	return {ctor: 'BetaBuildMsg', _0: a};
};
var _concourse$atc$BetaSubPage$urlUpdate = F2(
	function (route, model) {
		var _p9 = {ctor: '_Tuple2', _0: route.logical, _1: model};
		_v5_3:
		do {
			if (_p9.ctor === '_Tuple2') {
				switch (_p9._0.ctor) {
					case 'BetaBuild':
						if (_p9._1.ctor === 'BetaBuildModel') {
							var _p11 = _p9._1._0;
							var _p10 = A2(
								_concourse$atc$BetaBuild$changeToBuild,
								_concourse$atc$BetaBuild$JobBuildPage(
									{teamName: _p9._0._0, pipelineName: _p9._0._1, jobName: _p9._0._2, buildName: _p9._0._3}),
								_p11.subModel);
							var submodel = _p10._0;
							var subcmd = _p10._1;
							return {
								ctor: '_Tuple2',
								_0: _concourse$atc$BetaSubPage$BetaBuildModel(
									_elm_lang$core$Native_Utils.update(
										_p11,
										{subModel: submodel})),
								_1: A2(
									_elm_lang$core$Platform_Cmd$map,
									_concourse$atc$BetaSubPage$BetaBuildMsg,
									A2(_elm_lang$core$Platform_Cmd$map, _concourse$atc$Autoscroll$SubMsg, subcmd))
							};
						} else {
							break _v5_3;
						}
					case 'BetaJob':
						if (_p9._1.ctor === 'BetaJobModel') {
							var _p12 = _p9._1._0;
							return A2(
								_concourse$atc$BetaSubPage$superDupleWrap,
								{ctor: '_Tuple2', _0: _concourse$atc$BetaSubPage$BetaJobModel, _1: _concourse$atc$BetaSubPage$BetaJobMsg},
								A2(
									_concourse$atc$BetaJob$changeToJob,
									{teamName: _p9._0._0, pipelineName: _p9._0._1, jobName: _p9._0._2, paging: route.page, csrfToken: _p12.csrfToken},
									_p12));
						} else {
							break _v5_3;
						}
					case 'BetaPipeline':
						if (_p9._1.ctor === 'BetaPipelineModel') {
							var _p13 = _p9._1._0;
							return A2(
								_concourse$atc$BetaSubPage$superDupleWrap,
								{ctor: '_Tuple2', _0: _concourse$atc$BetaSubPage$BetaPipelineModel, _1: _concourse$atc$BetaSubPage$BetaPipelineMsg},
								A2(
									_concourse$atc$BetaPipeline$changeToPipelineAndGroups,
									{teamName: _p9._0._0, pipelineName: _p9._0._1, turbulenceImgSrc: _p13.turbulenceImgSrc, route: route},
									_p13));
						} else {
							break _v5_3;
						}
					default:
						break _v5_3;
				}
			} else {
				break _v5_3;
			}
		} while(false);
		return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
	});
var _concourse$atc$BetaSubPage$DashboardMsg = function (a) {
	return {ctor: 'DashboardMsg', _0: a};
};
var _concourse$atc$BetaSubPage$NoPipelineMsg = function (a) {
	return {ctor: 'NoPipelineMsg', _0: a};
};
var _concourse$atc$BetaSubPage$view = function (mdl) {
	var _p14 = mdl;
	switch (_p14.ctor) {
		case 'WaitingModel':
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{ctor: '[]'});
		case 'NoPipelineModel':
			return A2(_elm_lang$html$Html$map, _concourse$atc$BetaSubPage$NoPipelineMsg, _concourse$atc$NoPipeline$view);
		case 'NotFoundModel':
			return _concourse$atc$NotFound$view(_p14._0);
		case 'DashboardModel':
			return A2(
				_elm_lang$html$Html$map,
				_concourse$atc$BetaSubPage$DashboardMsg,
				_concourse$atc$Dashboard$view(_p14._0));
		case 'BetaBuildModel':
			return A2(
				_elm_lang$html$Html$map,
				_concourse$atc$BetaSubPage$BetaBuildMsg,
				A2(_concourse$atc$Autoscroll$view, _concourse$atc$BetaBuild$view, _p14._0));
		case 'BetaJobModel':
			return A2(
				_elm_lang$html$Html$map,
				_concourse$atc$BetaSubPage$BetaJobMsg,
				_concourse$atc$BetaJob$view(_p14._0));
		case 'BetaLoginModel':
			return A2(
				_elm_lang$html$Html$map,
				_concourse$atc$BetaSubPage$BetaLoginMsg,
				_concourse$atc$BetaLogin$view(_p14._0));
		case 'BetaPipelineModel':
			return A2(
				_elm_lang$html$Html$map,
				_concourse$atc$BetaSubPage$BetaPipelineMsg,
				_concourse$atc$BetaPipeline$view(_p14._0));
		case 'BetaResourceModel':
			return A2(
				_elm_lang$html$Html$map,
				_concourse$atc$BetaSubPage$BetaResourceMsg,
				_concourse$atc$BetaResource$view(_p14._0));
		default:
			return A2(
				_elm_lang$html$Html$map,
				_concourse$atc$BetaSubPage$BetaSelectTeamMsg,
				_concourse$atc$BetaTeamSelection$view(_p14._0));
	}
};
var _concourse$atc$BetaSubPage$subscriptions = function (mdl) {
	var _p15 = mdl;
	switch (_p15.ctor) {
		case 'NoPipelineModel':
			return A2(_elm_lang$core$Platform_Sub$map, _concourse$atc$BetaSubPage$NoPipelineMsg, _concourse$atc$NoPipeline$subscriptions);
		case 'WaitingModel':
			return _elm_lang$core$Platform_Sub$none;
		case 'NotFoundModel':
			return _elm_lang$core$Platform_Sub$none;
		case 'DashboardModel':
			return A2(
				_elm_lang$core$Platform_Sub$map,
				_concourse$atc$BetaSubPage$DashboardMsg,
				_concourse$atc$Dashboard$subscriptions(_p15._0));
		case 'BetaBuildModel':
			return A2(
				_elm_lang$core$Platform_Sub$map,
				_concourse$atc$BetaSubPage$BetaBuildMsg,
				A2(_concourse$atc$Autoscroll$subscriptions, _concourse$atc$BetaBuild$subscriptions, _p15._0));
		case 'BetaJobModel':
			return A2(
				_elm_lang$core$Platform_Sub$map,
				_concourse$atc$BetaSubPage$BetaJobMsg,
				_concourse$atc$BetaJob$subscriptions(_p15._0));
		case 'BetaLoginModel':
			return A2(
				_elm_lang$core$Platform_Sub$map,
				_concourse$atc$BetaSubPage$BetaLoginMsg,
				_concourse$atc$BetaLogin$subscriptions(_p15._0));
		case 'BetaPipelineModel':
			return A2(
				_elm_lang$core$Platform_Sub$map,
				_concourse$atc$BetaSubPage$BetaPipelineMsg,
				_concourse$atc$BetaPipeline$subscriptions(_p15._0));
		case 'BetaResourceModel':
			return A2(
				_elm_lang$core$Platform_Sub$map,
				_concourse$atc$BetaSubPage$BetaResourceMsg,
				_concourse$atc$BetaResource$subscriptions(_p15._0));
		default:
			return A2(
				_elm_lang$core$Platform_Sub$map,
				_concourse$atc$BetaSubPage$BetaSelectTeamMsg,
				_concourse$atc$BetaTeamSelection$subscriptions(_p15._0));
	}
};
var _concourse$atc$BetaSubPage$DefaultPipelineFetched = function (a) {
	return {ctor: 'DefaultPipelineFetched', _0: a};
};
var _concourse$atc$BetaSubPage$DashboardPipelinesFetched = function (a) {
	return {ctor: 'DashboardPipelinesFetched', _0: a};
};
var _concourse$atc$BetaSubPage$PipelinesFetched = function (a) {
	return {ctor: 'PipelinesFetched', _0: a};
};
var _concourse$atc$BetaSubPage$fetchPipelines = A2(_elm_lang$core$Task$attempt, _concourse$atc$BetaSubPage$PipelinesFetched, _concourse$atc$Concourse_Pipeline$fetchPipelines);
var _concourse$atc$BetaSubPage$init = F2(
	function (turbulencePath, route) {
		var _p16 = route.logical;
		switch (_p16.ctor) {
			case 'Dashboard':
				return A2(
					_concourse$atc$BetaSubPage$superDupleWrap,
					{ctor: '_Tuple2', _0: _concourse$atc$BetaSubPage$DashboardModel, _1: _concourse$atc$BetaSubPage$DashboardMsg},
					_concourse$atc$Dashboard$init(turbulencePath));
			case 'BetaBuild':
				return A2(
					_concourse$atc$BetaSubPage$superDupleWrap,
					{ctor: '_Tuple2', _0: _concourse$atc$BetaSubPage$BetaBuildModel, _1: _concourse$atc$BetaSubPage$BetaBuildMsg},
					function (_p17) {
						return A2(
							_concourse$atc$Autoscroll$init,
							_concourse$atc$BetaBuild$getScrollBehavior,
							A3(
								_concourse$atc$BetaBuild$init,
								{title: _concourse$atc$BetaSubPage$setTitle},
								{csrfToken: '', hash: route.hash},
								_p17));
					}(
						_concourse$atc$BetaBuild$JobBuildPage(
							{teamName: _p16._0, pipelineName: _p16._1, jobName: _p16._2, buildName: _p16._3})));
			case 'BetaJob':
				return A2(
					_concourse$atc$BetaSubPage$superDupleWrap,
					{ctor: '_Tuple2', _0: _concourse$atc$BetaSubPage$BetaJobModel, _1: _concourse$atc$BetaSubPage$BetaJobMsg},
					A2(
						_concourse$atc$BetaJob$init,
						{title: _concourse$atc$BetaSubPage$setTitle},
						{jobName: _p16._2, teamName: _p16._0, pipelineName: _p16._1, paging: route.page, csrfToken: ''}));
			case 'BetaOneOffBuild':
				return A2(
					_concourse$atc$BetaSubPage$superDupleWrap,
					{ctor: '_Tuple2', _0: _concourse$atc$BetaSubPage$BetaBuildModel, _1: _concourse$atc$BetaSubPage$BetaBuildMsg},
					function (_p18) {
						return A2(
							_concourse$atc$Autoscroll$init,
							_concourse$atc$BetaBuild$getScrollBehavior,
							A3(
								_concourse$atc$BetaBuild$init,
								{title: _concourse$atc$BetaSubPage$setTitle},
								{csrfToken: '', hash: route.hash},
								_p18));
					}(
						_concourse$atc$BetaBuild$BuildPage(
							A2(
								_elm_lang$core$Result$withDefault,
								0,
								_elm_lang$core$String$toInt(_p16._0)))));
			case 'BetaPipeline':
				return A2(
					_concourse$atc$BetaSubPage$superDupleWrap,
					{ctor: '_Tuple2', _0: _concourse$atc$BetaSubPage$BetaPipelineModel, _1: _concourse$atc$BetaSubPage$BetaPipelineMsg},
					A2(
						_concourse$atc$BetaPipeline$init,
						{title: _concourse$atc$BetaSubPage$setTitle},
						{teamName: _p16._0, pipelineName: _p16._1, turbulenceImgSrc: turbulencePath, route: route}));
			case 'BetaResource':
				return A2(
					_concourse$atc$BetaSubPage$superDupleWrap,
					{ctor: '_Tuple2', _0: _concourse$atc$BetaSubPage$BetaResourceModel, _1: _concourse$atc$BetaSubPage$BetaResourceMsg},
					A2(
						_concourse$atc$BetaResource$init,
						{title: _concourse$atc$BetaSubPage$setTitle},
						{resourceName: _p16._2, teamName: _p16._0, pipelineName: _p16._1, paging: route.page, csrfToken: ''}));
			case 'BetaSelectTeam':
				var redirect = A2(
					_elm_lang$core$Maybe$withDefault,
					'',
					A3(_Bogdanp$elm_querystring$QueryString$one, _Bogdanp$elm_querystring$QueryString$string, 'redirect', route.queries));
				return A2(
					_concourse$atc$BetaSubPage$superDupleWrap,
					{ctor: '_Tuple2', _0: _concourse$atc$BetaSubPage$BetaSelectTeamModel, _1: _concourse$atc$BetaSubPage$BetaSelectTeamMsg},
					A2(
						_concourse$atc$BetaTeamSelection$init,
						{title: _concourse$atc$BetaSubPage$setTitle},
						redirect));
			case 'BetaTeamLogin':
				return A2(
					_concourse$atc$BetaSubPage$superDupleWrap,
					{ctor: '_Tuple2', _0: _concourse$atc$BetaSubPage$BetaLoginModel, _1: _concourse$atc$BetaSubPage$BetaLoginMsg},
					A3(
						_concourse$atc$BetaLogin$init,
						{title: _concourse$atc$BetaSubPage$setTitle},
						_p16._0,
						A3(_Bogdanp$elm_querystring$QueryString$one, _Bogdanp$elm_querystring$QueryString$string, 'redirect', route.queries)));
			default:
				return {
					ctor: '_Tuple2',
					_0: _concourse$atc$BetaSubPage$WaitingModel(route),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: _concourse$atc$BetaSubPage$fetchPipelines,
							_1: {
								ctor: '::',
								_0: _concourse$atc$BetaSubPage$setTitle(''),
								_1: {ctor: '[]'}
							}
						})
				};
		}
	});
var _concourse$atc$BetaSubPage$update = F5(
	function (turbulence, notFound, csrfToken, msg, mdl) {
		var _p19 = {ctor: '_Tuple2', _0: msg, _1: mdl};
		_v9_13:
		do {
			if (_p19.ctor === '_Tuple2') {
				switch (_p19._0.ctor) {
					case 'NoPipelineMsg':
						return {ctor: '_Tuple2', _0: _p19._1, _1: _concourse$atc$BetaSubPage$fetchPipelines};
					case 'BetaResourceMsg':
						if (_p19._1.ctor === 'BetaResourceModel') {
							return A3(
								_concourse$atc$BetaSubPage$handleNotFound,
								notFound,
								{ctor: '_Tuple2', _0: _concourse$atc$BetaSubPage$BetaResourceModel, _1: _concourse$atc$BetaSubPage$BetaResourceMsg},
								A2(
									_concourse$atc$BetaResource$updateWithMessage,
									_p19._0._0,
									_elm_lang$core$Native_Utils.update(
										_p19._1._0,
										{csrfToken: csrfToken})));
						} else {
							break _v9_13;
						}
					case 'DashboardMsg':
						if (_p19._1.ctor === 'DashboardModel') {
							return A2(
								_concourse$atc$BetaSubPage$superDupleWrap,
								{ctor: '_Tuple2', _0: _concourse$atc$BetaSubPage$DashboardModel, _1: _concourse$atc$BetaSubPage$DashboardMsg},
								A2(_concourse$atc$Dashboard$update, _p19._0._0, _p19._1._0));
						} else {
							break _v9_13;
						}
					case 'DefaultPipelineFetched':
						if (_p19._1.ctor === 'WaitingModel') {
							var _p24 = _p19._1._0;
							var _p22 = _p19._0._0;
							if (_p22.ctor === 'Nothing') {
								return {
									ctor: '_Tuple2',
									_0: _concourse$atc$BetaSubPage$NoPipelineModel,
									_1: _concourse$atc$BetaSubPage$setTitle('')
								};
							} else {
								var _p23 = _p22._0;
								var flags = {teamName: _p23.teamName, pipelineName: _p23.name, turbulenceImgSrc: turbulence, route: _p24};
								return A2(
									_elm_lang$core$String$startsWith,
									'/beta',
									_concourse$atc$BetaRoutes$toString(_p24.logical)) ? A2(
									_concourse$atc$BetaSubPage$superDupleWrap,
									{ctor: '_Tuple2', _0: _concourse$atc$BetaSubPage$BetaPipelineModel, _1: _concourse$atc$BetaSubPage$BetaPipelineMsg},
									A2(
										_concourse$atc$BetaPipeline$init,
										{title: _concourse$atc$BetaSubPage$setTitle},
										flags)) : A2(
									_concourse$atc$BetaSubPage$superDupleWrap,
									{ctor: '_Tuple2', _0: _concourse$atc$BetaSubPage$BetaPipelineModel, _1: _concourse$atc$BetaSubPage$BetaPipelineMsg},
									A2(
										_concourse$atc$BetaPipeline$init,
										{title: _concourse$atc$BetaSubPage$setTitle},
										flags));
							}
						} else {
							break _v9_13;
						}
					case 'NewCSRFToken':
						switch (_p19._1.ctor) {
							case 'BetaBuildModel':
								var _p21 = _p19._1._0;
								var buildModel = _p21.subModel;
								var _p20 = A2(
									_concourse$atc$BetaBuild$update,
									_concourse$atc$BetaBuild$NewCSRFToken(_p19._0._0),
									buildModel);
								var newBuildModel = _p20._0;
								var buildCmd = _p20._1;
								return {
									ctor: '_Tuple2',
									_0: _concourse$atc$BetaSubPage$BetaBuildModel(
										_elm_lang$core$Native_Utils.update(
											_p21,
											{subModel: newBuildModel})),
									_1: A2(
										_elm_lang$core$Platform_Cmd$map,
										function (buildMsg) {
											return _concourse$atc$BetaSubPage$BetaBuildMsg(
												_concourse$atc$Autoscroll$SubMsg(buildMsg));
										},
										buildCmd)
								};
							case 'BetaJobModel':
								return {
									ctor: '_Tuple2',
									_0: _concourse$atc$BetaSubPage$BetaJobModel(
										_elm_lang$core$Native_Utils.update(
											_p19._1._0,
											{csrfToken: _p19._0._0})),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							case 'BetaResourceModel':
								return {
									ctor: '_Tuple2',
									_0: _concourse$atc$BetaSubPage$BetaResourceModel(
										_elm_lang$core$Native_Utils.update(
											_p19._1._0,
											{csrfToken: _p19._0._0})),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							default:
								return {ctor: '_Tuple2', _0: mdl, _1: _elm_lang$core$Platform_Cmd$none};
						}
					case 'BetaBuildMsg':
						if (_p19._1.ctor === 'BetaBuildModel') {
							var _p25 = _p19._1._0;
							var subModel = _p25.subModel;
							var model = _elm_lang$core$Native_Utils.update(
								_p25,
								{
									subModel: _elm_lang$core$Native_Utils.update(
										subModel,
										{csrfToken: csrfToken})
								});
							return A3(
								_concourse$atc$BetaSubPage$handleNotFound,
								notFound,
								{ctor: '_Tuple2', _0: _concourse$atc$BetaSubPage$BetaBuildModel, _1: _concourse$atc$BetaSubPage$BetaBuildMsg},
								A3(_concourse$atc$Autoscroll$update, _concourse$atc$BetaBuild$updateWithMessage, _p19._0._0, model));
						} else {
							break _v9_13;
						}
					case 'BetaJobMsg':
						if (_p19._1.ctor === 'BetaJobModel') {
							return A3(
								_concourse$atc$BetaSubPage$handleNotFound,
								notFound,
								{ctor: '_Tuple2', _0: _concourse$atc$BetaSubPage$BetaJobModel, _1: _concourse$atc$BetaSubPage$BetaJobMsg},
								A2(
									_concourse$atc$BetaJob$updateWithMessage,
									_p19._0._0,
									_elm_lang$core$Native_Utils.update(
										_p19._1._0,
										{csrfToken: csrfToken})));
						} else {
							break _v9_13;
						}
					case 'BetaLoginMsg':
						if (_p19._1.ctor === 'BetaLoginModel') {
							var _p26 = A2(_concourse$atc$BetaLogin$update, _p19._0._0, _p19._1._0);
							var mdl = _p26._0;
							var msg = _p26._1;
							return {
								ctor: '_Tuple2',
								_0: _concourse$atc$BetaSubPage$BetaLoginModel(mdl),
								_1: A2(_elm_lang$core$Platform_Cmd$map, _concourse$atc$BetaSubPage$BetaLoginMsg, msg)
							};
						} else {
							break _v9_13;
						}
					case 'BetaPipelineMsg':
						if (_p19._1.ctor === 'BetaPipelineModel') {
							return A2(
								_concourse$atc$BetaSubPage$superDupleWrap,
								{ctor: '_Tuple2', _0: _concourse$atc$BetaSubPage$BetaPipelineModel, _1: _concourse$atc$BetaSubPage$BetaPipelineMsg},
								A2(_concourse$atc$BetaPipeline$update, _p19._0._0, _p19._1._0));
						} else {
							break _v9_13;
						}
					case 'BetaSelectTeamMsg':
						if (_p19._1.ctor === 'BetaSelectTeamModel') {
							return A2(
								_concourse$atc$BetaSubPage$superDupleWrap,
								{ctor: '_Tuple2', _0: _concourse$atc$BetaSubPage$BetaSelectTeamModel, _1: _concourse$atc$BetaSubPage$BetaSelectTeamMsg},
								A2(_concourse$atc$BetaTeamSelection$update, _p19._0._0, _p19._1._0));
						} else {
							break _v9_13;
						}
					default:
						break _v9_13;
				}
			} else {
				break _v9_13;
			}
		} while(false);
		return A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$core$Basics$always,
			A2(_elm_lang$core$Debug$log, 'impossible combination', _p19),
			{ctor: '_Tuple2', _0: mdl, _1: _elm_lang$core$Platform_Cmd$none});
	});

var _concourse$atc$BetaTopBar$isPaused = function (_p0) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		false,
		A2(
			_elm_lang$core$Maybe$map,
			function (_) {
				return _.paused;
			},
			_p0));
};
var _concourse$atc$BetaTopBar$getGroupsForJob = F2(
	function (jobName, pipeline) {
		var _p1 = pipeline;
		if (_p1.ctor === 'Nothing') {
			return {ctor: '[]'};
		} else {
			return A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.name;
				},
				A2(
					_elm_lang$core$List$filter,
					function (_p2) {
						return A2(
							_elm_lang$core$List$member,
							jobName,
							function (_) {
								return _.jobs;
							}(_p2));
					},
					_p1._0.groups));
		}
	});
var _concourse$atc$BetaTopBar$pidToUrl = F2(
	function (pid, _p3) {
		var _p4 = _p3;
		var _p5 = pid;
		if (_p5.ctor === 'Just') {
			return A2(
				_elm_lang$core$String$join,
				'',
				{
					ctor: '::',
					_0: A2(
						_elm_lang$core$String$join,
						'/',
						{
							ctor: '::',
							_0: '/teams',
							_1: {
								ctor: '::',
								_0: _p5._0.teamName,
								_1: {
									ctor: '::',
									_0: 'pipelines',
									_1: {
										ctor: '::',
										_0: _p5._0.pipelineName,
										_1: {ctor: '[]'}
									}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: _Bogdanp$elm_querystring$QueryString$render(_p4.queries),
						_1: {ctor: '[]'}
					}
				});
		} else {
			return '';
		}
	});
var _concourse$atc$BetaTopBar$setGroupsInLocation = F2(
	function (loc, groups) {
		var updatedUrl = _elm_lang$core$List$isEmpty(groups) ? A2(_Bogdanp$elm_querystring$QueryString$remove, 'groups', loc.queries) : A3(
			_elm_lang$core$List$foldr,
			_Bogdanp$elm_querystring$QueryString$add('groups'),
			_Bogdanp$elm_querystring$QueryString$empty,
			groups);
		return _elm_lang$core$Native_Utils.update(
			loc,
			{queries: updatedUrl});
	});
var _concourse$atc$BetaTopBar$getDefaultSelectedGroups = function (pipeline) {
	var _p6 = pipeline;
	if (_p6.ctor === 'Nothing') {
		return {ctor: '[]'};
	} else {
		var _p7 = _elm_lang$core$List$head(_p6._0.groups);
		if (_p7.ctor === 'Nothing') {
			return {ctor: '[]'};
		} else {
			return {
				ctor: '::',
				_0: _p7._0.name,
				_1: {ctor: '[]'}
			};
		}
	}
};
var _concourse$atc$BetaTopBar$toggleGroup = F3(
	function (grp, names, mpipeline) {
		return A2(_elm_lang$core$List$member, grp.name, names) ? A2(
			_elm_lang$core$List$filter,
			F2(
				function (x, y) {
					return !_elm_lang$core$Native_Utils.eq(x, y);
				})(grp.name),
			names) : (_elm_lang$core$List$isEmpty(names) ? {
			ctor: '::',
			_0: grp.name,
			_1: _concourse$atc$BetaTopBar$getDefaultSelectedGroups(mpipeline)
		} : {ctor: '::', _0: grp.name, _1: names});
	});
var _concourse$atc$BetaTopBar$getSelectedOrDefaultGroups = function (model) {
	return _elm_lang$core$List$isEmpty(model.selectedGroups) ? _concourse$atc$BetaTopBar$getDefaultSelectedGroups(model.pipeline) : model.selectedGroups;
};
var _concourse$atc$BetaTopBar$getSelectedGroupsForRoute = function (model) {
	var _p8 = model.route.logical;
	switch (_p8.ctor) {
		case 'BetaBuild':
			return A2(_concourse$atc$BetaTopBar$getGroupsForJob, _p8._2, model.pipeline);
		case 'BetaJob':
			return A2(_concourse$atc$BetaTopBar$getGroupsForJob, _p8._2, model.pipeline);
		default:
			return _concourse$atc$BetaTopBar$getSelectedOrDefaultGroups(model);
	}
};
var _concourse$atc$BetaTopBar$extractPidFromRoute = function (route) {
	var _p9 = route;
	switch (_p9.ctor) {
		case 'BetaBuild':
			return _elm_lang$core$Maybe$Just(
				{teamName: _p9._0, pipelineName: _p9._1});
		case 'BetaJob':
			return _elm_lang$core$Maybe$Just(
				{teamName: _p9._0, pipelineName: _p9._1});
		case 'BetaResource':
			return _elm_lang$core$Maybe$Just(
				{teamName: _p9._0, pipelineName: _p9._1});
		case 'BetaOneOffBuild':
			return _elm_lang$core$Maybe$Nothing;
		case 'BetaPipeline':
			return _elm_lang$core$Maybe$Just(
				{teamName: _p9._0, pipelineName: _p9._1});
		case 'BetaSelectTeam':
			return _elm_lang$core$Maybe$Nothing;
		case 'BetaTeamLogin':
			return _elm_lang$core$Maybe$Nothing;
		case 'BetaHome':
			return _elm_lang$core$Maybe$Nothing;
		default:
			return _elm_lang$core$Maybe$Nothing;
	}
};
var _concourse$atc$BetaTopBar$pipelineIdentifierFromRouteOrModel = F2(
	function (route, model) {
		var _p10 = _concourse$atc$BetaTopBar$extractPidFromRoute(route.logical);
		if (_p10.ctor === 'Nothing') {
			var _p11 = model.pipeline;
			if (_p11.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p12 = _p11._0;
				return _elm_lang$core$Maybe$Just(
					{teamName: _p12.teamName, pipelineName: _p12.name});
			}
		} else {
			return _elm_lang$core$Maybe$Just(_p10._0);
		}
	});
var _concourse$atc$BetaTopBar$setGroups = F2(
	function (newGroups, model) {
		var newUrl = A2(
			_concourse$atc$BetaTopBar$pidToUrl,
			A2(_concourse$atc$BetaTopBar$pipelineIdentifierFromRouteOrModel, model.route, model),
			A2(_concourse$atc$BetaTopBar$setGroupsInLocation, model.route, newGroups));
		return {
			ctor: '_Tuple2',
			_0: model,
			_1: _elm_lang$navigation$Navigation$newUrl(newUrl)
		};
	});
var _concourse$atc$BetaTopBar$queryGroupsForRoute = function (route) {
	return A2(_Bogdanp$elm_querystring$QueryString$all, 'groups', route.queries);
};
var _concourse$atc$BetaTopBar$Model = F5(
	function (a, b, c, d, e) {
		return {route: a, selectedGroups: b, pipeline: c, userState: d, userMenuVisible: e};
	});
var _concourse$atc$BetaTopBar$UserStateUnknown = {ctor: 'UserStateUnknown'};
var _concourse$atc$BetaTopBar$UserStateLoggedOut = {ctor: 'UserStateLoggedOut'};
var _concourse$atc$BetaTopBar$UserStateLoggedIn = function (a) {
	return {ctor: 'UserStateLoggedIn', _0: a};
};
var _concourse$atc$BetaTopBar$ToggleUserMenu = {ctor: 'ToggleUserMenu'};
var _concourse$atc$BetaTopBar$LoggedOut = function (a) {
	return {ctor: 'LoggedOut', _0: a};
};
var _concourse$atc$BetaTopBar$logOut = A2(_elm_lang$core$Task$attempt, _concourse$atc$BetaTopBar$LoggedOut, _concourse$atc$Concourse_User$logOut);
var _concourse$atc$BetaTopBar$NavTo = function (a) {
	return {ctor: 'NavTo', _0: a};
};
var _concourse$atc$BetaTopBar$LogIn = {ctor: 'LogIn'};
var _concourse$atc$BetaTopBar$LogOut = {ctor: 'LogOut'};
var _concourse$atc$BetaTopBar$viewUserState = F2(
	function (userState, userMenuVisible) {
		var _p13 = userState;
		switch (_p13.ctor) {
			case 'UserStateUnknown':
				return _elm_lang$html$Html$text('');
			case 'UserStateLoggedOut':
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('user-info'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _concourse$atc$StrictEvents$onLeftClick(_concourse$atc$BetaTopBar$LogIn),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href(
										_concourse$atc$Format$prependBeta('/login')),
									_1: {
										ctor: '::',
										_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-label', 'Log In'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('login-button'),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('login'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					});
			default:
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('user-info'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('user-id'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(_concourse$atc$BetaTopBar$ToggleUserMenu),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$i,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('fa fa-user'),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' '),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text(_p13._0.team.name),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text(' '),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$i,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('fa fa-caret-down'),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$classList(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'user-menu', _1: true},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'hidden', _1: !userMenuVisible},
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-label', 'Log Out'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(_concourse$atc$BetaTopBar$LogOut),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('logout'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					});
		}
	});
var _concourse$atc$BetaTopBar$SetGroups = function (a) {
	return {ctor: 'SetGroups', _0: a};
};
var _concourse$atc$BetaTopBar$ToggleGroup = function (a) {
	return {ctor: 'ToggleGroup', _0: a};
};
var _concourse$atc$BetaTopBar$viewGroup = F3(
	function (selectedGroups, url, grp) {
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: A2(_elm_lang$core$List$member, grp.name, selectedGroups) ? _elm_lang$html$Html_Attributes$class('main active') : _elm_lang$html$Html_Attributes$class('main'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$href(
							A2(
								_elm_lang$core$Basics_ops['++'],
								url,
								A2(_elm_lang$core$Basics_ops['++'], '?groups=', grp.name))),
						_1: {
							ctor: '::',
							_0: A2(
								_concourse$atc$StrictEvents$onLeftClickOrShiftLeftClick,
								_concourse$atc$BetaTopBar$SetGroups(
									{
										ctor: '::',
										_0: grp.name,
										_1: {ctor: '[]'}
									}),
								_concourse$atc$BetaTopBar$ToggleGroup(grp)),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(grp.name),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _concourse$atc$BetaTopBar$ToggleSidebar = {ctor: 'ToggleSidebar'};
var _concourse$atc$BetaTopBar$view = function (model) {
	return A2(
		_elm_lang$html$Html$nav,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$classList(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'top-bar', _1: true},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'test', _1: true},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'paused',
								_1: _concourse$atc$BetaTopBar$isPaused(model.pipeline)
							},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: function () {
				var _p14 = function () {
					var _p15 = model.pipeline;
					if (_p15.ctor === 'Nothing') {
						return {
							ctor: '_Tuple2',
							_0: {ctor: '[]'},
							_1: '/'
						};
					} else {
						var _p16 = _p15._0;
						return {
							ctor: '_Tuple2',
							_0: A2(
								_elm_lang$core$List$map,
								A2(
									_concourse$atc$BetaTopBar$viewGroup,
									_concourse$atc$BetaTopBar$getSelectedGroupsForRoute(model),
									_p16.url),
								_p16.groups),
							_1: _p16.url
						};
					}
				}();
				var groupList = _p14._0;
				var pipelineUrl = _p14._1;
				return A2(
					_elm_lang$html$Html$ul,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('groups'),
						_1: {ctor: '[]'}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$li,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('main'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('sidebar-toggle test btn-hamburger'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(_concourse$atc$BetaTopBar$ToggleSidebar),
												_1: {
													ctor: '::',
													_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-label', 'Toggle List of Pipelines'),
													_1: {ctor: '[]'}
												}
											}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$i,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('fa fa-bars'),
													_1: {ctor: '[]'}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$li,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('main'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											{
												ctor: '::',
												_0: _concourse$atc$StrictEvents$onLeftClick(
													_concourse$atc$BetaTopBar$NavTo(
														_concourse$atc$Format$prependBeta(pipelineUrl))),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$href(
														_concourse$atc$Format$prependBeta(pipelineUrl)),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$i,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('fa fa-home'),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						groupList));
			}(),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$ul,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('nav-right'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$li,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('nav-item'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(_concourse$atc$BetaTopBar$viewUserState, model.userState, model.userMenuVisible),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _concourse$atc$BetaTopBar$FetchPipeline = function (a) {
	return {ctor: 'FetchPipeline', _0: a};
};
var _concourse$atc$BetaTopBar$subscriptions = function (model) {
	var _p17 = A2(_concourse$atc$BetaTopBar$pipelineIdentifierFromRouteOrModel, model.route, model);
	if (_p17.ctor === 'Nothing') {
		return _elm_lang$core$Platform_Sub$none;
	} else {
		return A2(
			_elm_lang$core$Time$every,
			5 * _elm_lang$core$Time$second,
			_elm_lang$core$Basics$always(
				_concourse$atc$BetaTopBar$FetchPipeline(_p17._0)));
	}
};
var _concourse$atc$BetaTopBar$UserFetched = function (a) {
	return {ctor: 'UserFetched', _0: a};
};
var _concourse$atc$BetaTopBar$fetchUser = A2(_elm_lang$core$Task$attempt, _concourse$atc$BetaTopBar$UserFetched, _concourse$atc$Concourse_User$fetchUser);
var _concourse$atc$BetaTopBar$PipelineFetched = function (a) {
	return {ctor: 'PipelineFetched', _0: a};
};
var _concourse$atc$BetaTopBar$fetchPipeline = function (pipelineIdentifier) {
	return A2(
		_elm_lang$core$Task$attempt,
		_concourse$atc$BetaTopBar$PipelineFetched,
		_concourse$atc$Concourse_Pipeline$fetchPipeline(pipelineIdentifier));
};
var _concourse$atc$BetaTopBar$init = function (route) {
	var pid = _concourse$atc$BetaTopBar$extractPidFromRoute(route.logical);
	return {
		ctor: '_Tuple2',
		_0: {
			selectedGroups: _concourse$atc$BetaTopBar$queryGroupsForRoute(route),
			route: route,
			pipeline: _elm_lang$core$Maybe$Nothing,
			userState: _concourse$atc$BetaTopBar$UserStateUnknown,
			userMenuVisible: false
		},
		_1: function () {
			var _p18 = pid;
			if (_p18.ctor === 'Nothing') {
				return _concourse$atc$BetaTopBar$fetchUser;
			} else {
				return _elm_lang$core$Platform_Cmd$batch(
					{
						ctor: '::',
						_0: _concourse$atc$BetaTopBar$fetchPipeline(_p18._0),
						_1: {
							ctor: '::',
							_0: _concourse$atc$BetaTopBar$fetchUser,
							_1: {ctor: '[]'}
						}
					});
			}
		}()
	};
};
var _concourse$atc$BetaTopBar$update = F2(
	function (msg, model) {
		var _p19 = msg;
		switch (_p19.ctor) {
			case 'Noop':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'FetchPipeline':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _concourse$atc$BetaTopBar$fetchPipeline(_p19._0)
				};
			case 'UserFetched':
				if (_p19._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								userState: _concourse$atc$BetaTopBar$UserStateLoggedIn(_p19._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{userState: _concourse$atc$BetaTopBar$UserStateLoggedOut}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'PipelineFetched':
				if (_p19._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								pipeline: _elm_lang$core$Maybe$Just(_p19._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p20 = _p19._0._0;
					if (_p20.ctor === 'BadStatus') {
						if (_elm_lang$core$Native_Utils.eq(_p20._0.status.code, 401)) {
							var _p21 = model.route.logical;
							switch (_p21.ctor) {
								case 'BetaSelectTeam':
									return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
								case 'BetaTeamLogin':
									return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
								default:
									return {
										ctor: '_Tuple2',
										_0: model,
										_1: _concourse$atc$LoginRedirect$requestLoginRedirect('')
									};
							}
						} else {
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
						}
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				}
			case 'ToggleSidebar':
				return A3(
					_elm_lang$core$Basics$flip,
					_elm_lang$core$Basics$always,
					A2(
						_elm_lang$core$Debug$log,
						'sidebar-toggle-incorrectly-handled',
						{ctor: '_Tuple0'}),
					{ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none});
			case 'ToggleGroup':
				return A2(
					_concourse$atc$BetaTopBar$setGroups,
					A3(_concourse$atc$BetaTopBar$toggleGroup, _p19._0, model.selectedGroups, model.pipeline),
					model);
			case 'SetGroups':
				return A2(_concourse$atc$BetaTopBar$setGroups, _p19._0, model);
			case 'LogIn':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							selectedGroups: {ctor: '[]'},
							pipeline: _elm_lang$core$Maybe$Nothing
						}),
					_1: _elm_lang$navigation$Navigation$newUrl(
						_concourse$atc$Format$prependBeta('/login'))
				};
			case 'LogOut':
				return {ctor: '_Tuple2', _0: model, _1: _concourse$atc$BetaTopBar$logOut};
			case 'NavTo':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _elm_lang$navigation$Navigation$newUrl(_p19._0)
				};
			case 'LoggedOut':
				if (_p19._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								userState: _concourse$atc$BetaTopBar$UserStateLoggedOut,
								pipeline: _elm_lang$core$Maybe$Nothing,
								selectedGroups: {ctor: '[]'}
							}),
						_1: _elm_lang$navigation$Navigation$newUrl(
							_concourse$atc$Format$prependBeta('/'))
					};
				} else {
					return A3(
						_elm_lang$core$Basics$flip,
						_elm_lang$core$Basics$always,
						A2(_elm_lang$core$Debug$log, 'failed to log out', _p19._0._0),
						{ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none});
				}
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{userMenuVisible: !model.userMenuVisible}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _concourse$atc$BetaTopBar$urlUpdate = F2(
	function (route, model) {
		var pipelineIdentifier = A2(_concourse$atc$BetaTopBar$pipelineIdentifierFromRouteOrModel, route, model);
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{
					route: route,
					selectedGroups: _concourse$atc$BetaTopBar$queryGroupsForRoute(route)
				}),
			_1: function () {
				var _p22 = pipelineIdentifier;
				if (_p22.ctor === 'Nothing') {
					return _concourse$atc$BetaTopBar$fetchUser;
				} else {
					return _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: _concourse$atc$BetaTopBar$fetchPipeline(_p22._0),
							_1: {
								ctor: '::',
								_0: _concourse$atc$BetaTopBar$fetchUser,
								_1: {ctor: '[]'}
							}
						});
				}
			}()
		};
	});
var _concourse$atc$BetaTopBar$Noop = {ctor: 'Noop'};

var _concourse$atc$BetaSideBar$toUIPipeline = function (pipeline) {
	return {pipeline: pipeline, pausedChanging: false, pauseErrored: false};
};
var _concourse$atc$BetaSideBar$groupPipelinesByTeam = function (pipelines) {
	var firstPipeline = _elm_lang$core$List$head(pipelines);
	var _p0 = firstPipeline;
	if (_p0.ctor === 'Nothing') {
		return {ctor: '[]'};
	} else {
		var _p2 = _p0._0;
		var _p1 = A2(
			_elm_lang$core$List$partition,
			function (p) {
				return _elm_lang$core$Native_Utils.eq(p.teamName, _p2.teamName);
			},
			pipelines);
		var teamGroup = _p1._0;
		var rest = _p1._1;
		var team = A2(_elm_lang$core$List$map, _concourse$atc$BetaSideBar$toUIPipeline, teamGroup);
		return {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: _p2.teamName, _1: team},
			_1: _concourse$atc$BetaSideBar$groupPipelinesByTeam(rest)
		};
	}
};
var _concourse$atc$BetaSideBar$mapPipeline = F3(
	function (f, pipelineName, uip) {
		return _elm_lang$core$Native_Utils.eq(uip.pipeline.name, pipelineName) ? f(uip) : uip;
	});
var _concourse$atc$BetaSideBar$updatePauseErrored = function (uip) {
	return _elm_lang$core$Native_Utils.update(
		uip,
		{pauseErrored: true, pausedChanging: false});
};
var _concourse$atc$BetaSideBar$updatePausedChanging = function (uip) {
	return _elm_lang$core$Native_Utils.update(
		uip,
		{pausedChanging: true});
};
var _concourse$atc$BetaSideBar$setPaused = F2(
	function (paused, uip) {
		var pipeline = uip.pipeline;
		return _elm_lang$core$Native_Utils.update(
			uip,
			{
				pipeline: _elm_lang$core$Native_Utils.update(
					pipeline,
					{paused: paused}),
				pausedChanging: false,
				pauseErrored: false
			});
	});
var _concourse$atc$BetaSideBar$isPurposeful = function (_p3) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		false,
		A2(
			_elm_lang$core$Maybe$map,
			function (_) {
				return _.purposeful;
			},
			_p3));
};
var _concourse$atc$BetaSideBar$isDragging = function (model) {
	return !_elm_lang$core$Native_Utils.eq(model.dragInfo, _elm_lang$core$Maybe$Nothing);
};
var _concourse$atc$BetaSideBar$dragY = function (dragInfo) {
	return dragInfo.pos.y - dragInfo.startPos.y;
};
var _concourse$atc$BetaSideBar$dragStyle = function (dragInfo) {
	return _elm_lang$html$Html_Attributes$style(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'top',
				_1: A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(
						_concourse$atc$BetaSideBar$dragY(dragInfo)),
					'px')
			},
			_1: {ctor: '[]'}
		});
};
var _concourse$atc$BetaSideBar$dragX = function (dragInfo) {
	return dragInfo.pos.x - dragInfo.startPos.x;
};
var _concourse$atc$BetaSideBar$insertPipelineAt = F3(
	function (location, pipeline, pipelines) {
		var _p4 = location;
		if (_p4.ctor === 'BeforeAll') {
			return {ctor: '::', _0: pipeline, _1: pipelines};
		} else {
			var _p5 = pipelines;
			if (_p5.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				var _p7 = _p5._1;
				var _p6 = _p5._0;
				return _elm_lang$core$Native_Utils.eq(_p6.pipeline.name, _p4._0) ? {
					ctor: '::',
					_0: _p6,
					_1: {ctor: '::', _0: pipeline, _1: _p7}
				} : {
					ctor: '::',
					_0: _p6,
					_1: A3(_concourse$atc$BetaSideBar$insertPipelineAt, location, pipeline, _p7)
				};
			}
		}
	});
var _concourse$atc$BetaSideBar$popPipelineByName = F2(
	function (name, pipelines) {
		var _p8 = pipelines;
		if (_p8.ctor === '[]') {
			return {
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: _elm_lang$core$Maybe$Nothing
			};
		} else {
			var _p11 = _p8._1;
			var _p10 = _p8._0;
			if (_elm_lang$core$Native_Utils.eq(_p10.pipeline.name, name)) {
				return {
					ctor: '_Tuple2',
					_0: _p11,
					_1: _elm_lang$core$Maybe$Just(_p10)
				};
			} else {
				var _p9 = A2(_concourse$atc$BetaSideBar$popPipelineByName, name, _p11);
				var updatedRest = _p9._0;
				var poppedPipeline = _p9._1;
				return {
					ctor: '_Tuple2',
					_0: {ctor: '::', _0: _p10, _1: updatedRest},
					_1: poppedPipeline
				};
			}
		}
	});
var _concourse$atc$BetaSideBar$setPipelinesByTeamNameHelper = F3(
	function (teamName, newPipelines, teams) {
		var _p12 = teams;
		if (_p12.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p14 = _p12._0;
			var _p13 = _p12._1;
			return _elm_lang$core$Native_Utils.eq(
				_elm_lang$core$Tuple$first(_p14),
				teamName) ? {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Tuple$first(_p14),
					_1: newPipelines
				},
				_1: _p13
			} : {
				ctor: '::',
				_0: _p14,
				_1: A3(_concourse$atc$BetaSideBar$setPipelinesByTeamNameHelper, teamName, newPipelines, _p13)
			};
		}
	});
var _concourse$atc$BetaSideBar$setPipelinesByTeamName = F3(
	function (teamName, newPipelines, teams) {
		return A2(
			_elm_lang$core$Maybe$map,
			A2(_concourse$atc$BetaSideBar$setPipelinesByTeamNameHelper, teamName, newPipelines),
			teams);
	});
var _concourse$atc$BetaSideBar$getPipelinesByTeamName = F2(
	function (teamName, teams) {
		return A2(
			_elm_lang$core$Maybe$map,
			_elm_lang$core$Tuple$second,
			_elm_lang$core$List$head(
				A2(
					_elm_lang$core$List$filter,
					function (team) {
						return _elm_lang$core$Native_Utils.eq(
							_elm_lang$core$Tuple$first(team),
							teamName);
					},
					A2(
						_elm_lang$core$Maybe$withDefault,
						{ctor: '[]'},
						teams))));
	});
var _concourse$atc$BetaSideBar$mapModelPipelines = F4(
	function (f, teamName, pipelineName, model) {
		var maybePipelines = A2(_concourse$atc$BetaSideBar$getPipelinesByTeamName, teamName, model.teams);
		var _p15 = maybePipelines;
		if (_p15.ctor === 'Nothing') {
			return model;
		} else {
			var newPipelines = A2(
				_elm_lang$core$List$map,
				A2(_concourse$atc$BetaSideBar$mapPipeline, f, pipelineName),
				_p15._0);
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					teams: A3(_concourse$atc$BetaSideBar$setPipelinesByTeamName, teamName, newPipelines, model.teams)
				});
		}
	});
var _concourse$atc$BetaSideBar$purposefulThreshold = 10;
var _concourse$atc$BetaSideBar$Model = F3(
	function (a, b, c) {
		return {teams: a, dragInfo: b, csrfToken: c};
	});
var _concourse$atc$BetaSideBar$DragInfo = F6(
	function (a, b, c, d, e, f) {
		return {startPos: a, pos: b, teamName: c, pipelineName: d, purposeful: e, hover: f};
	});
var _concourse$atc$BetaSideBar$UIPipeline = F3(
	function (a, b, c) {
		return {pipeline: a, pausedChanging: b, pauseErrored: c};
	});
var _concourse$atc$BetaSideBar$Flags = function (a) {
	return {csrfToken: a};
};
var _concourse$atc$BetaSideBar$AfterElement = function (a) {
	return {ctor: 'AfterElement', _0: a};
};
var _concourse$atc$BetaSideBar$BeforeAll = {ctor: 'BeforeAll'};
var _concourse$atc$BetaSideBar$getPrevHoverForPipelines = F2(
	function (pipelineName, pipelines) {
		getPrevHoverForPipelines:
		while (true) {
			var _p16 = pipelines;
			if (_p16.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				if (_p16._1.ctor === '[]') {
					return _elm_lang$core$Maybe$Just(_concourse$atc$BetaSideBar$BeforeAll);
				} else {
					var _p17 = _p16._1._0;
					if (_elm_lang$core$Native_Utils.eq(_p17.pipeline.name, pipelineName)) {
						return _elm_lang$core$Maybe$Just(
							_concourse$atc$BetaSideBar$AfterElement(_p16._0.pipeline.name));
					} else {
						var _v7 = pipelineName,
							_v8 = {ctor: '::', _0: _p17, _1: _p16._1._1};
						pipelineName = _v7;
						pipelines = _v8;
						continue getPrevHoverForPipelines;
					}
				}
			}
		}
	});
var _concourse$atc$BetaSideBar$getPrevHover = function (model) {
	var _p18 = model.dragInfo;
	if (_p18.ctor === 'Just') {
		var _p19 = _p18._0;
		return A2(
			_elm_lang$core$Maybe$andThen,
			_concourse$atc$BetaSideBar$getPrevHoverForPipelines(_p19.pipelineName),
			A2(_concourse$atc$BetaSideBar$getPipelinesByTeamName, _p19.teamName, model.teams));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _concourse$atc$BetaSideBar$NewCSRFToken = function (a) {
	return {ctor: 'NewCSRFToken', _0: a};
};
var _concourse$atc$BetaSideBar$NavToPipeline = function (a) {
	return {ctor: 'NavToPipeline', _0: a};
};
var _concourse$atc$BetaSideBar$PipelinesReordered = F2(
	function (a, b) {
		return {ctor: 'PipelinesReordered', _0: a, _1: b};
	});
var _concourse$atc$BetaSideBar$orderPipelines = F3(
	function (teamName, pipelineNames, csrfToken) {
		return A2(
			_elm_lang$core$Task$attempt,
			_concourse$atc$BetaSideBar$PipelinesReordered(teamName),
			A3(_concourse$atc$Concourse_Pipeline$order, teamName, pipelineNames, csrfToken));
	});
var _concourse$atc$BetaSideBar$Unhover = F2(
	function (a, b) {
		return {ctor: 'Unhover', _0: a, _1: b};
	});
var _concourse$atc$BetaSideBar$Hover = F2(
	function (a, b) {
		return {ctor: 'Hover', _0: a, _1: b};
	});
var _concourse$atc$BetaSideBar$viewFirstDropArea = function (teamName) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('drop-area first'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onMouseEnter(
					A2(_concourse$atc$BetaSideBar$Hover, teamName, _concourse$atc$BetaSideBar$BeforeAll)),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onMouseLeave(
						A2(_concourse$atc$BetaSideBar$Unhover, teamName, _concourse$atc$BetaSideBar$BeforeAll)),
					_1: {ctor: '[]'}
				}
			}
		},
		{ctor: '[]'});
};
var _concourse$atc$BetaSideBar$viewDropArea = F2(
	function (teamName, pipelineName) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('drop-area'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onMouseEnter(
						A2(
							_concourse$atc$BetaSideBar$Hover,
							teamName,
							_concourse$atc$BetaSideBar$AfterElement(pipelineName))),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onMouseLeave(
							A2(
								_concourse$atc$BetaSideBar$Unhover,
								teamName,
								_concourse$atc$BetaSideBar$AfterElement(pipelineName))),
						_1: {ctor: '[]'}
					}
				}
			},
			{ctor: '[]'});
	});
var _concourse$atc$BetaSideBar$Drag = function (a) {
	return {ctor: 'Drag', _0: a};
};
var _concourse$atc$BetaSideBar$StopDragging = function (a) {
	return {ctor: 'StopDragging', _0: a};
};
var _concourse$atc$BetaSideBar$subscriptions = function (model) {
	return _concourse$atc$BetaSideBar$isDragging(model) ? _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$mouse$Mouse$moves(_concourse$atc$BetaSideBar$Drag),
			_1: {
				ctor: '::',
				_0: _elm_lang$mouse$Mouse$ups(_concourse$atc$BetaSideBar$StopDragging),
				_1: {ctor: '[]'}
			}
		}) : _elm_lang$core$Platform_Sub$none;
};
var _concourse$atc$BetaSideBar$StartDragging = F3(
	function (a, b, c) {
		return {ctor: 'StartDragging', _0: a, _1: b, _2: c};
	});
var _concourse$atc$BetaSideBar$PipelineUnpaused = F3(
	function (a, b, c) {
		return {ctor: 'PipelineUnpaused', _0: a, _1: b, _2: c};
	});
var _concourse$atc$BetaSideBar$unpausePipeline = F3(
	function (teamName, pipelineName, csrfToken) {
		return A2(
			_elm_lang$core$Task$attempt,
			A2(_concourse$atc$BetaSideBar$PipelineUnpaused, teamName, pipelineName),
			A3(_concourse$atc$Concourse_Pipeline$unpause, teamName, pipelineName, csrfToken));
	});
var _concourse$atc$BetaSideBar$PipelinePaused = F3(
	function (a, b, c) {
		return {ctor: 'PipelinePaused', _0: a, _1: b, _2: c};
	});
var _concourse$atc$BetaSideBar$pausePipeline = F3(
	function (teamName, pipelineName, csrfToken) {
		return A2(
			_elm_lang$core$Task$attempt,
			A2(_concourse$atc$BetaSideBar$PipelinePaused, teamName, pipelineName),
			A3(_concourse$atc$Concourse_Pipeline$pause, teamName, pipelineName, csrfToken));
	});
var _concourse$atc$BetaSideBar$update = F2(
	function (action, model) {
		var _p20 = action;
		switch (_p20.ctor) {
			case 'Noop':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'NewCSRFToken':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{csrfToken: _p20._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'PausePipeline':
				var _p22 = _p20._0;
				var _p21 = _p20._1;
				return {
					ctor: '_Tuple2',
					_0: A4(_concourse$atc$BetaSideBar$mapModelPipelines, _concourse$atc$BetaSideBar$updatePausedChanging, _p22, _p21, model),
					_1: A3(_concourse$atc$BetaSideBar$pausePipeline, _p22, _p21, model.csrfToken)
				};
			case 'UnpausePipeline':
				var _p24 = _p20._0;
				var _p23 = _p20._1;
				return {
					ctor: '_Tuple2',
					_0: A4(_concourse$atc$BetaSideBar$mapModelPipelines, _concourse$atc$BetaSideBar$updatePausedChanging, _p24, _p23, model),
					_1: A3(_concourse$atc$BetaSideBar$unpausePipeline, _p24, _p23, model.csrfToken)
				};
			case 'PipelinesFetched':
				if (_p20._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								teams: _elm_lang$core$Maybe$Just(
									_concourse$atc$BetaSideBar$groupPipelinesByTeam(_p20._0._0))
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return A3(
						_elm_lang$core$Basics$flip,
						_elm_lang$core$Basics$always,
						A2(_elm_lang$core$Debug$log, 'failed to fetch pipelines', _p20._0._0),
						{ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none});
				}
			case 'PipelinePaused':
				if (_p20._2.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: A4(
							_concourse$atc$BetaSideBar$mapModelPipelines,
							_concourse$atc$BetaSideBar$setPaused(true),
							_p20._0,
							_p20._1,
							model),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p25 = _p20._2._0;
					if (_p25.ctor === 'BadStatus') {
						var _p26 = _p25._0.status;
						return (_elm_lang$core$Native_Utils.eq(_p26.code, 401) || _elm_lang$core$Native_Utils.eq(_p26.code, 403)) ? {
							ctor: '_Tuple2',
							_0: model,
							_1: _concourse$atc$LoginRedirect$requestLoginRedirect('')
						} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						return {
							ctor: '_Tuple2',
							_0: A4(_concourse$atc$BetaSideBar$mapModelPipelines, _concourse$atc$BetaSideBar$updatePauseErrored, _p20._0, _p20._1, model),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				}
			case 'PipelineUnpaused':
				if (_p20._2.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: A4(
							_concourse$atc$BetaSideBar$mapModelPipelines,
							_concourse$atc$BetaSideBar$setPaused(false),
							_p20._0,
							_p20._1,
							model),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p27 = _p20._2._0;
					if (_p27.ctor === 'BadStatus') {
						var _p28 = _p27._0.status;
						return (_elm_lang$core$Native_Utils.eq(_p28.code, 401) || _elm_lang$core$Native_Utils.eq(_p28.code, 403)) ? {
							ctor: '_Tuple2',
							_0: model,
							_1: _concourse$atc$LoginRedirect$requestLoginRedirect('')
						} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						return {
							ctor: '_Tuple2',
							_0: A4(_concourse$atc$BetaSideBar$mapModelPipelines, _concourse$atc$BetaSideBar$updatePauseErrored, _p20._0, _p20._1, model),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				}
			case 'Drag':
				var _p29 = model.dragInfo;
				if (_p29.ctor === 'Just') {
					var _p30 = _p29._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								dragInfo: _elm_lang$core$Maybe$Just(
									function () {
										var newDragInfo = _elm_lang$core$Native_Utils.update(
											_p30,
											{pos: _p20._0});
										return _elm_lang$core$Native_Utils.update(
											newDragInfo,
											{
												purposeful: _p30.purposeful || ((_elm_lang$core$Native_Utils.cmp(
													_elm_lang$core$Basics$abs(
														_concourse$atc$BetaSideBar$dragX(newDragInfo)),
													_concourse$atc$BetaSideBar$purposefulThreshold) > -1) || (_elm_lang$core$Native_Utils.cmp(
													_elm_lang$core$Basics$abs(
														_concourse$atc$BetaSideBar$dragY(newDragInfo)),
													_concourse$atc$BetaSideBar$purposefulThreshold) > -1))
											});
									}())
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'StartDragging':
				var _p31 = _p20._2;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							dragInfo: _elm_lang$core$Maybe$Just(
								{startPos: _p31, pos: _p31, teamName: _p20._0, pipelineName: _p20._1, purposeful: false, hover: _elm_lang$core$Maybe$Nothing})
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'StopDragging':
				var _p32 = model.dragInfo;
				if (_p32.ctor === 'Just') {
					var _p37 = _p32._0;
					var _p33 = _p37.hover;
					if (_p33.ctor === 'Just') {
						var _p34 = A2(_concourse$atc$BetaSideBar$getPipelinesByTeamName, _p37.teamName, model.teams);
						if (_p34.ctor === 'Just') {
							var _p35 = A2(_concourse$atc$BetaSideBar$popPipelineByName, _p37.pipelineName, _p34._0);
							if (_p35._1.ctor === 'Just') {
								var updatedPipelines = A3(_concourse$atc$BetaSideBar$insertPipelineAt, _p33._0, _p35._1._0, _p35._0);
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{
											dragInfo: _elm_lang$core$Maybe$Nothing,
											teams: A3(_concourse$atc$BetaSideBar$setPipelinesByTeamName, _p37.teamName, updatedPipelines, model.teams)
										}),
									_1: A3(
										_concourse$atc$BetaSideBar$orderPipelines,
										_p37.teamName,
										A2(
											_elm_lang$core$List$map,
											function (_p36) {
												return function (_) {
													return _.name;
												}(
													function (_) {
														return _.pipeline;
													}(_p36));
											},
											updatedPipelines),
										model.csrfToken)
								};
							} else {
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{dragInfo: _elm_lang$core$Maybe$Nothing}),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							}
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{dragInfo: _elm_lang$core$Maybe$Nothing}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						}
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{dragInfo: _elm_lang$core$Maybe$Nothing}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'Hover':
				var _p40 = _p20._1;
				var _p38 = model.dragInfo;
				if (_p38.ctor === 'Just') {
					var _p39 = _p38._0;
					return (_elm_lang$core$Native_Utils.eq(_p39.teamName, _p20._0) && ((!_elm_lang$core$Native_Utils.eq(
						_p40,
						_concourse$atc$BetaSideBar$AfterElement(_p39.pipelineName))) && (!_elm_lang$core$Native_Utils.eq(
						_concourse$atc$BetaSideBar$getPrevHover(model),
						_elm_lang$core$Maybe$Just(_p40))))) ? {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								dragInfo: _elm_lang$core$Maybe$Just(
									_elm_lang$core$Native_Utils.update(
										_p39,
										{
											hover: _elm_lang$core$Maybe$Just(_p40)
										}))
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'Unhover':
				var _p41 = model.dragInfo;
				if (_p41.ctor === 'Just') {
					var _p42 = _p41._0;
					return _elm_lang$core$Native_Utils.eq(
						_p42.hover,
						_elm_lang$core$Maybe$Just(_p20._1)) ? {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								dragInfo: _elm_lang$core$Maybe$Just(
									_elm_lang$core$Native_Utils.update(
										_p42,
										{hover: _elm_lang$core$Maybe$Nothing}))
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'PipelinesReordered':
				if (_p20._1.ctor === 'Ok') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					var _p43 = _p20._1._0;
					if (_p43.ctor === 'BadStatus') {
						return _elm_lang$core$Native_Utils.eq(_p43._0.status.code, 401) ? {
							ctor: '_Tuple2',
							_0: model,
							_1: _concourse$atc$LoginRedirect$requestLoginRedirect('')
						} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				}
			default:
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _elm_lang$navigation$Navigation$newUrl(_p20._0)
				};
		}
	});
var _concourse$atc$BetaSideBar$PipelinesFetched = function (a) {
	return {ctor: 'PipelinesFetched', _0: a};
};
var _concourse$atc$BetaSideBar$fetchPipelines = A2(_elm_lang$core$Task$attempt, _concourse$atc$BetaSideBar$PipelinesFetched, _concourse$atc$Concourse_Pipeline$fetchPipelines);
var _concourse$atc$BetaSideBar$init = function (flags) {
	return {
		ctor: '_Tuple2',
		_0: {teams: _elm_lang$core$Maybe$Nothing, dragInfo: _elm_lang$core$Maybe$Nothing, csrfToken: flags.csrfToken},
		_1: _concourse$atc$BetaSideBar$fetchPipelines
	};
};
var _concourse$atc$BetaSideBar$UnpausePipeline = F2(
	function (a, b) {
		return {ctor: 'UnpausePipeline', _0: a, _1: b};
	});
var _concourse$atc$BetaSideBar$PausePipeline = F2(
	function (a, b) {
		return {ctor: 'PausePipeline', _0: a, _1: b};
	});
var _concourse$atc$BetaSideBar$viewPauseButton = function (uip) {
	return uip.pipeline.paused ? A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Events$onClick(
				A2(_concourse$atc$BetaSideBar$UnpausePipeline, uip.pipeline.teamName, uip.pipeline.name)),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					uip.pauseErrored ? 'btn-pause errored' : 'btn-pause enabled'),
				_1: {ctor: '[]'}
			}
		},
		uip.pausedChanging ? {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$i,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('fa fa-fw fa-circle-o-notch fa-spin'),
					_1: {ctor: '[]'}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		} : {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$i,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('fa fa-fw fa-play'),
					_1: {ctor: '[]'}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}) : A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Events$onClick(
				A2(_concourse$atc$BetaSideBar$PausePipeline, uip.pipeline.teamName, uip.pipeline.name)),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					uip.pauseErrored ? 'btn-pause errored' : 'btn-pause disabled'),
				_1: {ctor: '[]'}
			}
		},
		uip.pausedChanging ? {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$i,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('fa fa-fw fa-circle-o-notch fa-spin'),
					_1: {ctor: '[]'}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		} : {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$i,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('fa fa-fw fa-pause'),
					_1: {ctor: '[]'}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
};
var _concourse$atc$BetaSideBar$viewDraggable = F2(
	function (maybeDragInfo, uip) {
		return A2(
			_elm_lang$html$Html$div,
			function () {
				var dragging = function () {
					var _p44 = maybeDragInfo;
					if (_p44.ctor === 'Just') {
						var _p45 = _p44._0;
						return _elm_lang$core$Native_Utils.eq(_p45.teamName, uip.pipeline.teamName) && _elm_lang$core$Native_Utils.eq(_p45.pipelineName, uip.pipeline.name);
					} else {
						return false;
					}
				}();
				return A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(
							dragging ? (_concourse$atc$BetaSideBar$isPurposeful(maybeDragInfo) ? 'draggable dragging purposeful' : 'draggable dragging') : 'draggable'),
						_1: {
							ctor: '::',
							_0: A2(
								_concourse$atc$StrictEvents$onLeftMouseDownCapturing,
								_elm_lang$mouse$Mouse$position,
								A2(_concourse$atc$BetaSideBar$StartDragging, uip.pipeline.teamName, uip.pipeline.name)),
							_1: {ctor: '[]'}
						}
					},
					function () {
						var _p46 = {ctor: '_Tuple2', _0: maybeDragInfo, _1: dragging};
						if (((_p46.ctor === '_Tuple2') && (_p46._0.ctor === 'Just')) && (_p46._1 === true)) {
							return {
								ctor: '::',
								_0: _concourse$atc$BetaSideBar$dragStyle(_p46._0._0),
								_1: {ctor: '[]'}
							};
						} else {
							return {ctor: '[]'};
						}
					}());
			}(),
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _concourse$atc$BetaSideBar$viewPauseButton(uip),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('pipeline'),
									_1: {
										ctor: '::',
										_0: _concourse$atc$StrictEvents$onLeftClick(
											_concourse$atc$BetaSideBar$NavToPipeline(
												_concourse$atc$Format$prependBeta(uip.pipeline.url))),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href(
												_concourse$atc$Format$prependBeta(uip.pipeline.url)),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(uip.pipeline.name),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _concourse$atc$BetaSideBar$viewFirstPipeline = F2(
	function (maybeDragInfo, uip) {
		return A2(
			_elm_lang$html$Html$li,
			function () {
				var _p47 = maybeDragInfo;
				if (_p47.ctor === 'Just') {
					var _p50 = _p47._0;
					if (_elm_lang$core$Native_Utils.eq(_p50.teamName, uip.pipeline.teamName)) {
						var _p48 = _p50.hover;
						if (_p48.ctor === 'Just') {
							var _p49 = _p48._0;
							return _elm_lang$core$Native_Utils.eq(_p49, _concourse$atc$BetaSideBar$BeforeAll) ? {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('space-before'),
								_1: {ctor: '[]'}
							} : (_elm_lang$core$Native_Utils.eq(
								_p49,
								_concourse$atc$BetaSideBar$AfterElement(uip.pipeline.name)) ? {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('space-after'),
								_1: {ctor: '[]'}
							} : {ctor: '[]'});
						} else {
							return {ctor: '[]'};
						}
					} else {
						return {ctor: '[]'};
					}
				} else {
					return {ctor: '[]'};
				}
			}(),
			A2(
				_elm_lang$core$Basics_ops['++'],
				_concourse$atc$BetaSideBar$isPurposeful(maybeDragInfo) ? {
					ctor: '::',
					_0: _concourse$atc$BetaSideBar$viewFirstDropArea(uip.pipeline.teamName),
					_1: {
						ctor: '::',
						_0: A2(_concourse$atc$BetaSideBar$viewDropArea, uip.pipeline.teamName, uip.pipeline.name),
						_1: {ctor: '[]'}
					}
				} : {ctor: '[]'},
				{
					ctor: '::',
					_0: A2(_concourse$atc$BetaSideBar$viewDraggable, maybeDragInfo, uip),
					_1: {ctor: '[]'}
				}));
	});
var _concourse$atc$BetaSideBar$viewPipeline = F2(
	function (maybeDragInfo, uip) {
		return A2(
			_elm_lang$html$Html$li,
			function () {
				var _p51 = maybeDragInfo;
				if (_p51.ctor === 'Just') {
					var _p53 = _p51._0;
					if (_elm_lang$core$Native_Utils.eq(_p53.teamName, uip.pipeline.teamName)) {
						var _p52 = _p53.hover;
						if (_p52.ctor === 'Just') {
							return _elm_lang$core$Native_Utils.eq(
								_p52._0,
								_concourse$atc$BetaSideBar$AfterElement(uip.pipeline.name)) ? {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('space-after'),
								_1: {ctor: '[]'}
							} : {ctor: '[]'};
						} else {
							return {ctor: '[]'};
						}
					} else {
						return {ctor: '[]'};
					}
				} else {
					return {ctor: '[]'};
				}
			}(),
			A2(
				_elm_lang$core$Basics_ops['++'],
				_concourse$atc$BetaSideBar$isPurposeful(maybeDragInfo) ? {
					ctor: '::',
					_0: A2(_concourse$atc$BetaSideBar$viewDropArea, uip.pipeline.teamName, uip.pipeline.name),
					_1: {ctor: '[]'}
				} : {ctor: '[]'},
				{
					ctor: '::',
					_0: A2(_concourse$atc$BetaSideBar$viewDraggable, maybeDragInfo, uip),
					_1: {ctor: '[]'}
				}));
	});
var _concourse$atc$BetaSideBar$viewTeam = F2(
	function (maybeDragInfo, _p54) {
		var _p55 = _p54;
		var _p57 = _p55._1;
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('team'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('team-header'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('team '),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('bright-text'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(_p55._0),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$ul,
						{ctor: '[]'},
						function () {
							var firstElem = _elm_lang$core$List$head(_p57);
							var _p56 = firstElem;
							if (_p56.ctor === 'Nothing') {
								return {ctor: '[]'};
							} else {
								var firstElemView = A2(_concourse$atc$BetaSideBar$viewFirstPipeline, maybeDragInfo, _p56._0);
								var restView = A2(
									_elm_lang$core$List$map,
									_concourse$atc$BetaSideBar$viewPipeline(maybeDragInfo),
									A2(
										_elm_lang$core$Maybe$withDefault,
										{ctor: '[]'},
										_elm_lang$core$List$tail(_p57)));
								return {ctor: '::', _0: firstElemView, _1: restView};
							}
						}()),
					_1: {ctor: '[]'}
				}
			});
	});
var _concourse$atc$BetaSideBar$view = function (model) {
	var _p58 = model.teams;
	if (_p58.ctor === 'Nothing') {
		return _elm_lang$html$Html$text('loading');
	} else {
		return A2(
			_elm_lang$html$Html$ul,
			{ctor: '[]'},
			A2(
				_elm_lang$core$List$map,
				_concourse$atc$BetaSideBar$viewTeam(model.dragInfo),
				_p58._0));
	}
};
var _concourse$atc$BetaSideBar$Noop = {ctor: 'Noop'};

var _concourse$atc$BetaLayout$routeMatchesModel = F2(
	function (route, model) {
		var _p0 = {ctor: '_Tuple2', _0: route.logical, _1: model.subModel};
		_v0_6:
		do {
			if (_p0.ctor === '_Tuple2') {
				switch (_p0._0.ctor) {
					case 'BetaSelectTeam':
						if (_p0._1.ctor === 'BetaSelectTeamModel') {
							return true;
						} else {
							break _v0_6;
						}
					case 'BetaTeamLogin':
						if (_p0._1.ctor === 'BetaLoginModel') {
							return true;
						} else {
							break _v0_6;
						}
					case 'BetaPipeline':
						if (_p0._1.ctor === 'BetaPipelineModel') {
							return true;
						} else {
							break _v0_6;
						}
					case 'BetaResource':
						if (_p0._1.ctor === 'BetaResourceModel') {
							return true;
						} else {
							break _v0_6;
						}
					case 'BetaBuild':
						if (_p0._1.ctor === 'BetaBuildModel') {
							return true;
						} else {
							break _v0_6;
						}
					case 'BetaJob':
						if (_p0._1.ctor === 'BetaJobModel') {
							return true;
						} else {
							break _v0_6;
						}
					default:
						break _v0_6;
				}
			} else {
				break _v0_6;
			}
		} while(false);
		return false;
	});
var _concourse$atc$BetaLayout$anyNavIndex = -1;
var _concourse$atc$BetaLayout$validNavIndex = F2(
	function (modelNavIndex, navIndex) {
		return _elm_lang$core$Native_Utils.eq(navIndex, _concourse$atc$BetaLayout$anyNavIndex) ? true : _elm_lang$core$Native_Utils.eq(navIndex, modelNavIndex);
	});
var _concourse$atc$BetaLayout$newUrl = _elm_lang$core$Native_Platform.incomingPort('newUrl', _elm_lang$core$Json_Decode$string);
var _concourse$atc$BetaLayout$saveToken = _elm_lang$core$Native_Platform.outgoingPort(
	'saveToken',
	function (v) {
		return v;
	});
var _concourse$atc$BetaLayout$tokenReceived = _elm_lang$core$Native_Platform.incomingPort(
	'tokenReceived',
	_elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
				_1: {ctor: '[]'}
			}
		}));
var _concourse$atc$BetaLayout$loadToken = _elm_lang$core$Native_Platform.outgoingPort(
	'loadToken',
	function (v) {
		return null;
	});
var _concourse$atc$BetaLayout$Flags = F3(
	function (a, b, c) {
		return {turbulenceImgSrc: a, notFoundImgSrc: b, csrfToken: c};
	});
var _concourse$atc$BetaLayout$Model = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {navIndex: a, subModel: b, topModel: c, sideModel: d, sidebarVisible: e, turbulenceImgSrc: f, notFoundImgSrc: g, csrfToken: h, route: i};
	});
var _concourse$atc$BetaLayout$TokenReceived = function (a) {
	return {ctor: 'TokenReceived', _0: a};
};
var _concourse$atc$BetaLayout$LoadToken = {ctor: 'LoadToken'};
var _concourse$atc$BetaLayout$SaveToken = function (a) {
	return {ctor: 'SaveToken', _0: a};
};
var _concourse$atc$BetaLayout$ModifyUrl = function (a) {
	return {ctor: 'ModifyUrl', _0: a};
};
var _concourse$atc$BetaLayout$NewUrl = function (a) {
	return {ctor: 'NewUrl', _0: a};
};
var _concourse$atc$BetaLayout$BetaSideMsg = F2(
	function (a, b) {
		return {ctor: 'BetaSideMsg', _0: a, _1: b};
	});
var _concourse$atc$BetaLayout$BetaTopMsg = F2(
	function (a, b) {
		return {ctor: 'BetaTopMsg', _0: a, _1: b};
	});
var _concourse$atc$BetaLayout$BetaSubMsg = F2(
	function (a, b) {
		return {ctor: 'BetaSubMsg', _0: a, _1: b};
	});
var _concourse$atc$BetaLayout$init = F2(
	function (flags, location) {
		var handleTokenCmd = _elm_lang$core$Native_Utils.eq(flags.csrfToken, '') ? _concourse$atc$BetaLayout$loadToken(
			{ctor: '_Tuple0'}) : _concourse$atc$BetaLayout$saveToken(flags.csrfToken);
		var navIndex = 1;
		var _p1 = _concourse$atc$BetaSideBar$init(
			{csrfToken: flags.csrfToken});
		var sideModel = _p1._0;
		var sideCmd = _p1._1;
		var route = _concourse$atc$BetaRoutes$parsePath(location);
		var _p2 = A2(_concourse$atc$BetaSubPage$init, flags.turbulenceImgSrc, route);
		var subModel = _p2._0;
		var subCmd = _p2._1;
		var _p3 = _concourse$atc$BetaTopBar$init(route);
		var topModel = _p3._0;
		var topCmd = _p3._1;
		var model = {navIndex: navIndex, subModel: subModel, topModel: topModel, sideModel: sideModel, sidebarVisible: false, turbulenceImgSrc: flags.turbulenceImgSrc, notFoundImgSrc: flags.notFoundImgSrc, route: route, csrfToken: flags.csrfToken};
		var stripCSRFTokenParamCmd = _elm_lang$core$Native_Utils.eq(flags.csrfToken, '') ? _elm_lang$core$Platform_Cmd$none : _elm_lang$navigation$Navigation$modifyUrl(
			_concourse$atc$BetaRoutes$customToString(route));
		return {
			ctor: '_Tuple2',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$batch(
				{
					ctor: '::',
					_0: handleTokenCmd,
					_1: {
						ctor: '::',
						_0: stripCSRFTokenParamCmd,
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$core$Platform_Cmd$map,
								_concourse$atc$BetaLayout$BetaSubMsg(navIndex),
								subCmd),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$core$Platform_Cmd$map,
									_concourse$atc$BetaLayout$BetaTopMsg(navIndex),
									topCmd),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$core$Platform_Cmd$map,
										_concourse$atc$BetaLayout$BetaSideMsg(navIndex),
										sideCmd),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				})
		};
	});
var _concourse$atc$BetaLayout$view = function (model) {
	var sidebarVisibileAppendage = function () {
		var _p4 = model.sidebarVisible;
		if (_p4 === true) {
			return ' visible';
		} else {
			return '';
		}
	}();
	var _p5 = model.subModel;
	if (_p5.ctor === 'DashboardModel') {
		return A2(
			_elm_lang$html$Html$map,
			_concourse$atc$BetaLayout$BetaSubMsg(model.navIndex),
			_concourse$atc$BetaSubPage$view(model.subModel));
	} else {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('content-frame'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id('top-bar-app'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$map,
							_concourse$atc$BetaLayout$BetaTopMsg(model.navIndex),
							_concourse$atc$BetaTopBar$view(model.topModel)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('bottom'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$id('pipelines-nav-app'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class(
											A2(_elm_lang$core$Basics_ops['++'], 'sidebar test', sidebarVisibileAppendage)),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$map,
										_concourse$atc$BetaLayout$BetaSideMsg(model.navIndex),
										_concourse$atc$BetaSideBar$view(model.sideModel)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$id('content'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$id('BetaSubPage'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$map,
													_concourse$atc$BetaLayout$BetaSubMsg(model.navIndex),
													_concourse$atc$BetaSubPage$view(model.subModel)),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	}
};
var _concourse$atc$BetaLayout$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _concourse$atc$BetaLayout$newUrl(_concourse$atc$BetaLayout$NewUrl),
			_1: {
				ctor: '::',
				_0: _concourse$atc$BetaLayout$tokenReceived(_concourse$atc$BetaLayout$TokenReceived),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$core$Platform_Sub$map,
						_concourse$atc$BetaLayout$BetaTopMsg(model.navIndex),
						_concourse$atc$BetaTopBar$subscriptions(model.topModel)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Platform_Sub$map,
							_concourse$atc$BetaLayout$BetaSideMsg(model.navIndex),
							_concourse$atc$BetaSideBar$subscriptions(model.sideModel)),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$core$Platform_Sub$map,
								_concourse$atc$BetaLayout$BetaSubMsg(model.navIndex),
								_concourse$atc$BetaSubPage$subscriptions(model.subModel)),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _concourse$atc$BetaLayout$RouteChanged = function (a) {
	return {ctor: 'RouteChanged', _0: a};
};
var _concourse$atc$BetaLayout$locationMsg = function (_p6) {
	return _concourse$atc$BetaLayout$RouteChanged(
		_concourse$atc$BetaRoutes$parsePath(_p6));
};
var _concourse$atc$BetaLayout$Noop = {ctor: 'Noop'};
var _concourse$atc$BetaLayout$resetFavicon = A2(
	_elm_lang$core$Task$perform,
	_elm_lang$core$Basics$always(_concourse$atc$BetaLayout$Noop),
	_concourse$atc$Favicon$set('/public/images/favicon.png'));
var _concourse$atc$BetaLayout$urlUpdate = F2(
	function (route, model) {
		var _p7 = _elm_lang$core$Native_Utils.eq(route, model.route) ? {ctor: '_Tuple2', _0: model.topModel, _1: _elm_lang$core$Platform_Cmd$none} : A2(_concourse$atc$BetaTopBar$urlUpdate, route, model.topModel);
		var newTopModel = _p7._0;
		var tCmd = _p7._1;
		var _p8 = _elm_lang$core$Native_Utils.eq(route, model.route) ? {ctor: '_Tuple2', _0: model.subModel, _1: _elm_lang$core$Platform_Cmd$none} : (A2(_concourse$atc$BetaLayout$routeMatchesModel, route, model) ? A2(_concourse$atc$BetaSubPage$urlUpdate, route, model.subModel) : A2(_concourse$atc$BetaSubPage$init, model.turbulenceImgSrc, route));
		var newSubmodel = _p8._0;
		var cmd = _p8._1;
		var navIndex = _elm_lang$core$Native_Utils.eq(route, model.route) ? model.navIndex : (model.navIndex + 1);
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{navIndex: navIndex, subModel: newSubmodel, topModel: newTopModel, route: route}),
			_1: _elm_lang$core$Platform_Cmd$batch(
				{
					ctor: '::',
					_0: A2(
						_elm_lang$core$Platform_Cmd$map,
						_concourse$atc$BetaLayout$BetaSubMsg(navIndex),
						cmd),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Platform_Cmd$map,
							_concourse$atc$BetaLayout$BetaTopMsg(navIndex),
							tCmd),
						_1: {
							ctor: '::',
							_0: _concourse$atc$BetaLayout$resetFavicon,
							_1: {ctor: '[]'}
						}
					}
				})
		};
	});
var _concourse$atc$BetaLayout$update = F2(
	function (msg, model) {
		var _p9 = msg;
		_v3_10:
		do {
			switch (_p9.ctor) {
				case 'NewUrl':
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _elm_lang$navigation$Navigation$newUrl(_p9._0)
					};
				case 'ModifyUrl':
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _elm_lang$navigation$Navigation$modifyUrl(_p9._0)
					};
				case 'RouteChanged':
					return A2(_concourse$atc$BetaLayout$urlUpdate, _p9._0, model);
				case 'SaveToken':
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _concourse$atc$BetaLayout$saveToken(_p9._0)
					};
				case 'LoadToken':
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _concourse$atc$BetaLayout$loadToken(
							{ctor: '_Tuple0'})
					};
				case 'TokenReceived':
					if (_p9._0.ctor === 'Nothing') {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						var _p12 = _p9._0._0;
						var _p10 = A2(
							_concourse$atc$BetaSideBar$update,
							_concourse$atc$BetaSideBar$NewCSRFToken(_p12),
							model.sideModel);
						var newSideModel = _p10._0;
						var sideCmd = _p10._1;
						var _p11 = A5(
							_concourse$atc$BetaSubPage$update,
							model.turbulenceImgSrc,
							model.notFoundImgSrc,
							_p12,
							_concourse$atc$BetaSubPage$NewCSRFToken(_p12),
							model.subModel);
						var newSubModel = _p11._0;
						var subCmd = _p11._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{csrfToken: _p12, subModel: newSubModel, sideModel: newSideModel}),
							_1: _elm_lang$core$Platform_Cmd$batch(
								{
									ctor: '::',
									_0: A2(
										_elm_lang$core$Platform_Cmd$map,
										_concourse$atc$BetaLayout$BetaSubMsg(_concourse$atc$BetaLayout$anyNavIndex),
										subCmd),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$core$Platform_Cmd$map,
											_concourse$atc$BetaLayout$BetaSideMsg(_concourse$atc$BetaLayout$anyNavIndex),
											sideCmd),
										_1: {ctor: '[]'}
									}
								})
						};
					}
				case 'BetaSubMsg':
					switch (_p9._1.ctor) {
						case 'BetaLoginMsg':
							if ((_p9._1._0.ctor === 'AuthSessionReceived') && (_p9._1._0._0.ctor === 'Ok')) {
								var _p16 = _p9._1._0._0._0;
								var _p13 = A2(
									_concourse$atc$BetaSideBar$update,
									_concourse$atc$BetaSideBar$NewCSRFToken(_p16.csrfToken),
									model.sideModel);
								var sideModel = _p13._0;
								var sideCmd = _p13._1;
								var _p14 = A5(
									_concourse$atc$BetaSubPage$update,
									model.turbulenceImgSrc,
									model.notFoundImgSrc,
									_p16.csrfToken,
									_concourse$atc$BetaSubPage$BetaLoginMsg(
										_concourse$atc$BetaLogin$AuthSessionReceived(
											_elm_lang$core$Result$Ok(_p16))),
									model.subModel);
								var subModel = _p14._0;
								var subCmd = _p14._1;
								var _p15 = A2(
									_concourse$atc$BetaLayout$update,
									_concourse$atc$BetaLayout$SaveToken(_p16.csrfToken),
									model);
								var layoutModel = _p15._0;
								var layoutCmd = _p15._1;
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{subModel: subModel, sideModel: sideModel, csrfToken: _p16.csrfToken}),
									_1: _elm_lang$core$Platform_Cmd$batch(
										{
											ctor: '::',
											_0: layoutCmd,
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$core$Platform_Cmd$map,
													_concourse$atc$BetaLayout$BetaSideMsg(_concourse$atc$BetaLayout$anyNavIndex),
													sideCmd),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$core$Platform_Cmd$map,
														_concourse$atc$BetaLayout$BetaTopMsg(_concourse$atc$BetaLayout$anyNavIndex),
														_concourse$atc$BetaTopBar$fetchUser),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$core$Platform_Cmd$map,
															_concourse$atc$BetaLayout$BetaSideMsg(_concourse$atc$BetaLayout$anyNavIndex),
															_concourse$atc$BetaSideBar$fetchPipelines),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$core$Platform_Cmd$map,
																_concourse$atc$BetaLayout$BetaSubMsg(_p9._0),
																subCmd),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										})
								};
							} else {
								break _v3_10;
							}
						case 'PipelinesFetched':
							if (_p9._1._0.ctor === 'Ok') {
								var _p21 = _p9._0;
								var pipeline = _elm_lang$core$List$head(_p9._1._0._0);
								var _p17 = A5(
									_concourse$atc$BetaSubPage$update,
									model.turbulenceImgSrc,
									model.notFoundImgSrc,
									model.csrfToken,
									_concourse$atc$BetaSubPage$DefaultPipelineFetched(pipeline),
									model.subModel);
								var subModel = _p17._0;
								var subCmd = _p17._1;
								var _p18 = pipeline;
								if (_p18.ctor === 'Nothing') {
									return {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Native_Utils.update(
											model,
											{subModel: subModel}),
										_1: A2(
											_elm_lang$core$Platform_Cmd$map,
											_concourse$atc$BetaLayout$BetaSubMsg(_p21),
											subCmd)
									};
								} else {
									var _p20 = _p18._0;
									var _p19 = A2(
										_concourse$atc$BetaTopBar$update,
										_concourse$atc$BetaTopBar$FetchPipeline(
											{teamName: _p20.teamName, pipelineName: _p20.name}),
										model.topModel);
									var topModel = _p19._0;
									var topCmd = _p19._1;
									return {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Native_Utils.update(
											model,
											{subModel: subModel, topModel: topModel}),
										_1: _elm_lang$core$Platform_Cmd$batch(
											{
												ctor: '::',
												_0: A2(
													_elm_lang$core$Platform_Cmd$map,
													_concourse$atc$BetaLayout$BetaSubMsg(_p21),
													subCmd),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$core$Platform_Cmd$map,
														_concourse$atc$BetaLayout$BetaTopMsg(_p21),
														topCmd),
													_1: {ctor: '[]'}
												}
											})
									};
								}
							} else {
								break _v3_10;
							}
						default:
							break _v3_10;
					}
				case 'BetaTopMsg':
					if (_p9._1.ctor === 'ToggleSidebar') {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{sidebarVisible: !model.sidebarVisible}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						var _p25 = _p9._0;
						if (A2(_concourse$atc$BetaLayout$validNavIndex, model.navIndex, _p25)) {
							var _p24 = A2(_concourse$atc$BetaTopBar$update, _p9._1, model.topModel);
							var topModel = _p24._0;
							var topCmd = _p24._1;
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{topModel: topModel}),
								_1: A2(
									_elm_lang$core$Platform_Cmd$map,
									_concourse$atc$BetaLayout$BetaTopMsg(_p25),
									topCmd)
							};
						} else {
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
						}
					}
				case 'BetaSideMsg':
					var _p27 = _p9._0;
					if (A2(_concourse$atc$BetaLayout$validNavIndex, model.navIndex, _p27)) {
						var _p26 = A2(_concourse$atc$BetaSideBar$update, _p9._1, model.sideModel);
						var sideModel = _p26._0;
						var sideCmd = _p26._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{sideModel: sideModel}),
							_1: A2(
								_elm_lang$core$Platform_Cmd$map,
								_concourse$atc$BetaLayout$BetaSideMsg(_p27),
								sideCmd)
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				default:
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			}
		} while(false);
		var _p23 = _p9._0;
		if (A2(_concourse$atc$BetaLayout$validNavIndex, model.navIndex, _p23)) {
			var _p22 = A5(_concourse$atc$BetaSubPage$update, model.turbulenceImgSrc, model.notFoundImgSrc, model.csrfToken, _p9._1, model.subModel);
			var subModel = _p22._0;
			var subCmd = _p22._1;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{subModel: subModel}),
				_1: A2(
					_elm_lang$core$Platform_Cmd$map,
					_concourse$atc$BetaLayout$BetaSubMsg(_p23),
					subCmd)
			};
		} else {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});

var _concourse$atc$BetaMain$main = A2(
	_elm_lang$navigation$Navigation$programWithFlags,
	_concourse$atc$BetaLayout$locationMsg,
	{init: _concourse$atc$BetaLayout$init, update: _concourse$atc$BetaLayout$update, view: _concourse$atc$BetaLayout$view, subscriptions: _concourse$atc$BetaLayout$subscriptions})(
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (csrfToken) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (notFoundImgSrc) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (turbulenceImgSrc) {
							return _elm_lang$core$Json_Decode$succeed(
								{csrfToken: csrfToken, notFoundImgSrc: notFoundImgSrc, turbulenceImgSrc: turbulenceImgSrc});
						},
						A2(_elm_lang$core$Json_Decode$field, 'turbulenceImgSrc', _elm_lang$core$Json_Decode$string));
				},
				A2(_elm_lang$core$Json_Decode$field, 'notFoundImgSrc', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'csrfToken', _elm_lang$core$Json_Decode$string)));

var Elm = {};
Elm['BetaMain'] = Elm['BetaMain'] || {};
if (typeof _concourse$atc$BetaMain$main !== 'undefined') {
    _concourse$atc$BetaMain$main(Elm['BetaMain'], 'BetaMain', undefined);
}

if (typeof define === "function" && define['amd'])
{
  define([], function() { return Elm; });
  return;
}

if (typeof module === "object")
{
  module['exports'] = Elm;
  return;
}

var globalElm = this['Elm'];
if (typeof globalElm === "undefined")
{
  this['Elm'] = Elm;
  return;
}

for (var publicModule in Elm)
{
  if (publicModule in globalElm)
  {
    throw new Error('There are two Elm modules called `' + publicModule + '` on this page! Rename one of them.');
  }
  globalElm[publicModule] = Elm[publicModule];
}

}).call(this);

