// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/db"
	"github.com/concourse/atc/web/getjob"
)

type FakeJobBuildsPaginator struct {
	PaginateJobBuildsStub        func(job string, startingJobBuildID int, newerJobBuilds bool) ([]db.Build, getjob.PaginationData, error)
	paginateJobBuildsMutex       sync.RWMutex
	paginateJobBuildsArgsForCall []struct {
		job                string
		startingJobBuildID int
		newerJobBuilds     bool
	}
	paginateJobBuildsReturns struct {
		result1 []db.Build
		result2 getjob.PaginationData
		result3 error
	}
}

func (fake *FakeJobBuildsPaginator) PaginateJobBuilds(job string, startingJobBuildID int, newerJobBuilds bool) ([]db.Build, getjob.PaginationData, error) {
	fake.paginateJobBuildsMutex.Lock()
	fake.paginateJobBuildsArgsForCall = append(fake.paginateJobBuildsArgsForCall, struct {
		job                string
		startingJobBuildID int
		newerJobBuilds     bool
	}{job, startingJobBuildID, newerJobBuilds})
	fake.paginateJobBuildsMutex.Unlock()
	if fake.PaginateJobBuildsStub != nil {
		return fake.PaginateJobBuildsStub(job, startingJobBuildID, newerJobBuilds)
	} else {
		return fake.paginateJobBuildsReturns.result1, fake.paginateJobBuildsReturns.result2, fake.paginateJobBuildsReturns.result3
	}
}

func (fake *FakeJobBuildsPaginator) PaginateJobBuildsCallCount() int {
	fake.paginateJobBuildsMutex.RLock()
	defer fake.paginateJobBuildsMutex.RUnlock()
	return len(fake.paginateJobBuildsArgsForCall)
}

func (fake *FakeJobBuildsPaginator) PaginateJobBuildsArgsForCall(i int) (string, int, bool) {
	fake.paginateJobBuildsMutex.RLock()
	defer fake.paginateJobBuildsMutex.RUnlock()
	return fake.paginateJobBuildsArgsForCall[i].job, fake.paginateJobBuildsArgsForCall[i].startingJobBuildID, fake.paginateJobBuildsArgsForCall[i].newerJobBuilds
}

func (fake *FakeJobBuildsPaginator) PaginateJobBuildsReturns(result1 []db.Build, result2 getjob.PaginationData, result3 error) {
	fake.PaginateJobBuildsStub = nil
	fake.paginateJobBuildsReturns = struct {
		result1 []db.Build
		result2 getjob.PaginationData
		result3 error
	}{result1, result2, result3}
}

var _ getjob.JobBuildsPaginator = new(FakeJobBuildsPaginator)
